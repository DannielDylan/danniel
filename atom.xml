<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Danniel’s Blog</title>
  
  
  <link href="/danniel/atom.xml" rel="self"/>
  
  <link href="https://dannieldylan.github.io/danniel/"/>
  <updated>2018-10-09T15:53:14.361Z</updated>
  <id>https://dannieldylan.github.io/danniel/</id>
  
  <author>
    <name>DylanWoo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>redhat/centos使用</title>
    <link href="https://dannieldylan.github.io/danniel/2018/09/29/redhat-centos%E4%BD%BF%E7%94%A8/"/>
    <id>https://dannieldylan.github.io/danniel/2018/09/29/redhat-centos使用/</id>
    <published>2018-09-29T01:38:01.000Z</published>
    <updated>2018-10-09T15:53:14.361Z</updated>
    
    <content type="html"><![CDATA[<p>RedHat Enterprise Linux 7使用yum安装出现This system is not registered to Red Hat Subscription Management。经过百度、谷歌才知道，如果使用redhat的yum源是需要注册付费的，那么如果不想付费或者作为一名初学者和学生，较多的不想花钱咯（当然有钱另说咯）。<br><a id="more"></a><br>那么现在开始卸载原来所有yum的依赖包，然后使用centos的yum源，在这还得注意的是所有人的环境和系统都不一样，解决方法不尽相同，需要”随机应变”，不要照搬轮子。</p><h3 id="1-卸载RedHat原来的自带的yum包"><a href="#1-卸载RedHat原来的自带的yum包" class="headerlink" title="1.卸载RedHat原来的自带的yum包"></a><strong><em>1.卸载RedHat原来的自带的yum包</em></strong></h3><p>使用命令 rpm -qa|grep yum 能够查看已经安装的yum包。然后使用命令 rpm -qa|grep yum|xargs rpm -e –nodeps 不检查依赖直接删除所有的rpm包。最后再次用 rpm -qa|grep yum 命令查看，发现没有任何显示，则表示卸载成功。</p><p>在下载新的centos的yum包前，还需要弄清自己的系统版本号和系统位数，使用命令cat /etc/issue &amp;&amp; arch 查看，如果是i386或者i686就是32位的，如果是x86_64就是64位的，然后去各大国内镜像centos网站找对应系统版本和系统位数下载。本文以<a href="http://mirrors.163.com/centos/" target="_blank" rel="noopener">网易163</a>(<a href="http://mirrors.163.com/centos/)举例" target="_blank" rel="noopener">http://mirrors.163.com/centos/)举例</a>.<br>首先在对应系统的centos文件内下载以下文件或者对应的使用wget+镜像地址等安装即可<br>文件下载方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">第一步在home目录下创建yum命名的文件夹</span><br><span class="line">[root@DylanWoo Desktop]# mkdir /home/yum</span><br><span class="line">将浏览器下载的7个文件移动或者复制到yum目录下(如果跟我系统一样的Red Hat Enterprise Linux Server 7.0-x86_64，则可以打开我的网盘进行下载链接: https://pan.baidu.com/s/1gpON2A1wYPlg2Ptfd1mZtQ 提取码: q73v）</span><br><span class="line">[python-iniparse-0.4-9.el7.noarch.rpm</span><br><span class="line">python-urlgrabber-3.10-8.el7.noarch.rpm</span><br><span class="line">yum-3.4.3-158.el7.centos.noarch.rpm</span><br><span class="line">yum-metadata-parser-1.1.4-10.el7.x86_64.rpm</span><br><span class="line">yum-plugin-fastestmirror-1.1.31-45.el7.noarch.rpm</span><br><span class="line">yum-updateonboot-1.1.31-45.el7.noarch.rpm</span><br><span class="line">yum-utils-1.1.31-45.el7.noarch.rpm]</span><br><span class="line">[root@DylanWoo yum]# ls</span><br><span class="line">python-iniparse-0.4-9.el7.noarch.rpm</span><br><span class="line">python-urlgrabber-3.10-8.el7.noarch.rpm</span><br><span class="line">yum-3.4.3-158.el7.centos.noarch.rpm</span><br><span class="line">yum-metadata-parser-1.1.4-10.el7.x86_64.rpm</span><br><span class="line">yum-plugin-fastestmirror-1.1.31-45.el7.noarch.rpm</span><br><span class="line">yum-updateonboot-1.1.31-45.el7.noarch.rpm</span><br><span class="line">yum-utils-1.1.31-45.el7.noarch.rpm</span><br><span class="line">[root@DylanWoo yum]# rpm -ivh *.rpm</span><br></pre></td></tr></table></figure><p>安装yum过程中可能会出现的坑 </p><ol><li><p>警告：yum-3.4.3-158.el7.centos.noarch.rpm: 头V3 RSA/SHA256 Signature, 密钥 ID f4a80eb5: NOKEY\<br>错误：依赖检测失败：<br> python-urlgrabber &gt;= 3.10-8 被 yum-3.4.3-158.el7.centos.noarch 需要\<br> rpm &gt;= 0:4.11.3-22 被 yum-3.4.3-158.el7.centos.noarch 需要</p><p> 解决：<br>wget <a href="http://mirrors.163.com/centos/7/os/x86_64/Packages/rpm-4.11.3-32.el7.x86_64.rpm\" target="_blank" rel="noopener">http://mirrors.163.com/centos/7/os/x86_64/Packages/rpm-4.11.3-32.el7.x86_64.rpm\</a><br>rpm -Uvh rpm-4.11.3-32.el7.x86_64.rpm –nodeps</p></li></ol><p>考虑到国内无法访问Google，所以需要自己配置yum源，在目录 /etc/yum.repos.d/ 下新建google-chrome.repo文件，\<br>···</p><p>cd /ect/yum.repos.d/ \<br>vim google-chrome.repo</p><p>···</p><p>写入如下内容:</p><p>···<br>[google-chrome]<br>name=google-chrome<br>baseurl=<a href="http://dl.google.com/linux/chrome/rpm/stable/$basearch" target="_blank" rel="noopener">http://dl.google.com/linux/chrome/rpm/stable/$basearch</a><br>enabled=1<br>gpgcheck=1<br>gpgkey=<a href="https://dl-ssl.google.com/linux/linux_signing_key.pub" target="_blank" rel="noopener">https://dl-ssl.google.com/linux/linux_signing_key.pub</a></p><p>···<br>yum -y install google-chrome-stable –nogpgcheck</p><h4 id="简易使用代理设置"><a href="#简易使用代理设置" class="headerlink" title="简易使用代理设置"></a>简易使用代理设置</h4><p>通过使用vmware虚拟机实现局域网代理<br>ssr选项设置中将本地代理 允许来自局域网的连接 端口为1080</p><p>[root@DylanWoo Downloads]# google-chrome &amp;<br>[1] 5635<br>[root@DylanWoo Downloads]# /bin/google-chrome: symbol lookup error: /bin/google-chrome: undefined symbol: gtk_widget_get_scale_factor<br>处理 initscripts-9.49.41-1.el7_5.2.x86_64 与 redhat-release &lt; 7.5-0.11 的冲突<br>–&gt; 解决依赖关系完成</p><p>rpm -e redhat-release-server-7.0-1.el7.x86_64 –nodeps</p><p>[root@DylanWoo yum.repos.d]# yum clean all<br>bash: yum: 未找到命令…</p><h4 id="安装方式之一"><a href="#安装方式之一" class="headerlink" title="安装方式之一"></a>安装方式之一</h4><p>yum install <a href="https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm" target="_blank" rel="noopener">https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;RedHat Enterprise Linux 7使用yum安装出现This system is not registered to Red Hat Subscription Management。经过百度、谷歌才知道，如果使用redhat的yum源是需要注册付费的，那么如果不想付费或者作为一名初学者和学生，较多的不想花钱咯（当然有钱另说咯）。&lt;br&gt;
    
    </summary>
    
    
      <category term="Centos" scheme="https://dannieldylan.github.io/danniel/tags/Centos/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu操作指令小结</title>
    <link href="https://dannieldylan.github.io/danniel/2018/04/14/Ubuntu%E6%93%8D%E4%BD%9C%E6%8C%87%E4%BB%A4%E5%B0%8F%E7%BB%93/"/>
    <id>https://dannieldylan.github.io/danniel/2018/04/14/Ubuntu操作指令小结/</id>
    <published>2018-04-14T13:41:48.000Z</published>
    <updated>2018-10-10T13:43:31.472Z</updated>
    
    <content type="html"><![CDATA[<p><strong>一、文件/文件夹管理</strong> </p><p>ls 列出当前目录文件（不包括隐含文件） </p><p>ls -a 列出当前目录文件（包括隐含文件） </p><p>ls -l 列出当前目录下文件的详细信息 </p><p>cd .. 回当前目录的上一级目录 </p><p>cd - 回上一次所在的目录 </p><p>cd ~ 或 cd 回当前用户的宿主目录 </p><p>mkdir 目录名 创建一个目录 </p><p>rmdir 空目录名 删除一个空目录 </p><p>rm 文件名 文件名 删除一个文件或多个文件 </p><p>rm -rf 非空目录名 删除一个非空目录下的一切 </p><p>mv 路经/文件 /经/文件移动相对路经下的文件到绝对路经下 </p><p>mv 文件名 新名称 在当前目录下改名 </p><p>find 路经 -name “字符串” 查找路经所在范围内满足字符串匹配的文件和目录 </p><p><strong>二、系统管理 </strong></p><p>fdisk fdisk -l 查看系统分区信息 </p><p>fdisk fdisk /dev/sdb 为一块新的SCSI硬盘进行分区 </p><p>chown chown root /home 把/home的属主改成root用户 </p><p>chgrp chgrp root /home 把/home的属组改成root组 </p><p>Useradd 创建一个新的用户 </p><p>Groupadd 组名 创建一个新的组 </p><p>Passwd 用户名 为用户创建密码 </p><p>Passwd -d用户名 删除用户密码也能登陆 </p><p>Passwd -S用户名 查询账号密码 </p><p>Usermod -l 新用户名 老用户名 为用户改名 </p><p>Userdel–r 用户名 删除用户一切 </p><p>service [servicename] start/stop/restart 系统服务控制操作 </p><p>/etc/init.d/[servicename] start/stop/restart 系统服务控制操作 </p><p>uname -a 查看内核版本 </p><p>cat /etc/issue 查看ubuntu版本 </p><p>lsusb 查看usb设备 </p><p>sudo ethtool eth0 查看网卡状态 </p><p>cat /proc/cpuinfo 查看cpu信息 </p><p>lshw 查看当前硬件信息 </p><p>sudo fdisk -l 查看磁盘信息 </p><p>df -h 查看硬盘剩余空间 </p><p>free -m 查看当前的内存使用情况 </p><p>ps -A 查看当前有哪些进程 </p><p>kill 进程号(就是ps -A中的第一列的数字)或者 killall 进程名( 杀死一个进程) </p><p>kill -9 进程号 强制杀死一个进程 </p><p>reboot Init 6 重启LINUX系统 </p><p>Halt Init 0 Shutdown –h now 关闭LINUX系统 </p><p><strong>三、打包/解压 </strong></p><p>tar -c 创建包 –x 释放包 -v 显示命令过程 –z 代表压缩包 </p><p>tar –cvf benet.tar /home/benet 把/home/benet目录打包 </p><p>tar –zcvf benet.tar.gz /mnt 把目录打包并压缩 </p><p>tar –zxvf benet.tar.gz 压缩包的文件解压恢复 </p><p>tar –jxvf benet.tar.bz2 解压缩 </p><p><strong>四、make编译 </strong></p><p>make 编译 </p><p>make install 安装编译好的源码包 </p><p><strong>五、apt命令 </strong></p><p>apt-cache search package 搜索包 </p><p>apt-cache show package 获取包的相关信息，如说明、大小、版本等 </p><p>sudo apt-get install package 安装包 </p><p>sudo apt-get install package - - reinstall 重新安装包 </p><p>sudo apt-get -f install 修复安装”-f = –fix-missing” </p><p>sudo apt-get remove package 删除包 </p><p>sudo apt-get remove package - - purge 删除包，包括删除配置文件等 </p><p>sudo apt-get update 更新源 </p><p>sudo apt-get upgrade 更新已安装的包 </p><p>sudo apt-get dist-upgrade 升级系统 </p><p>sudo apt-get dselect-upgrade 使用 dselect 升级 </p><p>apt-cache depends package 了解使用依赖 </p><p>apt-cache rdepends package 是查看该包被哪些包依赖 </p><p>sudo apt-get build-dep package 安装相关的编译环境 </p><p>apt-get source package 下载该包的源代码 </p><p>sudo apt-get clean &amp;&amp; sudo apt-get autoclean 清理无用的包 </p><p>sudo apt-get check 检查是否有损坏的依赖 </p><p>sudo apt-get clean 清理所有软件缓存（即缓存在/var/cache/apt/archives目录里的deb包）</p><p><strong>查看软件xxx安装内容 </strong></p><p>dpkg -L xxx </p><p>查找软件 </p><p>apt-cache search 正则表达式 </p><p>查找文件属于哪个包 </p><p>dpkg -S filename apt-file search filename </p><p>查询软件xxx依赖哪些包 </p><p>apt-cache depends xxx </p><p>查询软件xxx被哪些包依赖 </p><p>apt-cache rdepends xxx </p><p>增加一个光盘源 </p><p>sudo apt-cdrom add </p><p>系统升级 </p><p>sudo apt-get update </p><p>sudo apt-get upgrade </p><p>sudo apt-get dist-upgrade </p><p>清除所以删除包的残余配置文件 </p><p>dpkg -l |grep ^rc|awk ‘{print $2}’ |tr [“\n”] [“ “]|sudo xargs dpkg -P - </p><p>编译时缺少h文件的自动处理 </p><p>sudo auto-apt run ./configure </p><p>查看安装软件时下载包的临时存放目录 </p><p>ls /var/cache/apt/archives </p><p>备份当前系统安装的所有包的列表 </p><p>dpkg –get-selections | grep -v deinstall &gt; ~/somefile </p><p>从上面备份的安装包的列表文件恢复所有包 </p><p>dpkg –set-selections &lt; ~/somefile sudo dselect </p><p>清理旧版本的软件缓存 </p><p>sudo apt-get autoclean </p><p>清理所有软件缓存 </p><p>sudo apt-get clean </p><p>删除系统不再使用的孤立软件 </p><p>sudo apt-get autoremove </p><p>查看包在服务器上面的地址 </p><p>apt-get -qq –print-uris install ssh | cut -d\’ -f2 </p><p>系统 </p><p>查看内核 </p><p>uname -a </p><p>查看Ubuntu版本 </p><p>cat /etc/issue </p><p>查看内核加载的模块 </p><p>lsmod </p><p>查看PCI设备 </p><p>lspci </p><p>查看USB设备 </p><p>lsusb </p><p>查看网卡状态 </p><p>sudo ethtool eth0 </p><p>查看CPU信息 </p><p>cat /proc/cpuinfo </p><p>显示当前硬件信息 </p><p>lshw </p><p>硬盘 </p><p>查看硬盘的分区 </p><p>sudo fdisk -l </p><p>查看IDE硬盘信息 </p><p>sudo hdparm -i /dev/hda </p><p>查看STAT硬盘信息 </p><p>sudo hdparm -I /dev/sda </p><p>或 </p><p>sudo apt-get install blktool </p><p>sudo blktool /dev/sda id </p><p>查看硬盘剩余空间 </p><p>df -h </p><p>df -H </p><p>查看目录占用空间 </p><p>du -hs 目录名 </p><p>优盘没法卸载 </p><p>sync fuser -km /media/usbdisk </p><p>内存 </p><p>查看当前的内存使用情况 </p><p>free -m </p><p>进程 </p><p>查看当前有哪些进程 </p><p>ps -A </p><p>中止一个进程 </p><p>kill 进程号(就是ps -A中的第一列的数字) 或者 killall 进程名 </p><p>强制中止一个进程(在上面进程中止不成功的时候使用) </p><p>kill -9 进程号 或者 killall -9 进程名 </p><p>图形方式中止一个程序 </p><p>xkill 出现骷髅标志的鼠标，点击需要中止的程序即可 </p><p>查看当前进程的实时状况 </p><p>top </p><p>查看进程打开的文件 </p><p>lsof -p </p><p>ADSL 配置 ADSL </p><p>sudo pppoeconf </p><p>ADSL手工拨号 </p><p>sudo pon dsl-provider </p><p>激活 ADSL </p><p>sudo /etc/ppp/pppoe_on_boot </p><p>断开 ADSL </p><p>sudo poff </p><p>查看拨号日志 </p><p>sudo plog </p><p>如何设置动态域名 </p><p>首先去<a href="http://www.3322.org/" target="_blank" rel="noopener">http://www.3322.org</a>申请一个动态域名 </p><p>然后修改 /etc/ppp/ip-up 增加拨号时更新域名指令 sudo vim /etc/ppp/ip-up </p><p>在最后增加如下行 w3m -no-cookie -dump </p><p>网络 </p><p>根据IP查网卡地址 </p><p>arping IP地址 </p><p>查看当前IP地址 </p><p>ifconfig eth0 |awk ‘/inet/ {split($2,x,”:”);print x[2]}’ </p><p>查看当前外网的IP地址 </p><p>w3m -no-cookie -dump<a href="http://www.edu.cn|grep-o‘[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}’" target="_blank" rel="noopener">www.edu.cn|grep-o‘[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}’</a> </p><p>w3m -no-cookie -dump<a href="http://www.xju.edu.cn|grep-o’[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}’" target="_blank" rel="noopener">www.xju.edu.cn|grep-o’[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}’</a> </p><p>w3m -no-cookie -dump ip.loveroot.com|grep -o’[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}’ </p><p>查看当前监听80端口的程序 </p><p>lsof -i :80 </p><p>查看当前网卡的物理地址 </p><p>arp -a | awk ‘{print $4}’ ifconfig eth0 | head -1 | awk ‘{print $5}’ </p><p>立即让网络支持nat </p><p>sudo echo 1 &gt; /proc/sys/net/ipv4/ip_forward </p><p>sudo iptables -t nat -I POSTROUTING -j MASQUERADE </p><p>查看路由信息 </p><p>netstat -rn sudo route -n </p><p>手工增加删除一条路由 </p><p>sudo route add -net 192.168.0.0 netmask 255.255.255.0 gw 172.16.0.1 </p><p>sudo route del -net 192.168.0.0 netmask 255.255.255.0 gw 172.16.0.1 </p><p>修改网卡MAC地址的方法 </p><p>sudo ifconfig eth0 down 关闭网卡 </p><p>sudo ifconfig eth0 hw ether 00:AA:BB:CC:DD:EE 然后改地址 </p><p>sudo ifconfig eth0 up 然后启动网卡 </p><p>统计当前IP连接的个数 </p><p>netstat -na|grep ESTABLISHED|awk ‘{print $5}’|awk -F: ‘{print $1}’|sort|uniq -c|sort -r -n </p><p>netstat -na|grep SYN|awk ‘{print $5}’|awk -F: ‘{print $1}’|sort|uniq -c|sort -r -n </p><p>统计当前20000个IP包中大于100个IP包的IP地址 </p><p>tcpdump -tnn -c 20000 -i eth0 | awk -F “.” ‘{print $1″.”$2″.”$3″.”$4}’ | sort | uniq -c | sort -nr | awk ‘ $1 &gt; 100 ‘ </p><p>屏蔽IPV6 </p><p>echo “blacklist ipv6″ | sudo tee /etc/modprobe.d/blacklist-ipv6 </p><p>服务 </p><p>添加一个服务 </p><p>sudo update-rc.d 服务名 defaults 99 </p><p>删除一个服务 </p><p>sudo update-rc.d 服务名 remove </p><p>临时重启一个服务 </p><p>/etc/init.d/服务名 restart </p><p>临时关闭一个服务 </p><p>/etc/init.d/服务名 stop </p><p>临时启动一个服务 </p><p>/etc/init.d/服务名 start </p><p>设置 </p><p>配置默认Java使用哪个 </p><p>sudo update-alternatives –config java </p><p>修改用户资料 </p><p>sudo chfn userid </p><p>给apt设置代理 </p><p>export http_proxy=<a href="http://xx.xx.xx.xx:xxx%C2%A0/" target="_blank" rel="noopener">http://xx.xx.xx.xx:xxx </a></p><p>修改系统登录信息 </p><p>sudo vim /etc/motd </p><p>中文 </p><p>转换文件名由GBK为UTF8 </p><p>sudo apt-get install convmv convmv -r -f cp936 -t utf8 –notest –nosmart * </p><p>批量转换src目录下的所有文件内容由GBK到UTF8 </p><p>find src -type d -exec mkdir -p utf8/{} \; find src -type f -exec iconv -f GBK -t UTF-8 {} -o utf8/{} \; mv utf8/* src rm -fr utf8 </p><p>转换文件内容由GBK到UTF8 </p><p>iconv -f gbk -t utf8 $i &gt; newfile </p><p>转换 mp3 标签编码 </p><p>sudo apt-get install python-mutagen find . -iname “*.mp3” -execdir mid3iconv -e GBK {} \; </p><p>控制台下显示中文 </p><p>sudo apt-get install zhcon 使用时，输入zhcon即可 </p><p>文件 </p><p>快速查找某个文件 </p><p>whereis filename </p><p>find 目录 -name 文件名 </p><p>查看文件类型 </p><p>file filename </p><p>显示xxx文件倒数6行的内容 </p><p>tail -n 6 xxx </p><p>让tail不停地读地最新的内容 </p><p>tail -n 10 -f /var/log/apache2/access.log </p><p>查看文件中间的第五行（含）到第10行（含）的内容 </p><p>sed -n ‘5,10p’ /var/log/apache2/access.log </p><p>查找包含xxx字符串的文件 </p><p>grep -l -r xxx . </p><p>全盘搜索文件(桌面可视化) </p><p>gnome-search-tool </p><p>查找关于xxx的命令 </p><p>apropos xxx man -k xxx </p><p>通过ssh传输文件 </p><p>scp -rp /path/filenameusername@remoteIP:/path </p><p>将本地文件拷贝到服务器上 </p><p>scp -rpusername@remoteIP:/path/filename/path </p><p>将远程文件从服务器下载到本地 </p><p>查看某个文件被哪些应用程序读写 </p><p>lsof 文件名 </p><p>把所有文件的后辍由rm改为rmvb </p><p>rename ’s/.rm$/.rmvb/’ * </p><p>把所有文件名中的大写改为小写 </p><p>rename ‘tr/A-Z/a-z/’ * </p><p>删除特殊文件名的文件，如文件名：–help.txt </p><p>rm — –help.txt 或者 rm ./–help.txt </p><p>查看当前目录的子目录 </p><p>ls -d <em>/. 或 echo </em>/. </p><p>将当前目录下最近30天访问过的文件移动到上级back目录 </p><p>find . -type f -atime -30 -exec mv {} ../back \; </p><p>将当前目录下最近2小时到8小时之内的文件显示出来 </p><p>find . -mmin +120 -mmin -480 -exec more {} \; </p><p>删除修改时间在30天之前的所有文件 </p><p>find . -type f -mtime +30 -mtime -3600 -exec rm {} \; </p><p>查找guest用户的以avi或者rm结尾的文件并删除掉 </p><p>find . -name ‘<em>.avi’ -o -name ‘</em>.rm’ -user ‘guest’ -exec rm {} \; </p><p>查找的不以java和xml结尾,并7天没有使用的文件删除掉 </p><p>find . ! -name <em>.java ! -name ‘</em>.xml’ -atime +7 -exec rm {} \; </p><p>统计当前文件个数 </p><p>ls /usr/bin|wc -w </p><p>统计当前目录个数 </p><p>ls -l /usr/bin|grep ^d|wc -l </p><p>显示当前目录下2006-01-01的文件名 </p><p>ls -l |grep 2006-01-01 |awk ‘{print $8}’ </p><p>FTP </p><p>上传下载文件工具-filezilla </p><p>sudo apt-get install filezilla </p><p>filezilla无法列出中文目录？ </p><p>站点-&gt;字符集-&gt;自定义-&gt;输入：GBK </p><p>本地中文界面 </p><p>1）下载filezilla中文包到本地目录，如~/ </p><p>2）#unrar x Filezilla3_zhCN.rar </p><p>3) 如果你没有unrar的话，请先安装rar和unrar </p><p>sudo apt-get install rar unrar </p><p>sudo ln -f /usr/bin/rar /usr/bin/unrar </p><p>4）先备份原来的语言包,再安装；实际就是拷贝一个语言包。 </p><p>sudo cp /usr/share/locale/zh_CN/filezilla.mo /usr/share/locale/zh_CN/filezilla.mo.bak </p><p>sudo cp ~/locale/zh_CN/filezilla.mo /usr/share/locale/zh_CN/filezilla.mo </p><p>5）重启filezilla,即可！ </p><p>解压缩 </p><p>解压缩 xxx.tar.gz </p><p>tar -zxvf xxx.tar.gz </p><p>解压缩 xxx.tar.bz2 </p><p>tar -jxvf xxx.tar.bz2 </p><p>压缩aaa bbb目录为xxx.tar.gz </p><p>tar -zcvf xxx.tar.gz aaa bbb </p><p>压缩aaa bbb目录为xxx.tar.bz2 </p><p>tar -jcvf xxx.tar.bz2 aaa bbb </p><p>解压缩 RAR 文件 </p><p>1) 先安装 </p><p>sudo apt-get install rar unrar </p><p>sudo ln -f /usr/bin/rar /usr/bin/unrar </p><p>2) 解压 </p><p>unrar x aaaa.rar </p><p>Nautilus </p><p>显示隐藏文件 </p><p>Ctrl+h </p><p>显示地址栏 </p><p>Ctrl+l </p><p>特殊 URI 地址 </p><p>computer:/// - 全部挂载的设备和网络 </p><p> network:/// - 浏览可用的网络 </p><p> burn:/// - 一个刻录 CDs/DVDs 的数据虚拟目录 </p><p>smb:/// - 可用的 windows/samba 网络资源 </p><p>x-nautilus-desktop:/// - 桌面项目和图标 </p><p>file:///- 本地文件 </p><p>trash:/// - 本地回收站目录 </p><p>ftp:// - FTP 文件夹<br>ssh:// - SSH 文件夹 </p><p>fonts:/// - 字体文件夹，可将字体文件拖到此处以完成安装<br>themes:/// - 系统主题文件夹 </p><p>查看已安装字体 </p><p>在nautilus的地址栏里输入”fonts:///“，就可以查看本机所有的fonts </p><p>程序 </p><p>详细显示程序的运行信息 </p><p>strace -f -F -o outfile </p><p>日期和时间 </p><p>设置日期 </p><p>date -s mm/dd/yy </p><p>设置时间 </p><p>date -s HH:MM </p><p>将时间写入CMOS </p><p>hwclock –systohc </p><p>读取CMOS时间 </p><p>hwclock –hctosys </p><p>从服务器上同步时间 </p><p>sudo ntpdate time.nist.gov </p><p>sudo ntpdate time.windows.com </p><p>控制台 </p><p>不同控制台间切换 </p><p>Ctrl + ALT + ← Ctrl + ALT + → </p><p>指定控制台切换 </p><p>Ctrl + ALT + Fn(n:1~7) </p><p>控制台下滚屏 </p><p>SHIFT + pageUp/pageDown </p><p>控制台抓图 </p><p>setterm -dump n(n:1~7) </p><p>数据库 </p><p>mysql的数据库存放在地方 </p><p>/var/lib/mysql </p><p>从mysql中导出和导入数据 </p><p>mysqldump 数据库名 &gt; 文件名 #导出数据库 </p><p>mysqladmin create 数据库名 #建立数据库 </p><p>mysql 数据库名 &lt; 文件名 #导入数据库 </p><p>忘了mysql的root口令怎么办 </p><p>sudo /etc/init.d/mysql stop </p><p>sudo mysqld_safe –skip-grant-tables </p><p>sudo mysqladmin -u user password ‘newpassword” </p><p>sudo mysqladmin flush-privileges </p><p>修改mysql的root口令 </p><p>sudo mysqladmin -uroot -p password ‘你的新密码’ </p><p>其它 </p><p>下载网站文档 </p><p>wget -r -p -np -k<a href="http://www.21cn.com%20/" target="_blank" rel="noopener">http://www.21cn.com </a></p><p>· r：在本机建立服务器端目录结构； </p><p>· -p: 下载显示HTML文件的所有图片； </p><p>· -np：只下载目标站点指定目录及其子目录的内容； </p><p>· -k: 转换非相对链接为相对链接。 </p><p>如何删除Totem电影播放机的播放历史记录 </p><p>rm ~/.recently-used </p><p>如何更换gnome程序的快捷键 </p><p>点击菜单，鼠标停留在某条菜单上，键盘输入任意你所需要的键，可以是组合键，会立即生效； 如果要清除该快捷键，请使用backspace </p><p>vim 如何显示彩色字符 </p><p>sudo cp /usr/share/vim/vimcurrent/vimrc_example.vim /usr/share/vim/vimrc </p><p>如何在命令行删除在会话设置的启动程序 </p><p>cd ~/.config/autostart rm 需要删除启动程序 </p><p>如何提高wine的反应速度 </p><p>sudo sed -ie ‘/GBK/,/^}/d’ /usr/share/X11/locale/zh_CN.UTF-8/XLC_LOCALE </p><p>chgrp </p><p>[语法]: chgrp [-R] 文件组 文件… </p><p><a href="改变文件的存取模式，存取模式可表示为数字或符号串，例如：">说明</a>： 文件的GID表示文件的文件组，文件组可用数字表示， 也可用一个有效的组名表示，此命令改变一个文件的GID，可参看chown。 </p><p>-R 递归地改变所有子目录下所有文件的存取模式 </p><p>[例子]:<br>chgrp group file 将文件 file 的文件组改为 group<br>chmod </p><p>[语法]: chmod [-R] 模式 文件… </p><p>或 chmod [ugoa] {+|-|=} [rwxst] 文件… </p><p>chmod nnnn file ， n为0-7的数字，意义如下: </p><p>4000 运行时可改变UID </p><p>2000 运行时可改变GID </p><p>1000 置粘着位 </p><p>0400 文件主可读 </p><p>0200 文件主可写 </p><p>0100 文件主可执行 </p><p>0040 同组用户可读 </p><p>0020 同组用户可写 </p><p>0010 同组用户可执行 </p><p>0004 其他用户可读 </p><p>0002 其他用户可写 </p><p>0001 其他用户可执行 </p><p>nnnn 就是上列数字相加得到的，例如 chmod 0777 file 是指将文件 file 存取权限置为所有用户可读可写可执行。 </p><p>-R 递归地改变所有子目录下所有文件的存取模式 </p><p>u 文件主 </p><p>g 同组用户 </p><p>o 其他用户 </p><p>a 所有用户 </p><ul><li>增加后列权限 </li></ul><ul><li>取消后列权限 </li></ul><p>= 置成后列权限 </p><p>r 可读 </p><p>w 可写 </p><p>x 可执行 </p><p>s 运行时可置UID </p><p>t 运行时可置GID </p><p>[例子]: </p><p>chmod 0666 file1 file2 将文件 file1 及 file2 置为所有用户可读可写 </p><p>chmod u+x file 对文件 file 增加文件主可执行权限 </p><p>chmod o-rwx 对文件file 取消其他用户的所有权限 </p><p>chown </p><p>[语法]: chown [-R] 文件主 文件… </p><p><a href="改变文件的存取模式，存取模式可表示为数字或符号串，例如：">说明</a>: 文件的UID表示文件的文件主，文件主可用数字表示， 也可用一个有效的用户名表示，此命令改变一个文件的UID，仅当此文件的文件主或超级用户可使用。 </p><p>-R 递归地改变所有子目录下所有文件的存取模式 </p><p>[例子]: </p><p>chown mary file 将文件 file 的文件主改为 mary </p><p>chown 150 file 将文件 file 的UID改为150 </p><p>Ubuntu命令行下修改网络配置 </p><p>以eth0为例 </p><p>1. 以DHCP方式配置网卡 </p><p>编辑文件/etc/network/interfaces: </p><p>sudo vi /etc/network/interfaces </p><p>并用下面的行来替换有关eth0的行: </p><p>The primary network interface - use DHCP to find our address </p><p>auto eth0 </p><p>iface eth0 inet dhcp </p><p>用下面的命令使网络设置生效: </p><p>sudo /etc/init.d/networking restart </p><p>当然,也可以在命令行下直接输入下面的命令来获取地址 </p><p>sudo dhclient eth0 </p><p>2. 为网卡配置静态IP地址 </p><p>编辑文件/etc/network/interfaces: </p><p>sudo vi /etc/network/interfaces </p><p>并用下面的行来替换有关eth0的行: </p><p>The primary network interface </p><p>auto eth0 </p><p>iface eth0 inet static </p><p>address 192.168.3.90 </p><p>gateway 192.168.3.1 </p><p>netmask 255.255.255.0 </p><p>network 192.168.3.0 </p><p>broadcast 192.168.3.255 </p><p>将上面的ip地址等信息换成你自己就可以了. </p><p>用下面的命令使网络设置生效: </p><p>sudo /etc/init.d/networking restart </p><p>3. 设定第二个IP地址(虚拟IP地址) </p><p>编辑文件/etc/network/interfaces: </p><p>sudo vi /etc/network/interfaces </p><p>在该文件中添加如下的行: </p><p>auto eth0:1 </p><p>iface eth0:1 inet static </p><p>address 192.168.1.60 </p><p>netmask 255.255.255.0 </p><p>network x.x.x.x </p><p>broadcast x.x.x.x </p><p>gateway x.x.x.x </p><p>根据你的情况填上所有诸如address,netmask,network,broadcast和gateways等信息. </p><p>用下面的命令使网络设置生效: </p><p>sudo /etc/init.d/networking restart </p><p>4. 设置主机名称(hostname) </p><p>使用下面的命令来查看当前主机的主机名称: </p><p>sudo /bin/hostname </p><p>使用下面的命令来设置当前主机的主机名称: </p><p>sudo /bin/hostname newname </p><p>系统启动时,它会从/etc/hostname来读取主机的名称. </p><p>5. 配置DNS </p><p>首先,你可以在/etc/hosts中加入一些主机名称和这些主机名称对应的IP地址,这是简单使用本机的静态查询. </p><p>要访问DNS 服务器来进行查询,需要设置/etc/resolv.conf文件. </p><p>假设DNS服务器的IP地址是192.168.3.2, 那么/etc/resolv.conf文件的内容应为: </p><p>search test.com </p><p>nameserver 192.168.3.2 </p><p>安装AMP服务 </p><p>如果采用Ubuntu Server CD开始安装时，可以选择安装，这系统会自动装上apache2,php5和mysql5。下面主要说明一下如果不是安装的Ubuntu server时的安装方法。 </p><p>用命令在Ubuntu下架设Lamp其实很简单，用一条命令就完成。在终端输入以下命令： </p><p>sudo apt-get install apache2 mysql-server php5 php5-mysql php5-gd phpmyadmin </p><p>装好后，mysql管理员是root，无密码，通过<a href="http://localhost/phpmyadmin" target="_blank" rel="noopener">http://localhost/phpmyadmin</a>就可以访问mysql了 </p><p>修改 MySql 密码 </p><p>终端下输入： </p><p>mysql -u root </p><p>mysql&gt; GRANT ALL PRIVILEGES ON <em>.</em> TO root@localhost IDENTIFIED BY “123456″; </p><p>’123456‘是root的密码，可以自由设置，但最好是设个安全点的。 </p><p>mysql&gt; quit; 退出mysql </p><p>apache2的操作命令 </p><p>启动：#sudo /etc/init.d/apache2 start </p><p>重启：#sudo /etc/init.d/apache2 restart </p><p>关闭：#sudo /etc/init.d/apache2 stop </p><p>apache2的默认主目录：/var/www/ </p><p>Ubuntu 7.10 更换软件源、更新系统 </p><p>网通建议用台湾的源，电信就用cn99 </p><p>在终端输入: #sudo gedit /etc/apt/sources.list </p><p>Ubuntu.cn99.com 更新服务器（江苏省常州市电信，推荐电信用户使用。） </p><p>deb <a href="http://ubuntu.cn99.com/ubuntu/" target="_blank" rel="noopener">http://ubuntu.cn99.com/ubuntu/</a> gutsy main restricted universe multiverse </p><p>deb <a href="http://ubuntu.cn99.com/ubuntu/" target="_blank" rel="noopener">http://ubuntu.cn99.com/ubuntu/</a> gutsy-security main restricted universe multiverse </p><p>deb <a href="http://ubuntu.cn99.com/ubuntu/" target="_blank" rel="noopener">http://ubuntu.cn99.com/ubuntu/</a> gutsy-updates main restricted universe multiverse </p><p>mirror.rootguide.org更新服务器 (上海市 电信): </p><p>deb <a href="http://mirror.rootguide.org/ubuntu/" target="_blank" rel="noopener">http://mirror.rootguide.org/ubuntu/</a> gutsy main restricted universe multiverse </p><p>deb-src <a href="http://mirror.rootguide.org/ubuntu/" target="_blank" rel="noopener">http://mirror.rootguide.org/ubuntu/</a> gutsy main restricted universe multiverse </p><p>deb <a href="http://mirror.rootguide.org/ubuntu/" target="_blank" rel="noopener">http://mirror.rootguide.org/ubuntu/</a> gutsy-updates main restricted universe multiverse </p><p>Mirror.lupaworld.com 更新服务器（浙江省杭州市电信，亚洲地区官方更新服务器） </p><p>deb <a href="http://cn.archive.ubuntu.com/ubuntu" target="_blank" rel="noopener">http://cn.archive.ubuntu.com/ubuntu</a> gutsy main restricted universe multiverse </p><p>deb <a href="http://cn.archive.ubuntu.com/ubuntu" target="_blank" rel="noopener">http://cn.archive.ubuntu.com/ubuntu</a> gutsy-security main restricted universe multiverse </p><p>deb <a href="http://cn.archive.ubuntu.com/ubuntu" target="_blank" rel="noopener">http://cn.archive.ubuntu.com/ubuntu</a> gutsy-updates main restricted universe multiverse </p><p>ubuntu.cnsite.org 更新服务器（福建省福州市 电信） </p><p>deb <a href="http://ubuntu.cnsite.org/ubuntu/" target="_blank" rel="noopener">http://ubuntu.cnsite.org/ubuntu/</a> gutsy main restricted universe multiverse </p><p>deb-src <a href="http://ubuntu.cnsite.org/ubuntu/" target="_blank" rel="noopener">http://ubuntu.cnsite.org/ubuntu/</a> gutsy main restricted universe multiverse </p><p>deb <a href="http://ubuntu.cnsite.org/ubuntu/" target="_blank" rel="noopener">http://ubuntu.cnsite.org/ubuntu/</a> gutsy-updates main restricted universe multiverse </p><p>清华大学 更新服务器（教育网，推荐校园网和网通用户使用） </p><p>deb <a href="http://mirror9.net9.org/ubuntu/" target="_blank" rel="noopener">http://mirror9.net9.org/ubuntu/</a> gutsy main multiverse restricted universe </p><p>deb <a href="http://mirror9.net9.org/ubuntu/" target="_blank" rel="noopener">http://mirror9.net9.org/ubuntu/</a> gutsy-backports main multiverse restricted universe </p><p>deb <a href="http://mirror9.net9.org/ubuntu/" target="_blank" rel="noopener">http://mirror9.net9.org/ubuntu/</a> gutsy-proposed main multiverse restricted universe </p><p>将里面乱七八糟的东西删了，将你复制的源列表粘贴到里面，保存退出。 </p><p>在终端输入 </p><p>sudo apt-get update </p><p>sudu apt-get upgrade </p><p>这样便更新以及升级了系统。 </p><p>桌面汉化： </p><p>System&gt;Language Support&gt;Chinese选项勾打上。 </p><p>安装解码器、flashplayer、java虚拟机、微软字体 </p><p>这是ubuntu推出的一个新软件包，将一次性将上面几个东东自动装好 </p><p>在终端输入 </p><p>sudo apt-get install ubuntu-restricted-extras </p><p>FireFox 中安装 FlashPlayer 插件 </p><p>先下载插件: install_flash_player_9_linux.tar.gz </p><p>tar -zxf install_flash_player_9_linux.tar.gz </p><p>./flashplayer-installer </p><p>回答(y/n/q)? n/q </p><p>sudo cp libflashplayer.so /usr/lib/firefox/plugins </p><p>启动 firefox 即可！ </p><p>安装媒体播放器 </p><p>安装的是mplayer </p><p>终端输入：#sudo apt-get install mplayer mozilla-mplayer totem-xine libxine-extracodecs </p><p>另外需要一个w32codecs文件，是用来支持那些私有媒体格式的解码器，源里已经没有w32codecs了，我们可以从这里下载那个后缀为.deb的安装 </p><p><a href="http://www.debian-multimedia.org/pool/main/w/w32codecs/%C2%A0" target="_blank" rel="noopener">http://www.debian-multimedia.org/pool/main/w/w32codecs/ </a></p><p>mplayer调试(视频、字幕) </p><p>启动mplayer,右键－&gt;Preferences－&gt;Video </p><p>Available drivers选择xv </p><p>然后进入Font标签 Font里选择一个中文字体，Encoding里设置为Simplified Chinese charset (CP936) </p><p>安装下载工具（多线程下载、BT下载、电驴） </p><p>还是终端输入：#sudo apt-get install d4x amule azureus </p><p>即可。 </p><p>或者把 beryl-manager添加到启动项内 </p><p>字体更换 </p><p>我推荐大家使用文泉驿字体，在 </p><p><a href="http://wqy.sourceforge.net%20/" target="_blank" rel="noopener">http://wqy.sourceforge.net </a></p><p>下载deb包安装 </p><p>在“系统“－&gt;”首选项“－&gt;”字体“中调整字体 </p><p>apt下载的deb包清理 </p><p>在使用完apt后，系统下载的deb包会留存在硬盘里，我们可以把它们删除，释放硬盘空间。 </p><p>终端输入：#sudo apt-get clean </p><p>安装rar压缩、解压工具 </p><p>终端输入：#sudo apt-get install rar unrar </p><p>启用root（最高权限）帐户 </p><p>终端输入：#sudo passwd root </p><p>输入你希望的root用户的密码 </p><p>安装QQ </p><p>终端输入：#sudo apt-get install eva </p><p>便可安装eva了，如果你是使用scim(选择中文语言支持的自动安装的就是scim)，为了可以在eva里面输入文字，要在终端输入：sudo apt-get install scim-qtimm </p><p>系统会安装支持QT的scim插件，这样你就可以使用eva聊qq了。 </p><p>显卡驱动安装 </p><p>进入“系统”－&gt;“系统管理”－&gt;“受限驱动管理器” </p><p>找到你的显卡，把那个框点成对号，会提示你安装显卡驱动，然后按照提示一步一步安装完毕，重启即可。 </p><p>beryl的安装 </p><p>你的系统在安装完毕之后就已经有了一个内置的桌面效果软件（能实现简单的桌面特效，包括3D立方体），使用方法是（必须将显卡驱动装好）进入“系统”“首选项”“桌面效果”，点击“启用桌面效果”，如果你需要使用3D立方体桌面，那么选中“立方体上的工作区”即可。 </p><p>如果你对这个简单的桌面特效工具不太满意，想追求更华丽的桌面，那么安装beryl仍然是个很好的选择。如今安装beryl不会像以前一样麻烦了，feisty的源里已经有了beryl的软件包，我们只需要在终端里输入： </p><p>sudo apt-get install beryl-core beryl-plugins beryl-plugins-data emerald beryl-settings beryl-manager beryl beryl-dev emerald-themes </p><p>安装完毕即可了。 </p><p>启动方法：“应用程序”－&gt;”系统工具”－&gt;”Beryl Manager” </p><p>或者直接在终端输入：#beryl-manager </p><p>如何设定/改变/启用 root 使用者的密码? </p><p>sudo passwd root </p><p>为了启用 root 帐号 (也就是 设置一个口令) 使用: </p><p>sudo passwd root </p><p>当你使用完毕后屏蔽 root 帐号 使用: </p><p>sudo passwd -l root </p><p>这个将锁住 root 帐号. </p><p>如何在终端机模式下切换到 root 身份? </p><p>sudo -s -H </p><p>Password: &lt;在这注明您的密码&gt; </p><p>安装VNC server </p><p>第一步, 获取安装文件 </p><p>sudo apt-get install vnc4server </p><p>第二步, 修改VNC Password, 6-8位 </p><p>vncpasswd </p><p>Password: <strong>**</strong> </p><p>Verify:<strong>*</strong> </p><p>第三步, 修改配置 </p><p>系统-&gt;首选项-&gt;远程桌面 </p><p>选择-&gt;请求用户输入此密码-&gt;输入至少6位密码 </p><p>第四步, 启动VNC server </p><p>vncserver </p><p>第五步，通过客户端连接 </p><p>vncviewer 192.168.0.1 </p><p>安装MS字体 </p><p>sudo apt-get install msttcorefonts </p><p>vim配置 </p><p>1) 首先安装 vim 完整版本 </p><p>sudo apt-get install vim-full </p><p>2) vim中文在线帮助 </p><p>a. 先下载文档 vimcdoc-1.5.0.tar.gz </p><p>b. 解压, 执行./vimcdoc.sh, vi里面, 执行:help, 就都是中文的了. </p><p>3) 启用本地配置 VIM version 7.1 (说明文档) </p><p>cp etc/vim/vimrc ~/.vimrc </p><p>vim ~/.vimrc </p><p>“”””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””” </p><p>“ 一般设定 </p><p>“”””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””” </p><p>“ 设定默认解码 </p><p>set fenc=utf-8 </p><p>set fencs=utf-8,usc-bom,euc-jp,gb18030,gbk,gb2312,cp936 </p><p>“ 不要使用vi的键盘模式，而是vim自己的 </p><p>set nocompatible </p><p>“ history文件中需要记录的行数 </p><p>set history=100 </p><p>“ 在处理未保存或只读文件的时候，弹出确认 </p><p>set confirm </p><p>“ 与windows共享剪贴板 </p><p>set clipboard+=unnamed </p><p>“ 侦测文件类型 </p><p>filetype on </p><p>“ 载入文件类型插件 </p><p>filetype plugin on </p><p>“ 为特定文件类型载入相关缩进文件 </p><p>filetype indent on </p><p>“ 保存全局变量 </p><p>set viminfo+=! </p><p>“ 带有如下符号的单词不要被换行分割 </p><p>set iskeyword+=_,$,@,%,#,- </p><p>“ 语法高亮 </p><p>syntax on </p><p>“ 高亮字符，让其不受100列限制 </p><p>:highlight OverLength ctermbg=red ctermfg=white guibg=red guifg=white </p><p>:match OverLength ‘\%101v.*’ </p><p>“ 状态行颜色 </p><p>highlight StatusLine guifg=SlateBlue guibg=Yellow </p><p>highlight StatusLineNC guifg=Gray guibg=White </p><p>“”””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””” </p><p>“ 文件设置 </p><p>“”””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””” </p><p>“ 不要备份文件（根据自己需要取舍） </p><p>set nobackup </p><p>“ 不要生成swap文件，当buffer被丢弃的时候隐藏它 </p><p>setlocal noswapfile </p><p>set bufhidden=hide </p><p>“ 字符间插入的像素行数目 </p><p>set linespace=0 </p><p>“ 增强模式中的命令行自动完成操作 </p><p>set wildmenu </p><p>“ 在状态行上显示光标所在位置的行号和列号 </p><p>set ruler </p><p>set rulerformat=%20(%2*%&lt;%f%=\ %m%r\ %3l\ %c\ %p%%%) </p><p>“ 命令行（在状态行下）的高度，默认为1，这里是2 </p><p>set cmdheight=2 </p><p>“ 使回格键（backspace）正常处理indent, eol, start等 </p><p>set backspace=2 </p><p>“ 允许backspace和光标键跨越行边界 </p><p>set whichwrap+=&lt;,&gt;,h,l </p><p>“ 可以在buffer的任何地方使用鼠标（类似office中在工作区双击鼠标定位） </p><p>set mouse=a </p><p>set selection=exclusive </p><p>set selectmode=mouse,key </p><p>“ 启动的时候不显示那个援助索马里儿童的提示 </p><p>set shortmess=atI </p><p>“ 通过使用: commands命令，告诉我们文件的哪一行被改变过 </p><p>set report=0 </p><p>“ 不让vim发出讨厌的滴滴声 </p><p>set noerrorbells </p><p>“ 在被分割的窗口间显示空白，便于阅读 </p><p>set fillchars=vert:\ ,stl:\ ,stlnc:\ </p><p>“”””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””” </p><p>“ 搜索和匹配 </p><p>“”””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””” </p><p>“ 高亮显示匹配的括号 </p><p>set showmatch </p><p>“ 匹配括号高亮的时间（单位是十分之一秒） </p><p>set matchtime=5 </p><p>“ 在搜索的时候忽略大小写 </p><p>set ignorecase </p><p>“ 不要高亮被搜索的句子（phrases） </p><p>set nohlsearch </p><p>“ 在搜索时，输入的词句的逐字符高亮（类似firefox的搜索） </p><p>set incsearch </p><p>“ 输入:set list命令是应该显示些啥？ </p><p>set listchars=tab:|\ ,trail:.,extends:&gt;,precedes:&lt;,eol:$ </p><p>“ 光标移动到buffer的顶部和底部时保持3行距离 </p><p>set scrolloff=3 </p><p>“ 不要闪烁 </p><p>set novisualbell </p><p>“ 我的状态行显示的内容（包括文件类型和解码） </p><p>set statusline=%F%m%r%h%w\ [FORMAT=%{&amp;ff}]\ [TYPE=%Y]\ [POS=%l,%v][%p%%]\ %{strftime(\”%d/%m/%y\ -\ %H:%M\”)} </p><p>“ 总是显示状态行 </p><p>set laststatus=2 </p><p>“”””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””” </p><p>“ 文本格式和排版 </p><p>“”””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””” </p><p>“ 自动格式化 </p><p>set formatoptions=tcrqn </p><p>“ 继承前一行的缩进方式，特别适用于多行注释 </p><p>set autoindent </p><p>“ 为C程序提供自动缩进 </p><p>set smartindent </p><p>“ 使用C样式的缩进 </p><p>set cindent </p><p>“ 制表符为4 </p><p>set tabstop=4 </p><p>“ 统一缩进为4 </p><p>set softtabstop=4 </p><p>set shiftwidth=4 </p><p>“ 不要用空格代替制表符 </p><p>set noexpandtab </p><p>“ 不要换行 </p><p>set nowrap </p><p>“ 在行和段开始处使用制表符 </p><p>set smarttab </p><p>“”””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””” </p><p>“ CTags的设定 </p><p>“”””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””” </p><p>“ 按照名称排序 </p><p>let Tlist_Sort_Type = “name” </p><p>“ 在右侧显示窗口 </p><p>let Tlist_Use_Right_Window = 1 </p><p>“ 压缩方式 </p><p>let Tlist_Compart_Format = 1 </p><p>“ 如果只有一个buffer，kill窗口也kill掉buffer </p><p>let Tlist_Exist_OnlyWindow = 1 </p><p>“ 不要关闭其他文件的tags </p><p>let Tlist_File_Fold_Auto_Close = 0 </p><p>“ 不要显示折叠树 </p><p>let Tlist_Enable_Fold_Column = 0 </p><p>“”””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””” </p><p>“ Autocommands </p><p>“”””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””” </p><p>“ 只在下列文件类型被侦测到的时候显示行号，普通文本文件不显示 </p><p>if has(“autocmd”) </p><p>autocmd FileType xml,html,c,cs,java,perl,shell,bash,cpp,python,vim,php,ruby set number </p><p>autocmd FileType xml,html vmap</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;一、文件/文件夹管理&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;ls 列出当前目录文件（不包括隐含文件） &lt;/p&gt;
&lt;p&gt;ls -a 列出当前目录文件（包括隐含文件） &lt;/p&gt;
&lt;p&gt;ls -l 列出当前目录下文件的详细信息 &lt;/p&gt;
&lt;p&gt;cd .. 回当前目录的
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MySQL数据库面试小结</title>
    <link href="https://dannieldylan.github.io/danniel/2018/04/14/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E9%9D%A2%E8%AF%95%E5%B0%8F%E7%BB%93/"/>
    <id>https://dannieldylan.github.io/danniel/2018/04/14/MySQL数据库面试小结/</id>
    <published>2018-04-14T13:37:47.000Z</published>
    <updated>2018-10-10T13:39:59.873Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数据库面试"><a href="#数据库面试" class="headerlink" title="数据库面试"></a><center>数据库面试</center></h3><h5 id="三范式是什么？"><a href="#三范式是什么？" class="headerlink" title="三范式是什么？"></a>三范式是什么？</h5><ul><li>第一范式（1NF）：数据库表中的字段都是单一属性的，不可再分。这个单一属性由基本类型构成，包括整型、实数、字符型、逻辑型、日期型等。<a id="more"></a></li><li>第二范式（2NF）：数据库表中不存在非关键字段对任一候选关键字段的部分函数依赖（部分函数依赖指的是存在组合关键字中的某些字段决定非关键字段的情况），也即所有非关键字段都完全依赖于任意一组候选关键字。</li><li>第三范式（3NF）：在第二范式的基础上，数据表中如果不存在非关键字段对任一候选关键字段的传递函数依赖则符合第三范式。所谓传递函数依赖，指的是如果存在”A → B → C”的决定关系，则C传递函数依赖于A。因此，满足第三范式的数据库表应该不存在如下依赖关系： 关键字段 → 非关键字段x → 非关键字段y</li><li>小结：<pre><code>- 第一范式：字段是最小的单元不可再分- 第二范式：在满足第一范式的基础上，表中的字段必须完全依赖于全部主动而非部分主键。&gt;其他字段组成的这行记录和主键表示的是同一个东西，而主键是唯一的- 第三范式：满足第二范式，非主键外的所有字段必须互不依赖    &gt;只在一个地方存储，不重复出现在多张表中，可以认为是消除传递依赖</code></pre></li></ul><h5 id="drop、delete与truncate分别在什么场景之下使用？"><a href="#drop、delete与truncate分别在什么场景之下使用？" class="headerlink" title="drop、delete与truncate分别在什么场景之下使用？"></a>drop、delete与truncate分别在什么场景之下使用？</h5><ul><li>drop table<ul><li>属于DDL,不可回滚，不可带where，表内容和结构删除，删除速度快</li></ul></li><li>truncate table<ul><li>属于DDL，不可回滚，不可带where，表内容删除，删除速度快。</li></ul></li><li>delete from<ul><li>属于DML，可回滚，可带where，表结构在，表内容要看where执行的情况，删除速度慢，需要逐行删除</li><li>注意：不再需要一张表的时候，用drop，想删除部分数据行时候，并且带上了where字句，保留表而删除所有数据的时候用truncate</li></ul></li></ul><h5 id="索引是什么？有什么作用以及优缺点"><a href="#索引是什么？有什么作用以及优缺点" class="headerlink" title="索引是什么？有什么作用以及优缺点"></a>索引是什么？有什么作用以及优缺点</h5>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;数据库面试&quot;&gt;&lt;a href=&quot;#数据库面试&quot; class=&quot;headerlink&quot; title=&quot;数据库面试&quot;&gt;&lt;/a&gt;&lt;center&gt;数据库面试&lt;/center&gt;&lt;/h3&gt;&lt;h5 id=&quot;三范式是什么？&quot;&gt;&lt;a href=&quot;#三范式是什么？&quot; class=&quot;headerlink&quot; title=&quot;三范式是什么？&quot;&gt;&lt;/a&gt;三范式是什么？&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;第一范式（1NF）：数据库表中的字段都是单一属性的，不可再分。这个单一属性由基本类型构成，包括整型、实数、字符型、逻辑型、日期型等。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MongoDB数据库</title>
    <link href="https://dannieldylan.github.io/danniel/2018/04/13/MongoDB%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>https://dannieldylan.github.io/danniel/2018/04/13/MongoDB数据库/</id>
    <published>2018-04-13T13:44:50.000Z</published>
    <updated>2018-10-10T13:45:43.720Z</updated>
    
    <content type="html"><![CDATA[<p><center>python数据库操作MySQL-MongoDB-Redis之二     MongoDB</center></p><p>####一  MongoDB 在win10下的安装<br><a href="https://www.mongodb.com/download-center?jmp=nav#community" target="_blank" rel="noopener">MongoDB官网</a></p><ol><li>从官网下载完安装包后，开始安装：（我这以最新的mongodb-win32-x86_64-2008plus-ssl-3.6.3-signed.msi版本举例）<br>安装过程：  custom是自定义安装选项，建议安装在非系统盘（C盘）上<br><img src="https://upload-images.jianshu.io/upload_images/11372882-37c1ab40fb4b2681.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1.png"></li></ol><p>关键点来了，就在下一步操作：<br><img src="https://upload-images.jianshu.io/upload_images/11372882-246f50290beb4198.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="2.png"></p><p>如果这不取消安装，会发现有的电脑死活安装不上，原因就在这compas问题上</p><ol start="2"><li>再安装可视化界面（compass）（<a href="https://www.mongodb.com/download-center?jmp=docs&amp;_ga=2.208589714.169613539.1518053388-361642939.1518053388#compass）" target="_blank" rel="noopener">https://www.mongodb.com/download-center?jmp=docs&amp;_ga=2.208589714.169613539.1518053388-361642939.1518053388#compass）</a><br>这样可以防止出现MongoDB安装不成功</li><li><p>现在配置启动MongoDB的服务以及将它设置为windows服务   </p><ul><li><p>使用快捷键快速呼出本地服务项： win+R 弹出运行框<img src="https://upload-images.jianshu.io/upload_images/11372882-c755860031e679e3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="3.png"></p></li><li><p>在出现的运行窗口中输入services.msc 然后按确定按钮，或者直接回城即可调出本地服务项<img src="https://upload-images.jianshu.io/upload_images/11372882-65b7a6e7fbddae7a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="5.png"><br><img src="https://upload-images.jianshu.io/upload_images/11372882-c168138e1b36d39d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="6.png"></p></li><li><p>找到mongodb服务，嘿嘿这提前说了，这就是我们下一步需要配置的mongodb服务<img src="https://upload-images.jianshu.io/upload_images/11372882-a21daf7757195e7a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="7.png"></p></li><li><p>现在开始配置MongoDB服务：在cmd命令下跳转到D:\MongoDB\Server\3.6\bin目录下</p><ul><li>先创建MongoDB的config配置文件 用记事本打开，输入以下内容</li><li>datapath=D:\MongoDB\data</li><li><p>logpath=D:\MongoDB\log<img src="https://upload-images.jianshu.io/upload_images/11372882-8dc8402ecbeed7df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="11.png"></p></li><li><p>可设置开机自启动，或者手动启动关闭，</p></li></ul></li><li>开启MongoDB服务，以管理员身份启动cmd命令窗口。切换到MongoDB下的bin目录下输入net start MongoDB  提示xxx服务正在启动 xxx服务已经启动成功，就可以输入mongo.exe运行客户端了。</li><li>这里有个小点：想要直接输入mongo.exe就能运行MongoDB，前提要将它添加到系统的环境变量里面去，详见以下步骤</li><li><p>找到此电脑标识<img src="https://upload-images.jianshu.io/upload_images/11372882-b71da4a3bbcd6a89.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="22.png"></p></li><li><p>右键选择属性<img src="https://upload-images.jianshu.io/upload_images/11372882-be2a1bd202ddc1a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="33.png"></p></li><li><p>选择高级系统设置<img src="https://upload-images.jianshu.io/upload_images/11372882-21bd370c969fbd19.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="44.png"></p></li><li><p>详细步骤按序号进行（这种操作，使用任何软件都是异曲同工的事）<img src="https://upload-images.jianshu.io/upload_images/11372882-3347295567191c47.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="hah.png"></p></li></ul></li></ol><h4 id="二-MongoDB在ubuntu-1604下的安装"><a href="#二-MongoDB在ubuntu-1604下的安装" class="headerlink" title="二 MongoDB在ubuntu:1604下的安装"></a>二 MongoDB在ubuntu:1604下的安装</h4><ol><li><strong>安装方式一</strong></li></ol><ul><li>从官网下载linux/mongodb-linux-x86_64-ubuntu1604-3.6.3.tgz</li><li>解压 tar -zxvf mongodb-linux-x86_64-ubuntu1604-3.6.3.tgz</li><li>移动到/usr/local目录下<br>sudo mv mongodb-linux-x86_64-ubuntu1604-3.6.3 /usr/local/mongodb</li><li>将可执行文件添加到PATH路径中<br>export PATH=/usr/local/mongodb/bin:$PATH</li></ul><ol start="2"><li><strong>安装方式二</strong></li></ol><ul><li>直接简单粗暴,不需要下载源文件,可以直接用apt-get命令进行安装.打开终端,输入以下命令:  sudo apt-get install mongodb</li><li>安装完成后,在终端输入以下命令查看MongoDB版本:<br>mongo -version</li><li>启动与关闭mongodb命令如下:<br>service mongodb start   #启动mongodb服务<br>service mongodb stop   #终止mongodb服务</li><li>默认设置MongoDB是随ubuntu系统启动自启动的,输入命令查看是否启动成功      pgrep mongo - I</li><li>卸载mongodb<br>sudo apt-get –purge remove mongodb mongodb-clients mongodb-server</li></ul><h4 id="Mac端下载与安装-与linux大致相同就不再多写"><a href="#Mac端下载与安装-与linux大致相同就不再多写" class="headerlink" title="Mac端下载与安装 与linux大致相同就不再多写"></a>Mac端下载与安装 与linux大致相同就不再多写</h4><h4 id="MongoDB数据库的常用操作命令"><a href="#MongoDB数据库的常用操作命令" class="headerlink" title="MongoDB数据库的常用操作命令"></a>MongoDB数据库的常用操作命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">show dbs:显示数据库列表</span><br><span class="line">show collections：显示当前数据库中的集合（类似关系数据库中的表table）</span><br><span class="line">show users：显示所有用户</span><br><span class="line">use yourDB：切换当前数据库至yourDB</span><br><span class="line">db.help() ：显示数据库操作命令</span><br><span class="line">db.yourCollection.help() ：显示集合操作命令，yourCollection是集合名</span><br></pre></td></tr></table></figure><h4 id="数据库的CRUD操作"><a href="#数据库的CRUD操作" class="headerlink" title="数据库的CRUD操作"></a>数据库的CRUD操作</h4><ol><li>将单个文档或多个文档插入并保存文档<br>db.collection_name.insert({‘bar’:’baz’})    #这一操作会给文档增加一个”_id”键(原来没有的话),然后保存到MongoDB中</li></ol><ul><li>单个插入<br>db.collection_name.insertone({‘bar’:’baz’}) </li><li>批量插入<br>db.collection_name.insermany()  #可以将多个文档插入到一个集合中<br>-</li></ul><ul><li><a href="https://docs.mongodb.com/manual/reference/method/db.collection.update/#db.collection.update" title="db.collection.update（）" target="_blank" rel="noopener"><code>db.collection.update()</code></a>当与 选项一起使用时。<code>upsert: true</code></li><li><a href="https://docs.mongodb.com/manual/reference/method/db.collection.updateOne/#db.collection.updateOne" title="db.collection.updateOne（）" target="_blank" rel="noopener"><code>db.collection.updateOne()</code></a>当与选项一起使用时。<code>upsert: true</code></li><li><a href="https://docs.mongodb.com/manual/reference/method/db.collection.updateMany/#db.collection.updateMany" title="db.collection.updateMany（）" target="_blank" rel="noopener"><code>db.collection.updateMany()</code></a>当与选项一起使用时。<code>upsert: true</code></li><li><a href="https://docs.mongodb.com/manual/reference/method/db.collection.findAndModify/#db.collection.findAndModify" title="db.collection.findAndModify（）" target="_blank" rel="noopener"><code>db.collection.findAndModify()</code></a>当与选项一起使用时。<code>upsert: true</code></li><li><a href="https://docs.mongodb.com/manual/reference/method/db.collection.findOneAndUpdate/#db.collection.findOneAndUpdate" title="db.collection.findOneAndUpdate（）" target="_blank" rel="noopener"><code>db.collection.findOneAndUpdate()</code></a>当与选项一起使用时 。<code>upsert: true</code></li><li><a href="https://docs.mongodb.com/manual/reference/method/db.collection.findOneAndReplace/#db.collection.findOneAndReplace" title="db.collection.findOneAndReplace（）" target="_blank" rel="noopener"><code>db.collection.findOneAndReplace()</code></a>当与选项一起使用时 。<code>upsert: true</code></li><li><a href="https://docs.mongodb.com/manual/reference/method/db.collection.save/#db.collection.save" title="db.collection.save（）" target="_blank" rel="noopener"><code>db.collection.save()</code></a>。</li><li><a href="https://docs.mongodb.com/manual/reference/method/db.collection.bulkWrite/#db.collection.bulkWrite" title="db.collection.bulkWrite（）" target="_blank" rel="noopener"><code>db.collection.bulkWrite()</code></a>。</li></ul><ol start="3"><li>查询文件<br>db.collection_name.find(query, projection)<br>query ：可选，使用查询操作符指定查询条件<br>projection ：可选，使用投影操作符指定返回的键。查询时返回文档中所有键值， 只需省略该参数即可（默认省略）。<br>若不指定 projection，则默认返回所有键，指定 projection 格式如下，有两种模式<br>db.collection.find(query, {title: 1, by: 1}) // inclusion模式 指定返回的键，不返回其他键<br>db.collection.find(query, {title: 0, by: 0}) // exclusion模式 指定不返回的键,返回其他键</li></ol><p>想要较可读性推荐使用pretty()方法<br>db.collection.find().pretty()<br>4.更新数据<br>db.collection_name.update(criteria,objNew,upset,multi)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">query : update的查询条件，类似sql update查询内where后面的。</span><br><span class="line">update : update的对象和一些更新的操作符（如$,$inc...）等，也可以理解为sql update查询内set后面的</span><br><span class="line">upsert : 可选，这个参数的意思是，如果不存在update的记录，是否插入objNew,true为插入，默认是false，不插入。</span><br><span class="line">multi : 可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。</span><br><span class="line">writeConcern :可选，抛出异常的级别。</span><br></pre></td></tr></table></figure></p><ol start="5"><li>删除数据<br>db.collection_name.remove()   现在官方更推荐使用delete() 和detelemany()方法<br>删除集合下全部文档<br>db.inventory.deleteMany({})                           #推荐使用<br>删除status等于A的全部文档<br>db.inventory.deleteMany({ status : “A” })                    #推荐使用<br>删除status等于D的一个文档<br>db.inventory.deleteOne( { status: “D” } )                         #推荐使用<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4></li></ol><ul><li>删除数据库的时候,切记要先切换到该数据库才能删除<br>use db_name<br>db.dropDatabase()</li><li>MongoDB偏向于易用性,默认是没有开启用户权限的.</li><li>每次执行完程序,都可以返回shell模式查看结果<br>输入 db.student.find()</li><li>3.4版新增功能<br>下面的命令插入<code>123.40</code>作为 <code>NumberDecimal</code>具有和不具有周围的值引号：<br>db.json.insert({ decimalQuoted : NumberDecimal(“123.40”) })</li></ul><h4 id="python与MongoDB的交互"><a href="#python与MongoDB的交互" class="headerlink" title="python与MongoDB的交互"></a>python与MongoDB的交互</h4><ol><li>创建数据库<br>import pymongo<br>client = pymongo.MongoClient(‘localhost’, 27017)     或<br>client = MongoClient(‘mongodb://localhost:27017/‘)  </li><li>连接数据库<br>db = client.db_name      或    db = client”db_name”‘]</li><li>连接集合<br>collection = db.collection_name     或     collection = db[‘collection_name’]  </li><li>查看数据看下所有集合名称<br>db.collection_names()  </li><li>插入数据<br>collection.insert()</li><li>查看集合数据的总数<br>collection.find().count()  </li><li>查询结果排序<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">collection.find().sort(&quot;key1&quot;) # 默认为升序  </span><br><span class="line">collection.find().sort(&quot;key1&quot;, pymongo.ASCENDING) # 升序  </span><br><span class="line">collection.find().sort(&quot;key1&quot;, pymongo.DESCENDING) # 降序  </span><br><span class="line">collection.find().sort([(&quot;key1&quot;, pymongo.ASCENDING), (&quot;key2&quot;, pymongo.DESCENDING)])   #多列排序</span><br></pre></td></tr></table></figure></li></ol><p><strong>感谢您的阅读,以上是本人遇到过或学习过程记录的笔记,水平有限,仅供参考,如果发现错误请及时联系作者,谢谢!</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;center&gt;python数据库操作MySQL-MongoDB-Redis之二     MongoDB&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;####一  MongoDB 在win10下的安装&lt;br&gt;&lt;a href=&quot;https://www.mongodb.com/downlo
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>python Scrapy爬取小猪短租</title>
    <link href="https://dannieldylan.github.io/danniel/2018/04/07/Python%E4%BD%BF%E7%94%A8scrapy%E6%A1%86%E6%9E%B6%E7%88%AC%E5%8F%96%E5%B0%8F%E7%8C%AA%E7%9F%AD%E7%A7%9F/"/>
    <id>https://dannieldylan.github.io/danniel/2018/04/07/Python使用scrapy框架爬取小猪短租/</id>
    <published>2018-04-07T09:58:48.000Z</published>
    <updated>2018-10-10T13:49:33.472Z</updated>
    
    <content type="html"><![CDATA[<p>个人博客<a href="https://dannieldylan.github.io/danniel/">Danniel’s Blog</a>,不定时更新,欢迎指正!</p><p><strong>找工作之余,要考虑租房问题,天天刷房源,所有才有了这个想法爬几个租房的网站吧。<br><a id="more"></a><br>先来写个小猪短租的吧,废话不多说直接撸代码。</strong></p><h3 id="一-创建项目-tenement"><a href="#一-创建项目-tenement" class="headerlink" title="一 创建项目 tenement"></a>一 创建项目 tenement</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject tenement</span><br><span class="line">New Scrapy project &apos;tenement&apos;, using template directory &apos;d:\\anaconda3\\lib\\site-packages\\scrapy\\templates\\project&apos;, created in:</span><br><span class="line">    C:\Users\Dylan\Desktop\tenement</span><br><span class="line"></span><br><span class="line">You can start your first spider with:</span><br><span class="line">    cd tenement</span><br><span class="line">    scrapy genspider example example.com</span><br></pre></td></tr></table></figure><p><strong>在scrapy框架中,如果想多个批量运行爬虫文件,常见有两种方法:</strong></p><ol><li>使用CrawProcess实现</li><li>使用修改craw源码+自定义命令的方式实现</li></ol><p>(*￣︶￣)在这里我们就使用常用的方法:<br>进入该爬虫项目所在目录,并且在该项目中实时创建爬虫文件(目的为了创建多个爬虫文件,以供待运行),下面继续码字吧</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Dylan\Desktop&gt;cd tenement</span><br><span class="line">C:\Users\Dylan\Desktop\tenement&gt;scrapy genspider -t basic Short_rent_for_piglets xiaozhu.com</span><br><span class="line">Created spider &apos;Short_rent_for_piglets&apos; using template &apos;basic&apos; in module:</span><br><span class="line">  tenement.spiders.Short_rent_for_piglets</span><br></pre></td></tr></table></figure><h3 id="二-找出想要的url-发送请求-获取响应"><a href="#二-找出想要的url-发送请求-获取响应" class="headerlink" title="二 找出想要的url(发送请求,获取响应)"></a>二 找出想要的url(发送请求,获取响应)</h3><p>上个<a href="http:hz.xiaozhu.com/" target="_blank" rel="noopener">小猪短租</a>网址吧,快速浏览第1页,第2页,第3页….通过chrome开发者工具按下ctrl+shift+I和F5(或F12+F5) 很快就找到了network(网络)里的headers(消息头),看到Request URL:(<a href="http://sh.xiaozhu.com/search-duanzufang-p{}-0/" target="_blank" rel="noopener">http://sh.xiaozhu.com/search-duanzufang-p{}-0/</a> {})内就是数字所对应的页码数,仔细看了下网页版的好像就13页左右,没有APP的多,今天我就先写个网页版的吧.<br>在这里记录下下次有机会去爬app看看,能加载多少房源。  </p><h5 id="TODO-记得爬小猪短租APP"><a href="#TODO-记得爬小猪短租APP" class="headerlink" title="TODO  记得爬小猪短租APP"></a>TODO  记得爬小猪短租APP</h5><h3 id="写parse函数-利用Xpath或者Selector提取对应的数据"><a href="#写parse函数-利用Xpath或者Selector提取对应的数据" class="headerlink" title="写parse函数  利用Xpath或者Selector提取对应的数据"></a>写parse函数  利用Xpath或者Selector提取对应的数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">先找到所有信息</span><br><span class="line">infos=response.xpath(&apos;//div[@id=&quot;page_list&quot;]/ul/li&apos;)</span><br><span class="line">标题 title =li.xpath(&apos;./div[2]/div/a/span/text()&apos;).extract_first()</span><br><span class="line">价格 price =li.xpath(&apos;./div[2]/span[1]/i/text()&apos;).extract_first()</span><br><span class="line">描述 desc =li.xpath(&apos;./div[2]/div/em/text()&apos;).extract_first().strip()</span><br><span class="line">详情页comment_url=li.xpath(&apos;./a/@href&apos;).extract_first()</span><br><span class="line">图片 images=li.xpath(&apos;./a/img/@lazy_src&apos;).extract_first()</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/11372882-1c7d6e0540955283.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>提取上面的对应的ico的title是不是很简单?直接能用xpath取出来,哈哈,结果跑起程序后肯定一脸懵,为啥我取出来的数据类似下面举例的这B玩意?<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shipai&apos;: &lt;Selector xpath=&apos;./div[2]/div/p/span/@title&apos; data=&apos;商旅认证：随时入住、交通便利、适合办公&apos;&gt;</span><br></pre></td></tr></table></figure></p><p><img src="http://upload-images.jianshu.io/upload_images/11372882-ed7856d0063da017.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"><br>其实是忘记写了xpath().extract(),BLABLA一大堆,感觉今天咋这么多”特效”,废话不多说直接上代码<br><img src="https://upload-images.jianshu.io/upload_images/11372882-946d3608ee40ec3d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="xpath使用"></p><p><strong>在这顺便说下extract()与extract_first()的区别</strong><br><strong>在scrapy.Selector选择器中提取字符串:</strong></p><ol><li><strong>extract()返回一个包含有字符串数据的列表</strong></li><li><strong>extract_first()返回列表中的第一个字符串</strong><h5 id="DEBUG调试"><a href="#DEBUG调试" class="headerlink" title="DEBUG调试"></a>DEBUG调试</h5><strong>出现Filtered offsite request to </strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">官方对这个的解释，是你要request的地址和allow_domain里面的冲突，从而被过滤掉。可以停用过滤功能。</span><br><span class="line">yield Request(url, callback=self.parse_item, dont_filter=True)</span><br></pre></td></tr></table></figure></li></ol><p><strong>如果出现Unhandled error in Deferred:</strong><br>请检验python是否没装pywin32模块或者pywin32的64位模块(<a href="https://pypi.python.org/pypi/pywin32" target="_blank" rel="noopener">https://pypi.python.org/pypi/pywin32</a>)<br>或:<br>作为程序运行错误时,提示作用<br>因为我在程序中设定了自定义配置,故会在log日志里存储对应时间内的异常错误代码提示</p><h3 id="爬取数据过程中要与反爬技术常打交道-该程序只用了常规的IP代理-UA随机请求头两中间件。"><a href="#爬取数据过程中要与反爬技术常打交道-该程序只用了常规的IP代理-UA随机请求头两中间件。" class="headerlink" title="爬取数据过程中要与反爬技术常打交道,该程序只用了常规的IP代理,UA随机请求头两中间件。"></a>爬取数据过程中要与反爬技术常打交道,该程序只用了常规的IP代理,UA随机请求头两中间件。</h3><p>先从编写代理中间件开始吧<br><img src="https://upload-images.jianshu.io/upload_images/11372882-1681e485ff8e8a1a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="编写中间件"></p><p>顺便说下免费代理与付费代理的使用:</p><ol><li>手动更新ip pool,如上图所示从免费代理网站爬取的ip写入proxies的列表内,通过random模块的方法随机一个IP作为代理</li><li>自动更新ip pool,  顾名思义就是将爬取到的代理通过创建IP pool池,使用Flask+Redis维护动态代理池,定时CRUD,获取最新、有效的IP地址,用于IP代理.  参考项目:<br><a href="https://github.com/jhao104/proxy_pool" target="_blank" rel="noopener">大神</a>         ps:惭愧啊! 自学的时候常用它,竟还不知道尊姓大名,对不住!<br><a href="https://github.com/qiyeboy/IPProxyPool" target="_blank" rel="noopener">七夜大神开源项目</a><br><a href="https://github.com/awolfly9/IPProxyTool" target="_blank" rel="noopener">大神</a></li><li><p>那就是付费代理啦<br>这里整个阿布云代理的代码,作为示范:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">proxyServer = &quot;http://http-dyn.abuyun.com:9020&quot;  #阿布云服务</span><br><span class="line">proxyUser = &quot;.............&quot;</span><br><span class="line">proxyPass = &quot;.................&quot;</span><br><span class="line">proxyAuth = &quot;Basic &quot; + str(base64.b64encode((proxyUser + &quot;:&quot; + proxyPass).encode(&apos;utf-8&apos;)), &apos;utf-8&apos;)</span><br><span class="line">def process_request(self, request, spider):</span><br><span class="line">        request.meta[&quot;proxy&quot;] = proxyServer</span><br><span class="line">        request.headers[&quot;Proxy-Authorization&quot;] = proxyAuth</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">   如果有用户名和密码建议使用base64编码一下</span><br><span class="line">   proxy_user_pass=&quot;USERNAME:PASSWORD&quot; encode_user_pass=base64.encodestring(proxy_user_pass)</span><br><span class="line"> request.headers[&apos;Proxy-Authorization&apos;]=&apos;Basic&apos;+encode_user_pass</span><br><span class="line">&apos;&apos;&apos;</span><br></pre></td></tr></table></figure></li><li><p>Python爬虫还在找代理你就OUT了!<em>Crawlera</em>神器还需要找代理IP?<br>scrapy_crawlera(<a href="https://scrapinghub.com/crawlera" target="_blank" rel="noopener">https://scrapinghub.com/crawlera</a>)    免费兼收费,由于免费代理十混九瞎折腾老半天没出几个好用的,这种代理来的不太算容易吧!还要有验证的麻烦事。那我们可以利用Crawlera轻松解决,岂不快哉? 是不是感觉比以往的那种寻找出的代理池棒多了?<br>安装 方法  pip install crawlera </p></li></ol><p><a href="https://doc.scrapinghub.com/crawlera.html" target="_blank" rel="noopener">官方文档</a><br>我也还在学习中,就小举下使用方法吧<br><figure class="highlight plain"><figcaption><span>&#123;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">            &apos;tenement.middlewares.TenementSpiderMiddleware&apos;: 543,</span><br><span class="line">           # &apos;tenement.middlewares.IPProxiesMiddleware&apos;: 300,</span><br><span class="line">            &apos;tenement.middlewares.RandomUserAgent&apos;: 400,</span><br><span class="line">            # 使用scrapy_crawlera 就可以将之前设置过的代理ip中间件注释掉了,加入了crawlera的代理</span><br><span class="line">             &apos;scrapy_crawlera.CrawleraMiddleware&apos;: 600</span><br><span class="line">        &#125;,</span><br><span class="line">官方还提示了:</span><br><span class="line">为了使crawlera生效,需求添加你创建的api信息(如果填写了API key的话,pass可以设置为空)</span><br><span class="line">         &apos;CRAWLERA_ENABLED&apos;: True,</span><br><span class="line">        &apos;CRAWLERA_USER&apos;=&quot;&lt;API KEY&gt;&quot;</span><br><span class="line">         &apos;CRAWLERA_PASS&apos;: &apos;&apos;,</span><br><span class="line">其他就去crawlera官方文档学习吧(嘿嘿自个学习去,我也还没看完,不能在这误人子弟)</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在scrapy中的middlewares中写入代理中间件</span><br><span class="line">class RandomUserAgent(object):</span><br><span class="line">    def process_request(self, request, spider):</span><br><span class="line">        useragent = random.choice(USER_AGENTS)</span><br><span class="line">        request.headers[&apos;User-Agent&apos;] = useragent</span><br></pre></td></tr></table></figure><p>随机头User-Agent  将收集着的全放出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">USER_AGENTS = [</span><br><span class="line">    &quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) &quot;</span><br><span class="line">    &quot;Chrome/22.0.1207.1 Safari/537.1&quot;,</span><br><span class="line">    &quot;Mozilla/5.0 (X11; CrOS i686 2268.111.0) AppleWebKit/536.11 (KHTML, like Gecko) &quot;</span><br><span class="line">    &quot;Chrome/20.0.1132.57 Safari/536.11&quot;,</span><br><span class="line">    &quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.6 (KHTML, like Gecko) &quot;</span><br><span class="line">    &quot;Chrome/20.0.1092.0 Safari/536.6&quot;,</span><br><span class="line">    &quot;Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.6 (KHTML, like Gecko) &quot;</span><br><span class="line">    &quot;Chrome/20.0.1090.0 Safari/536.6&quot;,</span><br><span class="line">    &quot;Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) &quot;</span><br><span class="line">    &quot;Chrome/19.77.34.5 Safari/537.1&quot;,</span><br><span class="line">    &quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.5 (KHTML, like Gecko) &quot;</span><br><span class="line">    &quot;Chrome/19.0.1084.9 Safari/536.5&quot;,</span><br><span class="line">    &quot;Mozilla/5.0 (Windows NT 6.0) AppleWebKit/536.5 (KHTML, like Gecko) &quot;</span><br><span class="line">    &quot;Chrome/19.0.1084.36 Safari/536.5&quot;,</span><br><span class="line">    &quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 (KHTML, like Gecko) &quot;</span><br><span class="line">    &quot;Chrome/19.0.1063.0 Safari/536.3&quot;,</span><br><span class="line">    &quot;Mozilla/5.0 (Windows NT 5.1) AppleWebKit/536.3 (KHTML, like Gecko) &quot;</span><br><span class="line">    &quot;Chrome/19.0.1063.0 Safari/536.3&quot;,</span><br><span class="line">    &quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_0) AppleWebKit/536.3 (KHTML, like Gecko) &quot;</span><br><span class="line">    &quot;Chrome/19.0.1063.0 Safari/536.3&quot;,</span><br><span class="line">    &quot;Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 (KHTML, like Gecko) &quot;</span><br><span class="line">    &quot;Chrome/19.0.1062.0 Safari/536.3&quot;,</span><br><span class="line">    &quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 (KHTML, like Gecko) &quot;</span><br><span class="line">    &quot;Chrome/19.0.1062.0 Safari/536.3&quot;,</span><br><span class="line">    &quot;Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 (KHTML, like Gecko) &quot;</span><br><span class="line">    &quot;Chrome/19.0.1061.1 Safari/536.3&quot;,</span><br><span class="line">    &quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 (KHTML, like Gecko) &quot;</span><br><span class="line">    &quot;Chrome/19.0.1061.1 Safari/536.3&quot;,</span><br><span class="line">    &quot;Mozilla/5.0 (Windows NT 6.1) AppleWebKit/536.3 (KHTML, like Gecko) &quot;</span><br><span class="line">    &quot;Chrome/19.0.1061.1 Safari/536.3&quot;,</span><br><span class="line">    &quot;Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 (KHTML, like Gecko) &quot;</span><br><span class="line">    &quot;Chrome/19.0.1061.0 Safari/536.3&quot;,</span><br><span class="line">    &quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/535.24 (KHTML, like Gecko) &quot;</span><br><span class="line">    &quot;Chrome/19.0.1055.1 Safari/535.24&quot;,</span><br><span class="line">    &quot;Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/535.24 (KHTML, like Gecko) &quot;</span><br><span class="line">    &quot;Chrome/19.0.1055.1 Safari/535.24&quot;</span><br><span class="line">]</span><br><span class="line">    USER-AGENT_MOBILE = [&quot;Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 &quot;</span><br><span class="line">                              &quot;(KHTML, like Gecko) Chrome/59.0.3071.115 Mobile Safari/537.36&quot;,</span><br><span class="line">                              &quot;Mozilla/5.0 (iPhone; CPU iPhone OS 9_1 like Mac OS X) AppleWebKit/601.1.46 &quot;</span><br><span class="line">                              &quot;(KHTML, like Gecko) Version/9.0 Mobile/13B143 Safari/601.1&quot;,</span><br><span class="line">                              &quot;Mozilla/5.0 (iPhone; CPU iPhone OS 9_1 like Mac OS X) AppleWebKit/601.1.46 (KHTML, &quot;</span><br><span class="line">                              &quot;like Gecko) Version/9.0 Mobile/13B143 Safari/601.1&quot;,</span><br><span class="line">                              &quot;Mozilla/5.0 (Linux; Android 5.0; SM-G900P Build/LRX21T) AppleWebKit/537.36 (KHTML, &quot;</span><br><span class="line">                              &quot;like Gecko) Chrome/62.0.3202.75 Mobile Safari/537.36&quot;,</span><br><span class="line">                              &quot;Mozilla/5.0 (iPad; CPU OS 9_1 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) &quot;</span><br><span class="line">                              &quot;Version/9.0 Mobile/13B143 Safari/601.1&quot;]</span><br></pre></td></tr></table></figure></p><pre><code>说完中间件了,那就来一波scrapy的settings文件骚操作吧。Scrapy既然设置允许您自定义所有Scrapy组件的行为，包括核心，扩展，管道和爬虫本身。那肯定有它的理由,学的浅就不深究了,还是实打实上图吧。</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/11372882-6c3e93385a1802dd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="自定义settings"><br>      尴尬!篇幅太长了,在这里我就省去日志编写、保存数据这两步,保存方法不唯一,想怎么保存就怎么来<br>scrapy crawl spider_name -o xxx.json/xxx.csv  可直接保存对应的文件哦</p><h3 id="最后附上我的源码"><a href="#最后附上我的源码" class="headerlink" title="最后附上我的源码"></a>最后附上我的<a href="https://github.com/DannielDylan/xiaozhuduanzuSpider" target="_blank" rel="noopener">源码</a></h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;个人博客&lt;a href=&quot;https://dannieldylan.github.io/danniel/&quot;&gt;Danniel’s Blog&lt;/a&gt;,不定时更新,欢迎指正!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;找工作之余,要考虑租房问题,天天刷房源,所有才有了这个想法爬几个租房的网站吧。&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="https://dannieldylan.github.io/danniel/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>time模块的应用、try...except...finally</title>
    <link href="https://dannieldylan.github.io/danniel/2018/04/05/Python%E5%9F%BA%E7%A1%80time%E6%A8%A1%E5%9D%97%E5%8F%8A%E5%BC%82%E5%B8%B8%E6%8D%95%E8%8E%B7%E6%93%8D%E4%BD%9C%E5%B0%8F%E7%BB%93/"/>
    <id>https://dannieldylan.github.io/danniel/2018/04/05/Python基础time模块及异常捕获操作小结/</id>
    <published>2018-04-05T12:41:39.000Z</published>
    <updated>2018-10-10T13:51:27.399Z</updated>
    
    <content type="html"><![CDATA[<pre><code>今天在写Spider的时候，发现获取的数据老是不完整（应有的数据未出来），因此在完善代码的时候，加了try异常操作，睡眠时间，明显有效果。</code></pre><a id="more"></a><h3 id="先来小结time模块常用内置函数："><a href="#先来小结time模块常用内置函数：" class="headerlink" title="先来小结time模块常用内置函数："></a>先来小结time模块常用内置函数：</h3><ol><li><p><strong>python time.time()</strong><br>python time.time()返回当前时间的时间戳（<a href="https://baike.baidu.com/item/%E6%97%B6%E9%97%B4%E6%88%B3/6439235?fr=aladdin" target="_blank" rel="noopener">时间戳timestamp</a>时间戳是指格林威治时间1970年01月01日00时00分00秒(北京时间1970年01月01日08时00分00秒)起至现在的总秒数。通俗的讲，它是一个能表示一份数据在某个特定时间之前已经存在的、完整的、可验证的数据)<br>time()方法的语法：  time.time()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># -*-coding:utf-*-</span><br><span class="line">import time</span><br><span class="line">print(time.time())</span><br><span class="line">&gt;&gt;&gt;1522933182.9892895</span><br></pre></td></tr></table></figure></li><li><p><strong>python localtime()方法</strong><br>python time.localtime()函数类似gmtime(),其作用是格式化时间戳为本地的时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">eg:  time.time()</span><br><span class="line">&gt;&gt;&gt;time.struct_time(tm_year=2018, tm_mon=4, tm_mday=5, tm_hour=21, tm_min=3, tm_sec=2, tm_wday=3, tm_yday=95, tm_isdst=0)</span><br><span class="line">若将time.time()放在localtime()会是神马？ 哈哈 实验一下</span><br><span class="line">&gt;&gt;&gt; time.localtime(time.time())</span><br><span class="line">time.struct_time(tm_year=2018, tm_mon=4, tm_mday=5, tm_hour=21, tm_min=4, tm_sec=3, tm_wday=3, tm_yday=95, tm_isdst=0)</span><br></pre></td></tr></table></figure></li><li><p><strong>python asctime()方法</strong><br>python time.asctime()函数接受时间元组并返回一个可读的形式(ps:Thu Apr  5 20:52:38 2018,2018年4月5日 周四20时53分14秒)约为24个字符的字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; time.asctime()</span><br><span class="line">&apos;Thu Apr  5 21:53:10 2018&apos;</span><br><span class="line">&gt;&gt;&gt; time.asctime(time.localtime())</span><br><span class="line">&apos;Thu Apr  5 21:53:42 2018&apos;</span><br></pre></td></tr></table></figure></li><li><p><strong>python ctime()方法</strong><br>python ctime()函数把一个时间戳(按秒计算的浮点数)转化为time.asctime()的形式,如果参数未给或者为None的时候,将会默认time.time()为参数.它的作用相当于asctime(localtime(secs))</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; time.localtime()</span><br><span class="line">time.struct_time(tm_year=2018, tm_mon=4, tm_mday=5, tm_hour=22, tm_min=0, tm_sec=1, tm_wday=3, tm_yday=95, tm_isdst=0)</span><br><span class="line">&gt;&gt;&gt; time.asctime(time.localtime())</span><br><span class="line">&apos;Thu Apr  5 22:00:26 2018&apos;</span><br><span class="line">&gt;&gt;&gt; time.ctime()</span><br><span class="line">&apos;Thu Apr  5 22:00:31 2018&apos;</span><br></pre></td></tr></table></figure><ol start="5"><li><p><strong>python mktime()方法</strong><br>python mktime()函数把一个struc_time转化为时间戳</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">time.mktime(time.localtime())</span><br><span class="line">1523082853.0</span><br></pre></td></tr></table></figure></li><li><p><strong>python strftime()方法</strong><br>Python time strftime() 函数接收以时间元组，并返回以可读字符串表示的当地时间，格式由参数format决定。<br>time.strftime(format[,t])   format –格式化字符串,  t– 可选的参数t是一个struct_time对象<br>python中的时间日期格式化符号:</p></li></ol><table><thead><tr><th style="text-align:left">序号</th><th style="text-align:left">符号</th><th>含义</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left">%y</td><td>两位数的年份表示（00-99</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left">%Y</td><td>四位数的年份表示（000-9999）</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left">%m</td><td>月份（01-12）</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left">%d</td><td>月内中的一天（0-31）</td></tr><tr><td style="text-align:left">5</td><td style="text-align:left">%H</td><td>24小时制小时数（0-23）</td></tr><tr><td style="text-align:left">6</td><td style="text-align:left">%I</td><td>12小时制小时数（01-12）</td></tr><tr><td style="text-align:left">7</td><td style="text-align:left">%M</td><td>分钟数（00=59）</td></tr><tr><td style="text-align:left">8</td><td style="text-align:left">%S</td><td>秒（00-59）</td></tr><tr><td style="text-align:left">9</td><td style="text-align:left">%a</td><td>本地简化星期名称</td></tr><tr><td style="text-align:left">10</td><td style="text-align:left">%A</td><td>本地完整星期名称</td></tr><tr><td style="text-align:left">11</td><td style="text-align:left">%b</td><td>本地简化的月份名称</td></tr><tr><td style="text-align:left">12</td><td style="text-align:left">%B</td><td>本地完整的月份名称</td></tr><tr><td style="text-align:left">13</td><td style="text-align:left">%c</td><td>本地相应的日期表示和时间表示</td></tr><tr><td style="text-align:left">14</td><td style="text-align:left">%j</td><td>年内的一天（001-366）</td></tr><tr><td style="text-align:left">15</td><td style="text-align:left">%p</td><td>本地A.M.或P.M.的等价符</td></tr><tr><td style="text-align:left">16</td><td style="text-align:left">%U</td><td>一年中的星期数（00-53）星期天为星期的开始</td></tr><tr><td style="text-align:left">17</td><td style="text-align:left">%w</td><td>星期（0-6），星期天为星期的开始</td></tr><tr><td style="text-align:left">18</td><td style="text-align:left">%W</td><td>一年中的星期数（00-53）星期一为星期的开始</td></tr><tr><td style="text-align:left">19</td><td style="text-align:left">%x</td><td>本地相应的日期表示</td></tr><tr><td style="text-align:left">20</td><td style="text-align:left">%X</td><td>本地相应的时间表示</td></tr><tr><td style="text-align:left">21</td><td style="text-align:left">%Z</td><td>当前时区的名称</td></tr><tr><td style="text-align:left">备注:</td><td style="text-align:left">1</td><td>“%p”只有与“%I”配合使用才有效果。</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">2</td><td>当使用strptime()函数时，只有当在这年中的周数和天数被确定的时候%U和%W才会被计算。</td></tr></tbody></table><p>eg:<br>time_format=’%Y-%m-%d%X’<br>time_current=time.strftime(time_format)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import time</span><br><span class="line">&gt;&gt;&gt; time_format=&apos;%Y-%m-%d %X&apos;</span><br><span class="line">&gt;&gt;&gt; time_current=time.strftime(time_format)</span><br><span class="line">&gt;&gt;&gt; time_current</span><br><span class="line">&apos;2018-04-0714:28:06&apos;</span><br><span class="line">&gt;&gt;&gt; time_format=&quot;%b %d, %Y %I:%M:%S %p&quot;</span><br><span class="line">&gt;&gt;&gt; time_current=time.strftime(time_format)</span><br><span class="line">&gt;&gt;&gt; time_current</span><br><span class="line">&apos;Apr 20, 2018 04:35:55 PM&apos;</span><br><span class="line">&gt;&gt;&gt; time.strptime(&apos;2018-04-07 14:29:25&apos;,&quot;%Y-%m-%d %X&quot;)</span><br><span class="line">time.struct_time(tm_year=2018, tm_mon=4, tm_mday=7, tm_hour=14, tm_min=29, tm_sec=25, tm_wday=5, tm_yday=97, tm_isdst=-1)</span><br><span class="line">需求写一个中间T格式的 ：2017-11-18T18:42:01.211294</span><br><span class="line">&gt;&gt;&gt; time_format =&apos;%Y-%m-%dT%X%S&apos;</span><br><span class="line">&gt;&gt;&gt; time.strftime(time_format)</span><br><span class="line">&apos;2018-04-10T17:29:0000&apos;</span><br></pre></td></tr></table></figure></p><ol start="7"><li><p><strong>time.sleep(): 线程推迟指定的时间运行.单位为秒 (可以作为阻塞作用使用,我在爬虫中常用,为了防止被ban,可作为反爬虫一小措施,)</strong></p></li><li><p><strong>time.clock() 通常在python计算程序运行了多少时间</strong></p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line"></span><br><span class="line">start =time.clock()</span><br><span class="line">a=sum(range(0,101))</span><br><span class="line">print(a)</span><br><span class="line">end=time.clock()</span><br><span class="line">print(&apos;Running time:%s Seconds&apos;%(end-start))</span><br><span class="line">输出结果:</span><br><span class="line">5050</span><br><span class="line">Running time:2.8421247092743264e-05 Seconds</span><br></pre></td></tr></table></figure><h3 id="python的异常处理结构"><a href="#python的异常处理结构" class="headerlink" title="python的异常处理结构"></a>python的异常处理结构</h3><ol><li><strong>try…except…</strong></li></ol><ul><li>其中try子句中的代码块包含可能会引发异常的语句，而except子句则用来捕捉相应的异常。</li><li>如果try子句中的代码引发异常并被except子句捕捉，就执行except子句的代码块；</li><li>如果出现异常但没有被except捕获，继续往外层抛出，如果所有层都没有捕获并处理该异常，程序崩溃并将该异常呈现给最终用户。</li><li>该结构语法如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    #可能会引发异常的代码，先执行一下试试</span><br><span class="line">except Exception[ as reason]:</span><br><span class="line">    #如果try中的代码抛出异常并被except捕捉，就执行这里的代码</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li><strong>try…except…else…</strong></li></ol><ul><li>如果try中的代码抛出了异常并且被except语句捕捉则执行相应的异常处理代码，这种情况下就不会执行else中的代码；</li><li>如果try中的代码没有引发异常，则执行else块的代码。</li><li>该结构的语法如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    #可能会引发异常的代码</span><br><span class="line">except Exception [ as reason]:</span><br><span class="line">    #用来处理异常的代码</span><br><span class="line">else:</span><br><span class="line">    #如果try子句中的代码没有引发异常，就继续执行这里的代码</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li><strong>try…except…finally…</strong><br>在这种结构中，无论try中的代码是否发生异常，也不管抛出的异常有没有被except语句捕获，finally子句中的代码总是会得到执行。该结构语法为：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    #可能会引发异常的代码</span><br><span class="line">except Exception [ as reason]:</span><br><span class="line">    #处理异常的代码</span><br><span class="line">finally:</span><br><span class="line">    #无论try子句中的代码是否引发异常，都会执行这里的代码</span><br><span class="line">    可以捕捉多种异常的异常处理结构</span><br><span class="line">    一旦try子句中的代码抛出了异常，就按顺序依次检查与哪一个except子句匹配，如果某个except捕捉到了异常，其他的except子句将不会再尝试捕捉异常。该结构类似于多分支选择结构，语法格式为：</span><br><span class="line"></span><br><span class="line">    try:</span><br><span class="line">        #可能会引发异常的代码</span><br><span class="line">    except Exception1:</span><br><span class="line">        #处理异常类型1的代码</span><br><span class="line">    except Exception2:</span><br><span class="line">        #处理异常类型2的代码</span><br><span class="line">    except Exception3:</span><br><span class="line">        #处理异常类型3的代码</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></li></ol><h3 id="常见异常类型"><a href="#常见异常类型" class="headerlink" title="常见异常类型"></a>常见异常类型</h3><p>BaseException：所有异常的基类<br>SystemExitb python：解释器请求退出<br>KeyboardInterruptc：用户中断执行(通常是输入^C)</p><h3 id="Exception：常规错误的基类"><a href="#Exception：常规错误的基类" class="headerlink" title="Exception：常规错误的基类"></a>Exception：常规错误的基类</h3><table><thead><tr><th style="text-align:left">异常代码</th><th style="text-align:left">对应的中文一览</th></tr></thead><tbody><tr><td style="text-align:left">StopIteratione</td><td style="text-align:left">迭代器没有更多的值</td></tr><tr><td style="text-align:left">GeneratorExita</td><td style="text-align:left">生成器(generator)发生异常来通知退出</td></tr><tr><td style="text-align:left">SystemExith</td><td style="text-align:left">Python 解释器请求退出</td></tr><tr><td style="text-align:left">StandardErrorg</td><td style="text-align:left">所有的内建标准异常的基类</td></tr><tr><td style="text-align:left">ArithmeticErrord</td><td style="text-align:left">所有数值计算错误的基类</td></tr><tr><td style="text-align:left">FloatingPointErrord</td><td style="text-align:left">浮点计算错误</td></tr><tr><td style="text-align:left">OverflowError</td><td style="text-align:left">数值运算超出最大限制</td></tr><tr><td style="text-align:left">ZeroDivisionError</td><td style="text-align:left">除(或取模)零 (所有数据类型)</td></tr><tr><td style="text-align:left">AssertionErrord</td><td style="text-align:left">断言语句失败</td></tr><tr><td style="text-align:left">AttributeError</td><td style="text-align:left">对象没有这个属性</td></tr><tr><td style="text-align:left"></td><td style="text-align:left"></td></tr><tr><td style="text-align:left">EOFError</td><td style="text-align:left">没有内建输入,到达EOF 标记</td></tr><tr><td style="text-align:left">EnvironmentErrord</td><td style="text-align:left">操作系统错误的基类</td></tr><tr><td style="text-align:left">IOError</td><td style="text-align:left">输入/输出操作失败</td></tr><tr><td style="text-align:left">OSErrord</td><td style="text-align:left">操作系统错误</td></tr><tr><td style="text-align:left">WindowsErrorh Windows</td><td style="text-align:left">系统调用失败</td></tr><tr><td style="text-align:left">ImportError</td><td style="text-align:left">导入模块/对象失败</td></tr><tr><td style="text-align:left">KeyboardInterruptf</td><td style="text-align:left">用户中断执行(通常是输入^C)</td></tr><tr><td style="text-align:left">LookupErrord</td><td style="text-align:left">无效数据查询的基类</td></tr><tr><td style="text-align:left">IndexError</td><td style="text-align:left">序列中没有没有此索引(index)</td></tr><tr><td style="text-align:left">KeyError</td><td style="text-align:left">映射中没有这个键</td></tr><tr><td style="text-align:left">MemoryError</td><td style="text-align:left">内存溢出错误(对于Python 解释器不是致命的)</td></tr><tr><td style="text-align:left">UnboundLocalErrorh</td><td style="text-align:left">访问未初始化的本地变量</td></tr><tr><td style="text-align:left">ReferenceErrore</td><td style="text-align:left">弱引用(Weak reference)试图访问已经垃圾回收了的对象</td></tr><tr><td style="text-align:left">RuntimeError</td><td style="text-align:left">一般的运行时错误</td></tr><tr><td style="text-align:left">NotImplementedErrord</td><td style="text-align:left">尚未实现的方法</td></tr><tr><td style="text-align:left">IndentationErrorg</td><td style="text-align:left">缩进错误</td></tr><tr><td style="text-align:left">TabErrorg</td><td style="text-align:left">Tab 和空格混用</td></tr><tr><td style="text-align:left">SystemError</td><td style="text-align:left">一般的解释器系统错误</td></tr><tr><td style="text-align:left">ValueError</td><td style="text-align:left">传入无效的参数</td></tr><tr><td style="text-align:left">UnicodeErrorh</td><td style="text-align:left">Unicode 相关的错误</td></tr><tr><td style="text-align:left">UnicodeDecodeErrori</td><td style="text-align:left">Unicode 解码时的错误</td></tr><tr><td style="text-align:left">UnicodeEncodeErrori</td><td style="text-align:left">Unicode 编码时错误</td></tr><tr><td style="text-align:left">UnicodeTranslateErrorf</td><td style="text-align:left">Unicode 转换时错误</td></tr><tr><td style="text-align:left">DeprecationWarningj</td><td style="text-align:left">关于被弃用的特征的警告</td></tr><tr><td style="text-align:left">FutureWarningi</td><td style="text-align:left">关于构造将来语义会有改变的警告</td></tr><tr><td style="text-align:left">PendingDeprecationWarningi</td><td style="text-align:left">关于特性将会被废弃的警告</td></tr><tr><td style="text-align:left">RuntimeWarningj</td><td style="text-align:left">可疑的运行时行为(runtime behavior)的警告</td></tr><tr><td style="text-align:left">SyntaxWarningj</td><td style="text-align:left">可疑的语法的警告</td></tr><tr><td style="text-align:left">UserWarningj</td><td style="text-align:left">用户代码生成的警告</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;今天在写Spider的时候，发现获取的数据老是不完整（应有的数据未出来），因此在完善代码的时候，加了try异常操作，睡眠时间，明显有效果。
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="python 基础" scheme="https://dannieldylan.github.io/danniel/tags/python-%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>MySQL数据库知识小结</title>
    <link href="https://dannieldylan.github.io/danniel/2018/01/21/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9F%A5%E8%AF%86%E5%B0%8F%E7%BB%93/"/>
    <id>https://dannieldylan.github.io/danniel/2018/01/21/MySQL数据库知识小结/</id>
    <published>2018-01-21T13:53:34.000Z</published>
    <updated>2018-10-10T14:00:11.990Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数据库操作相关"><a href="#数据库操作相关" class="headerlink" title="数据库操作相关"></a>数据库操作相关</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line">u User p password</span><br><span class="line">**注意： -u和用户名之间可以连写  可以有空格**</span><br><span class="line">  -p后面也可以直接跟上密码</span><br><span class="line">     例如   mysql -uroot -p123456</span><br><span class="line">退出数据库</span><br><span class="line"> Ctrl + D  exit  quit</span><br><span class="line">SQL语句  末位默认结尾符号为 ;</span><br><span class="line">显示数据库版本</span><br><span class="line">select version()；</span><br><span class="line">select @@version；</span><br><span class="line">显示现在时间</span><br><span class="line">select now();</span><br><span class="line">查看所有数据库</span><br><span class="line">show databases；</span><br><span class="line">创建数据库</span><br><span class="line">create database 数据库名  charset=编码名；</span><br><span class="line">- 注意utf-8中间的-不要  因为SQL中的-是特殊字符</span><br><span class="line">- 默认编码为latin1</span><br><span class="line">create database py charset=utf8；</span><br><span class="line">create database py character set utf8；</span><br><span class="line">创建成功后，会返回如下信息：  Query OK，1 row affected （0.01 sec)</span><br><span class="line">创建成功后，我们需要对数据库进行选择，选择成功后才能对数据库进行操作</span><br><span class="line">    使用use语句指定</span><br><span class="line">use 数据库名;切换到某个数据库进行使用；</span><br><span class="line">    选择创建的py数据库；</span><br><span class="line">    use 数据库名；</span><br><span class="line">    选择成功后会提示：Database changed</span><br><span class="line">查看创建某数据库的语句：</span><br><span class="line">show create database 数据库名；</span><br><span class="line">查看当前正使用的数据库</span><br><span class="line">select database();</span><br><span class="line">删除数据库&lt;慎用&gt;</span><br><span class="line">drop database 数据库名；</span><br></pre></td></tr></table></figure><p>表结构操作<br>创建表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">create table 表名称（列声明1，列声明2，...);</span><br><span class="line">以创建student表为例，表中有学号（id），姓名（name），性别（sex），年龄（age）等列</span><br><span class="line">create table class</span><br><span class="line">（</span><br><span class="line">id int unsigned not null auto_increment primary key，</span><br><span class="line">name char（8） not null，</span><br><span class="line">sex char（4） not null，</span><br><span class="line">age tinyint unsigned not null，</span><br><span class="line">）；</span><br></pre></td></tr></table></figure></p><p>如果担心在命令行中输入这么长的sql语句会出错，可以将以上的sql语句保存为create_student.sql文件，比如将它保存在D盘根目录，有两种方式可以让MySQL执行sql文件<br>在登录MySQL的时候输入： mysql -D py test -uroot -p &lt;D:\create_student.sql<br>在登录MySQL之后 输入： source D:\create_student.sql<br>或输入： D:\create_student.sql<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">- 查看当前数据库中所有表</span><br><span class="line">  show tables；</span><br><span class="line">- 查看表创建的语句</span><br><span class="line">show create table 表名；</span><br><span class="line">- 查看表结构</span><br><span class="line">desc 表名；</span><br><span class="line">- 删除表</span><br><span class="line">drop table 表名；</span><br></pre></td></tr></table></figure></p><p>对表数据增删改查操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">以student表进行演示</span><br><span class="line">增加学生信息   insert into student values（NULL，&quot;dylan&quot;,&quot;男&quot;，18）；</span><br><span class="line">更新学生的年龄  update student set age=20 where name=&quot;dylan&quot;</span><br><span class="line">查看学生信息select name，age from student；（select * from student；）</span><br><span class="line">删除学生信息delete from student where age=18；</span><br></pre></td></tr></table></figure></p><p>注意 在MySQL中字符串既可以使用单引号包裹，也可以使用双引号包裹***</p><p>实战演练</p><h4 id="增加插入"><a href="#增加插入" class="headerlink" title="增加插入"></a>增加插入</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">   - 全列   当插入的数据顺序和表结构顺序完全一致的时候 可省</span><br><span class="line">   insert into classes (id,name) values (0, &quot;小hu&quot;);</span><br><span class="line">insert into classes values (0,&quot;zhang&quot;) ,(0,&quot;sun&quot;)</span><br><span class="line">   - into可省</span><br><span class="line">   insert classes values (0,&quot;赵&quot;);</span><br><span class="line">   - 部分  没有指明的字段必须要有默认值 并且满足 字段约束</span><br><span class="line">insert classes (name) values (&quot;钱&quot;);</span><br><span class="line">   - 当数据表中 有非空约束的时候  下列是错误的</span><br><span class="line">insert classes (name) values (&quot;李&quot;);</span><br><span class="line">   - 可以在合适的情况下 给非空约束的字段 指定默认值</span><br><span class="line">alter table classes modify wifi varchar(16) default &quot;&quot; not null;</span><br><span class="line">   - 下列语句是OK的</span><br><span class="line">insert classes (name) values (&quot;李&quot;);</span><br><span class="line">   - 多行</span><br><span class="line">insert classes values (0,&quot;周&quot;,&quot;123456789&quot;),(0,&quot;武大郎&quot;,&quot;890&quot;);</span><br></pre></td></tr></table></figure><h5 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h5><p>物理删除 默认情况下是物理删除 不加条件默认删除所有<br>delete from classes where wifi!=”123456”;<br>当删除表所有数据时 尽量用drop table<br>逻辑删除<br>修改</p><ul><li>如果不指定条件 默认更新所有记录<br>update classes set wifi=”123456”</li><li>指定条件更新 指定id为4的用户wifi修改为6789<br>update classes set wifi=”6789” where id=4;<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-- 全列 全部字段</span><br><span class="line">select * from 表名；</span><br><span class="line">select * from classes</span><br><span class="line">-- 指定列</span><br><span class="line">select name from classes;</span><br><span class="line">-- 指定列显示顺序</span><br><span class="line">select name, id from classes;</span><br><span class="line">-- 指定条件</span><br><span class="line">mysql&gt; select * from classes where wifi!=&quot;123456&quot;;</span><br><span class="line">- as重命名 起别名</span><br><span class="line">select name as 姓名 from classes where wifi!=&quot;123456&quot;;</span><br></pre></td></tr></table></figure></li></ul><h3 id="对表结构的操作"><a href="#对表结构的操作" class="headerlink" title="对表结构的操作"></a>对表结构的操作</h3><ul><li>修改表-添加字段<br>alter table student add hometown varchar(32) not null;</li><li>修改表-修改字段<br>alter table student modify hometown varchar(64);</li><li>修改表-重命名字段<br>alter table student change city hometown varchar(16) not null;</li><li>修改表-删除字段<br>alter table student drop city;<h3 id="MySQL常用命令"><a href="#MySQL常用命令" class="headerlink" title="MySQL常用命令"></a>MySQL常用命令</h3><h4 id="一、连接MySQL-mysql-h-主机地址-u-用户名-p-用密码"><a href="#一、连接MySQL-mysql-h-主机地址-u-用户名-p-用密码" class="headerlink" title="一、连接MySQL mysql-h 主机地址 -u 用户名 -p 用密码"></a>一、连接MySQL mysql-h 主机地址 -u 用户名 -p 用密码</h4>1、连接到本机MySQL<br>在命令行中输入mysql -uroot -p  回车后按提示输入密码<br>也可以直接在p后面跟上密码   mysql -uroot -p123456<br>2、连接到远程主机上的MySQL<br>远程主机的ip假设为10.110.88.188,用户名为root，密码为123456：mysql -h<br>10.110.88.188 -uroot -p123456<h4 id="二、修改密码"><a href="#二、修改密码" class="headerlink" title="二、修改密码"></a>二、修改密码</h4>mysqladmin -uroot -password root123；<h4 id="三、增加新用户"><a href="#三、增加新用户" class="headerlink" title="三、增加新用户"></a>三、增加新用户</h4>grant权限1，权限2，…权限n on 数据库名称.表名称to 用户名@用户地址 identified by 密码;<br>示例<br>给来自10.166.288.88的用户dylan 分配可对数据库company的employee表进行<br>select、insert、update、delete、create、drop等操作的权限，并设定口令为123<br>grant select，insert，update，delete，create，drop on company.employee to <a href="mailto:dylan@10.166.288.88" target="_blank" rel="noopener">dylan@10.166.288.88</a> identified by ‘123’;<h4 id="四、显示数据库"><a href="#四、显示数据库" class="headerlink" title="四、显示数据库"></a>四、显示数据库</h4>show databases<h4 id="五、备份数据库"><a href="#五、备份数据库" class="headerlink" title="五、备份数据库"></a>五、备份数据库</h4>数据库的备份包括数据库的备份、表的备份<br>mysqldump -h 主机名 -p 端口 -u用户名 -p 密码 -database 数据库名表名&gt;文件名.sql</li></ul><ol><li>导出整个数据库<br>mysqldump -u user_name -p123456 database_name table_name &gt; outfile_name.sql</li><li>导出一个表<br>mysqldump -u user_name -p123456 database_name table_name &gt;outfile_name.sql<h4 id="六、补充知识"><a href="#六、补充知识" class="headerlink" title="六、补充知识"></a>六、补充知识</h4> prompt python&gt;  + \D  头部会显示完整日期<pre><code>\U  显示使用用户信息</code></pre>MySQL 记录货币用什么字段最好？ number和decimal<h3 id="Python-操作MySQL"><a href="#Python-操作MySQL" class="headerlink" title="Python 操作MySQL"></a>Python 操作MySQL</h3></li><li><strong>导入模块</strong><br> py2  import mysqldb<br> py3  import pymysql</li><li><strong>打开数据库</strong><br> host=”localhost”<br> pwd=’’<br> con=pymysql.connect(host=host,port=3306,pwd=pwd，db=’数据库名’，charset=”utf8”)</li><li><strong>数据库连接对象</strong><br> 上面通过connect方法返回的con对象，即使数据库连接对象，它提供了以下方法：<br> cursor()方法用来创建一个游标对象<br> commit()方法用来事务提交<br> rollback()方法用来事务回滚<br> close()方法用来关闭一个数据库连接</li><li><strong>游标对象的使用</strong><br> 对数据库的查询需要使用到游标对象，首先通过cursor()方法创建一个游标对象<br> #获取连接中一个会话资源<br> cur=con.cursor()<br> #游标对象有以下方法支持数据库的操作对数据库进行操作<br> execute()表示执行  参数1表示sql语句 参数2表示sql语句的参数<br> executemany()用来执行多条SQL语句<br> close()用来关闭游标<br> fetchone()用来从结果中取出一条记录，并将游标指向下一条记录<br> fetchmany()用来从结果中取多条记录<br> fetchall()用来从结果中取出所有记录<br> scroll()用于游标滚动</li><li><p><strong>建表</strong><br> #首先使用游标对象创建一个person表，包含id、name、age等3列<br> #cur.execute（”create tables person (id int not null auto_increment primary key,name varchar(20),age int)”</p></li><li><p><strong>插入数据</strong><br> 向person表中插入两条数据</p></li><li><strong>查询数据</strong><br>#返回值表示影响的行数<br>row_count=cur.execute(‘select * from user_info’)<br>data=cur.fetchall()#输出所有数据<br>#关闭资源<br>#先关游标<br>cur.close()<br>con.close()</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;数据库操作相关&quot;&gt;&lt;a href=&quot;#数据库操作相关&quot; class=&quot;headerlink&quot; title=&quot;数据库操作相关&quot;&gt;&lt;/a&gt;数据库操作相关&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=
      
    
    </summary>
    
    
  </entry>
  
</feed>
