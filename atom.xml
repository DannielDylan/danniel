<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Danniel&#39;s Blog</title>
  
  <subtitle>记录学习的技能与遇到的问题</subtitle>
  <link href="/danniel/atom.xml" rel="self"/>
  
  <link href="https://dannieldylan.github.io/danniel/"/>
  <updated>2018-06-12T15:52:15.051Z</updated>
  <id>https://dannieldylan.github.io/danniel/</id>
  
  <author>
    <name>Dylan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Ubuntu操作指令小结</title>
    <link href="https://dannieldylan.github.io/danniel/2018/04/14/Ubuntu%E6%8C%87%E4%BB%A4/"/>
    <id>https://dannieldylan.github.io/danniel/2018/04/14/Ubuntu指令/</id>
    <published>2018-04-14T09:00:48.000Z</published>
    <updated>2018-06-12T15:52:15.051Z</updated>
    
    <content type="html"><![CDATA[<p><strong>一、文件/文件夹管理</strong> </p><p>ls 列出当前目录文件（不包括隐含文件） </p><p>ls -a 列出当前目录文件（包括隐含文件） </p><p>ls -l 列出当前目录下文件的详细信息 </p><p>cd .. 回当前目录的上一级目录<br><a id="more"></a><br>cd - 回上一次所在的目录 </p><p>cd ~ 或 cd 回当前用户的宿主目录 </p><p>mkdir 目录名 创建一个目录 </p><p>rmdir 空目录名 删除一个空目录 </p><p>rm 文件名 文件名 删除一个文件或多个文件 </p><p>rm -rf 非空目录名 删除一个非空目录下的一切 </p><p>mv 路经/文件 /经/文件移动相对路经下的文件到绝对路经下 </p><p>mv 文件名 新名称 在当前目录下改名 </p><p>find 路经 -name “字符串” 查找路经所在范围内满足字符串匹配的文件和目录 </p><p><strong>二、系统管理 </strong></p><p>fdisk fdisk -l 查看系统分区信息 </p><p>fdisk fdisk /dev/sdb 为一块新的SCSI硬盘进行分区 </p><p>chown chown root /home 把/home的属主改成root用户 </p><p>chgrp chgrp root /home 把/home的属组改成root组 </p><p>Useradd 创建一个新的用户 </p><p>Groupadd 组名 创建一个新的组 </p><p>Passwd 用户名 为用户创建密码 </p><p>Passwd -d用户名 删除用户密码也能登陆 </p><p>Passwd -S用户名 查询账号密码 </p><p>Usermod -l 新用户名 老用户名 为用户改名 </p><p>Userdel–r 用户名 删除用户一切 </p><p>service [servicename] start/stop/restart 系统服务控制操作 </p><p>/etc/init.d/[servicename] start/stop/restart 系统服务控制操作 </p><p>uname -a 查看内核版本 </p><p>cat /etc/issue 查看ubuntu版本 </p><p>lsusb 查看usb设备 </p><p>sudo ethtool eth0 查看网卡状态 </p><p>cat /proc/cpuinfo 查看cpu信息 </p><p>lshw 查看当前硬件信息 </p><p>sudo fdisk -l 查看磁盘信息 </p><p>df -h 查看硬盘剩余空间 </p><p>free -m 查看当前的内存使用情况 </p><p>ps -A 查看当前有哪些进程 </p><p>kill 进程号(就是ps -A中的第一列的数字)或者 killall 进程名( 杀死一个进程) </p><p>kill -9 进程号 强制杀死一个进程 </p><p>reboot Init 6 重启LINUX系统 </p><p>Halt Init 0 Shutdown –h now 关闭LINUX系统 </p><p><strong>三、打包/解压 </strong></p><p>tar -c 创建包 –x 释放包 -v 显示命令过程 –z 代表压缩包 </p><p>tar –cvf benet.tar /home/benet 把/home/benet目录打包 </p><p>tar –zcvf benet.tar.gz /mnt 把目录打包并压缩 </p><p>tar –zxvf benet.tar.gz 压缩包的文件解压恢复 </p><p>tar –jxvf benet.tar.bz2 解压缩 </p><p><strong>四、make编译 </strong></p><p>make 编译 </p><p>make install 安装编译好的源码包 </p><p><strong>五、apt命令 </strong></p><p>apt-cache search package 搜索包 </p><p>apt-cache show package 获取包的相关信息，如说明、大小、版本等 </p><p>sudo apt-get install package 安装包 </p><p>sudo apt-get install package - - reinstall 重新安装包 </p><p>sudo apt-get -f install 修复安装”-f = –fix-missing” </p><p>sudo apt-get remove package 删除包 </p><p>sudo apt-get remove package - - purge 删除包，包括删除配置文件等 </p><p>sudo apt-get update 更新源 </p><p>sudo apt-get upgrade 更新已安装的包 </p><p>sudo apt-get dist-upgrade 升级系统 </p><p>sudo apt-get dselect-upgrade 使用 dselect 升级 </p><p>apt-cache depends package 了解使用依赖 </p><p>apt-cache rdepends package 是查看该包被哪些包依赖 </p><p>sudo apt-get build-dep package 安装相关的编译环境 </p><p>apt-get source package 下载该包的源代码 </p><p>sudo apt-get clean &amp;&amp; sudo apt-get autoclean 清理无用的包 </p><p>sudo apt-get check 检查是否有损坏的依赖 </p><p>sudo apt-get clean 清理所有软件缓存（即缓存在/var/cache/apt/archives目录里的deb包）</p><p><strong>查看软件xxx安装内容 </strong></p><p>dpkg -L xxx </p><p>查找软件 </p><p>apt-cache search 正则表达式 </p><p>查找文件属于哪个包 </p><p>dpkg -S filename apt-file search filename </p><p>查询软件xxx依赖哪些包 </p><p>apt-cache depends xxx </p><p>查询软件xxx被哪些包依赖 </p><p>apt-cache rdepends xxx </p><p>增加一个光盘源 </p><p>sudo apt-cdrom add </p><p>系统升级 </p><p>sudo apt-get update </p><p>sudo apt-get upgrade </p><p>sudo apt-get dist-upgrade </p><p>清除所以删除包的残余配置文件 </p><p>dpkg -l |grep ^rc|awk ‘{print $2}’ |tr [“\n”] [“ “]|sudo xargs dpkg -P - </p><p>编译时缺少h文件的自动处理 </p><p>sudo auto-apt run ./configure </p><p>查看安装软件时下载包的临时存放目录 </p><p>ls /var/cache/apt/archives </p><p>备份当前系统安装的所有包的列表 </p><p>dpkg –get-selections | grep -v deinstall &gt; ~/somefile </p><p>从上面备份的安装包的列表文件恢复所有包 </p><p>dpkg –set-selections &lt; ~/somefile sudo dselect </p><p>清理旧版本的软件缓存 </p><p>sudo apt-get autoclean </p><p>清理所有软件缓存 </p><p>sudo apt-get clean </p><p>删除系统不再使用的孤立软件 </p><p>sudo apt-get autoremove </p><p>查看包在服务器上面的地址 </p><p>apt-get -qq –print-uris install ssh | cut -d\’ -f2 </p><p>系统 </p><p>查看内核 </p><p>uname -a </p><p>查看Ubuntu版本 </p><p>cat /etc/issue </p><p>查看内核加载的模块 </p><p>lsmod </p><p>查看PCI设备 </p><p>lspci </p><p>查看USB设备 </p><p>lsusb </p><p>查看网卡状态 </p><p>sudo ethtool eth0 </p><p>查看CPU信息 </p><p>cat /proc/cpuinfo </p><p>显示当前硬件信息 </p><p>lshw </p><p>硬盘 </p><p>查看硬盘的分区 </p><p>sudo fdisk -l </p><p>查看IDE硬盘信息 </p><p>sudo hdparm -i /dev/hda </p><p>查看STAT硬盘信息 </p><p>sudo hdparm -I /dev/sda </p><p>或 </p><p>sudo apt-get install blktool </p><p>sudo blktool /dev/sda id </p><p>查看硬盘剩余空间 </p><p>df -h </p><p>df -H </p><p>查看目录占用空间 </p><p>du -hs 目录名 </p><p>优盘没法卸载 </p><p>sync fuser -km /media/usbdisk </p><p>内存 </p><p>查看当前的内存使用情况 </p><p>free -m </p><p>进程 </p><p>查看当前有哪些进程 </p><p>ps -A </p><p>中止一个进程 </p><p>kill 进程号(就是ps -A中的第一列的数字) 或者 killall 进程名 </p><p>强制中止一个进程(在上面进程中止不成功的时候使用) </p><p>kill -9 进程号 或者 killall -9 进程名 </p><p>图形方式中止一个程序 </p><p>xkill 出现骷髅标志的鼠标，点击需要中止的程序即可 </p><p>查看当前进程的实时状况 </p><p>top </p><p>查看进程打开的文件 </p><p>lsof -p </p><p>ADSL 配置 ADSL </p><p>sudo pppoeconf </p><p>ADSL手工拨号 </p><p>sudo pon dsl-provider </p><p>激活 ADSL </p><p>sudo /etc/ppp/pppoe_on_boot </p><p>断开 ADSL </p><p>sudo poff </p><p>查看拨号日志 </p><p>sudo plog </p><p>如何设置动态域名 </p><p>首先去<a href="http://www.3322.org/" target="_blank" rel="noopener">http://www.3322.org</a>申请一个动态域名 </p><p>然后修改 /etc/ppp/ip-up 增加拨号时更新域名指令 sudo vim /etc/ppp/ip-up </p><p>在最后增加如下行 w3m -no-cookie -dump </p><p>网络 </p><p>根据IP查网卡地址 </p><p>arping IP地址 </p><p>查看当前IP地址 </p><p>ifconfig eth0 |awk ‘/inet/ {split($2,x,”:”);print x[2]}’ </p><p>查看当前外网的IP地址 </p><p>w3m -no-cookie -dump<a href="http://www.edu.cn|grep-o‘[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}’" target="_blank" rel="noopener">www.edu.cn|grep-o‘[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}’</a> </p><p>w3m -no-cookie -dump<a href="http://www.xju.edu.cn|grep-o’[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}’" target="_blank" rel="noopener">www.xju.edu.cn|grep-o’[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}’</a> </p><p>w3m -no-cookie -dump ip.loveroot.com|grep -o’[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}’ </p><p>查看当前监听80端口的程序 </p><p>lsof -i :80 </p><p>查看当前网卡的物理地址 </p><p>arp -a | awk ‘{print $4}’ ifconfig eth0 | head -1 | awk ‘{print $5}’ </p><p>立即让网络支持nat </p><p>sudo echo 1 &gt; /proc/sys/net/ipv4/ip_forward </p><p>sudo iptables -t nat -I POSTROUTING -j MASQUERADE </p><p>查看路由信息 </p><p>netstat -rn sudo route -n </p><p>手工增加删除一条路由 </p><p>sudo route add -net 192.168.0.0 netmask 255.255.255.0 gw 172.16.0.1 </p><p>sudo route del -net 192.168.0.0 netmask 255.255.255.0 gw 172.16.0.1 </p><p>修改网卡MAC地址的方法 </p><p>sudo ifconfig eth0 down 关闭网卡 </p><p>sudo ifconfig eth0 hw ether 00:AA:BB:CC:DD:EE 然后改地址 </p><p>sudo ifconfig eth0 up 然后启动网卡 </p><p>统计当前IP连接的个数 </p><p>netstat -na|grep ESTABLISHED|awk ‘{print $5}’|awk -F: ‘{print $1}’|sort|uniq -c|sort -r -n </p><p>netstat -na|grep SYN|awk ‘{print $5}’|awk -F: ‘{print $1}’|sort|uniq -c|sort -r -n </p><p>统计当前20000个IP包中大于100个IP包的IP地址 </p><p>tcpdump -tnn -c 20000 -i eth0 | awk -F “.” ‘{print $1″.”$2″.”$3″.”$4}’ | sort | uniq -c | sort -nr | awk ‘ $1 &gt; 100 ‘ </p><p>屏蔽IPV6 </p><p>echo “blacklist ipv6″ | sudo tee /etc/modprobe.d/blacklist-ipv6 </p><p>服务 </p><p>添加一个服务 </p><p>sudo update-rc.d 服务名 defaults 99 </p><p>删除一个服务 </p><p>sudo update-rc.d 服务名 remove </p><p>临时重启一个服务 </p><p>/etc/init.d/服务名 restart </p><p>临时关闭一个服务 </p><p>/etc/init.d/服务名 stop </p><p>临时启动一个服务 </p><p>/etc/init.d/服务名 start </p><p>设置 </p><p>配置默认Java使用哪个 </p><p>sudo update-alternatives –config java </p><p>修改用户资料 </p><p>sudo chfn userid </p><p>给apt设置代理 </p><p>export http_proxy=<a href="http://xx.xx.xx.xx:xxx%C2%A0/" target="_blank" rel="noopener">http://xx.xx.xx.xx:xxx </a></p><p>修改系统登录信息 </p><p>sudo vim /etc/motd </p><p>中文 </p><p>转换文件名由GBK为UTF8 </p><p>sudo apt-get install convmv convmv -r -f cp936 -t utf8 –notest –nosmart * </p><p>批量转换src目录下的所有文件内容由GBK到UTF8 </p><p>find src -type d -exec mkdir -p utf8/{} \; find src -type f -exec iconv -f GBK -t UTF-8 {} -o utf8/{} \; mv utf8/* src rm -fr utf8 </p><p>转换文件内容由GBK到UTF8 </p><p>iconv -f gbk -t utf8 $i &gt; newfile </p><p>转换 mp3 标签编码 </p><p>sudo apt-get install python-mutagen find . -iname “*.mp3” -execdir mid3iconv -e GBK {} \; </p><p>控制台下显示中文 </p><p>sudo apt-get install zhcon 使用时，输入zhcon即可 </p><p>文件 </p><p>快速查找某个文件 </p><p>whereis filename </p><p>find 目录 -name 文件名 </p><p>查看文件类型 </p><p>file filename </p><p>显示xxx文件倒数6行的内容 </p><p>tail -n 6 xxx </p><p>让tail不停地读地最新的内容 </p><p>tail -n 10 -f /var/log/apache2/access.log </p><p>查看文件中间的第五行（含）到第10行（含）的内容 </p><p>sed -n ‘5,10p’ /var/log/apache2/access.log </p><p>查找包含xxx字符串的文件 </p><p>grep -l -r xxx . </p><p>全盘搜索文件(桌面可视化) </p><p>gnome-search-tool </p><p>查找关于xxx的命令 </p><p>apropos xxx man -k xxx </p><p>通过ssh传输文件 </p><p>scp -rp /path/filenameusername@remoteIP:/path </p><p>将本地文件拷贝到服务器上 </p><p>scp -rpusername@remoteIP:/path/filename/path </p><p>将远程文件从服务器下载到本地 </p><p>查看某个文件被哪些应用程序读写 </p><p>lsof 文件名 </p><p>把所有文件的后辍由rm改为rmvb </p><p>rename ’s/.rm$/.rmvb/’ * </p><p>把所有文件名中的大写改为小写 </p><p>rename ‘tr/A-Z/a-z/’ * </p><p>删除特殊文件名的文件，如文件名：–help.txt </p><p>rm — –help.txt 或者 rm ./–help.txt </p><p>查看当前目录的子目录 </p><p>ls -d <em>/. 或 echo </em>/. </p><p>将当前目录下最近30天访问过的文件移动到上级back目录 </p><p>find . -type f -atime -30 -exec mv {} ../back \; </p><p>将当前目录下最近2小时到8小时之内的文件显示出来 </p><p>find . -mmin +120 -mmin -480 -exec more {} \; </p><p>删除修改时间在30天之前的所有文件 </p><p>find . -type f -mtime +30 -mtime -3600 -exec rm {} \; </p><p>查找guest用户的以avi或者rm结尾的文件并删除掉 </p><p>find . -name ‘<em>.avi’ -o -name ‘</em>.rm’ -user ‘guest’ -exec rm {} \; </p><p>查找的不以java和xml结尾,并7天没有使用的文件删除掉 </p><p>find . ! -name <em>.java ! -name ‘</em>.xml’ -atime +7 -exec rm {} \; </p><p>统计当前文件个数 </p><p>ls /usr/bin|wc -w </p><p>统计当前目录个数 </p><p>ls -l /usr/bin|grep ^d|wc -l </p><p>显示当前目录下2006-01-01的文件名 </p><p>ls -l |grep 2006-01-01 |awk ‘{print $8}’ </p><p>FTP </p><p>上传下载文件工具-filezilla </p><p>sudo apt-get install filezilla </p><p>filezilla无法列出中文目录？ </p><p>站点-&gt;字符集-&gt;自定义-&gt;输入：GBK </p><p>本地中文界面 </p><p>1）下载filezilla中文包到本地目录，如~/ </p><p>2）#unrar x Filezilla3_zhCN.rar </p><p>3) 如果你没有unrar的话，请先安装rar和unrar </p><p>sudo apt-get install rar unrar </p><p>sudo ln -f /usr/bin/rar /usr/bin/unrar </p><p>4）先备份原来的语言包,再安装；实际就是拷贝一个语言包。 </p><p>sudo cp /usr/share/locale/zh_CN/filezilla.mo /usr/share/locale/zh_CN/filezilla.mo.bak </p><p>sudo cp ~/locale/zh_CN/filezilla.mo /usr/share/locale/zh_CN/filezilla.mo </p><p>5）重启filezilla,即可！ </p><p>解压缩 </p><p>解压缩 xxx.tar.gz </p><p>tar -zxvf xxx.tar.gz </p><p>解压缩 xxx.tar.bz2 </p><p>tar -jxvf xxx.tar.bz2 </p><p>压缩aaa bbb目录为xxx.tar.gz </p><p>tar -zcvf xxx.tar.gz aaa bbb </p><p>压缩aaa bbb目录为xxx.tar.bz2 </p><p>tar -jcvf xxx.tar.bz2 aaa bbb </p><p>解压缩 RAR 文件 </p><p>1) 先安装 </p><p>sudo apt-get install rar unrar </p><p>sudo ln -f /usr/bin/rar /usr/bin/unrar </p><p>2) 解压 </p><p>unrar x aaaa.rar </p><p>Nautilus </p><p>显示隐藏文件 </p><p>Ctrl+h </p><p>显示地址栏 </p><p>Ctrl+l </p><p>特殊 URI 地址 </p><p>computer:/// - 全部挂载的设备和网络 </p><p> network:/// - 浏览可用的网络 </p><p> burn:/// - 一个刻录 CDs/DVDs 的数据虚拟目录 </p><p>smb:/// - 可用的 windows/samba 网络资源 </p><p>x-nautilus-desktop:/// - 桌面项目和图标 </p><p>file:///- 本地文件 </p><p>trash:/// - 本地回收站目录 </p><p>ftp:// - FTP 文件夹<br>ssh:// - SSH 文件夹 </p><p>fonts:/// - 字体文件夹，可将字体文件拖到此处以完成安装<br>themes:/// - 系统主题文件夹 </p><p>查看已安装字体 </p><p>在nautilus的地址栏里输入”fonts:///“，就可以查看本机所有的fonts </p><p>程序 </p><p>详细显示程序的运行信息 </p><p>strace -f -F -o outfile </p><p>日期和时间 </p><p>设置日期 </p><p>date -s mm/dd/yy </p><p>设置时间 </p><p>date -s HH:MM </p><p>将时间写入CMOS </p><p>hwclock –systohc </p><p>读取CMOS时间 </p><p>hwclock –hctosys </p><p>从服务器上同步时间 </p><p>sudo ntpdate time.nist.gov </p><p>sudo ntpdate time.windows.com </p><p>控制台 </p><p>不同控制台间切换 </p><p>Ctrl + ALT + ← Ctrl + ALT + → </p><p>指定控制台切换 </p><p>Ctrl + ALT + Fn(n:1~7) </p><p>控制台下滚屏 </p><p>SHIFT + pageUp/pageDown </p><p>控制台抓图 </p><p>setterm -dump n(n:1~7) </p><p>数据库 </p><p>mysql的数据库存放在地方 </p><p>/var/lib/mysql </p><p>从mysql中导出和导入数据 </p><p>mysqldump 数据库名 &gt; 文件名 #导出数据库 </p><p>mysqladmin create 数据库名 #建立数据库 </p><p>mysql 数据库名 &lt; 文件名 #导入数据库 </p><p>忘了mysql的root口令怎么办 </p><p>sudo /etc/init.d/mysql stop </p><p>sudo mysqld_safe –skip-grant-tables </p><p>sudo mysqladmin -u user password ‘newpassword” </p><p>sudo mysqladmin flush-privileges </p><p>修改mysql的root口令 </p><p>sudo mysqladmin -uroot -p password ‘你的新密码’ </p><p>其它 </p><p>下载网站文档 </p><p>wget -r -p -np -k<a href="http://www.21cn.com%20/" target="_blank" rel="noopener">http://www.21cn.com </a></p><p>· r：在本机建立服务器端目录结构； </p><p>· -p: 下载显示HTML文件的所有图片； </p><p>· -np：只下载目标站点指定目录及其子目录的内容； </p><p>· -k: 转换非相对链接为相对链接。 </p><p>如何删除Totem电影播放机的播放历史记录 </p><p>rm ~/.recently-used </p><p>如何更换gnome程序的快捷键 </p><p>点击菜单，鼠标停留在某条菜单上，键盘输入任意你所需要的键，可以是组合键，会立即生效； 如果要清除该快捷键，请使用backspace </p><p>vim 如何显示彩色字符 </p><p>sudo cp /usr/share/vim/vimcurrent/vimrc_example.vim /usr/share/vim/vimrc </p><p>如何在命令行删除在会话设置的启动程序 </p><p>cd ~/.config/autostart rm 需要删除启动程序 </p><p>如何提高wine的反应速度 </p><p>sudo sed -ie ‘/GBK/,/^}/d’ /usr/share/X11/locale/zh_CN.UTF-8/XLC_LOCALE </p><p>chgrp </p><p>[语法]: chgrp [-R] 文件组 文件… </p><p><a href="改变文件的存取模式，存取模式可表示为数字或符号串，例如：">说明</a>： 文件的GID表示文件的文件组，文件组可用数字表示， 也可用一个有效的组名表示，此命令改变一个文件的GID，可参看chown。 </p><p>-R 递归地改变所有子目录下所有文件的存取模式 </p><p>[例子]:<br>chgrp group file 将文件 file 的文件组改为 group<br>chmod </p><p>[语法]: chmod [-R] 模式 文件… </p><p>或 chmod [ugoa] {+|-|=} [rwxst] 文件… </p><p>chmod nnnn file ， n为0-7的数字，意义如下: </p><p>4000 运行时可改变UID </p><p>2000 运行时可改变GID </p><p>1000 置粘着位 </p><p>0400 文件主可读 </p><p>0200 文件主可写 </p><p>0100 文件主可执行 </p><p>0040 同组用户可读 </p><p>0020 同组用户可写 </p><p>0010 同组用户可执行 </p><p>0004 其他用户可读 </p><p>0002 其他用户可写 </p><p>0001 其他用户可执行 </p><p>nnnn 就是上列数字相加得到的，例如 chmod 0777 file 是指将文件 file 存取权限置为所有用户可读可写可执行。 </p><p>-R 递归地改变所有子目录下所有文件的存取模式 </p><p>u 文件主 </p><p>g 同组用户 </p><p>o 其他用户 </p><p>a 所有用户 </p><ul><li>增加后列权限 </li></ul><ul><li>取消后列权限 </li></ul><p>= 置成后列权限 </p><p>r 可读 </p><p>w 可写 </p><p>x 可执行 </p><p>s 运行时可置UID </p><p>t 运行时可置GID </p><p>[例子]: </p><p>chmod 0666 file1 file2 将文件 file1 及 file2 置为所有用户可读可写 </p><p>chmod u+x file 对文件 file 增加文件主可执行权限 </p><p>chmod o-rwx 对文件file 取消其他用户的所有权限 </p><p>chown </p><p>[语法]: chown [-R] 文件主 文件… </p><p><a href="改变文件的存取模式，存取模式可表示为数字或符号串，例如：">说明</a>: 文件的UID表示文件的文件主，文件主可用数字表示， 也可用一个有效的用户名表示，此命令改变一个文件的UID，仅当此文件的文件主或超级用户可使用。 </p><p>-R 递归地改变所有子目录下所有文件的存取模式 </p><p>[例子]: </p><p>chown mary file 将文件 file 的文件主改为 mary </p><p>chown 150 file 将文件 file 的UID改为150 </p><p>Ubuntu命令行下修改网络配置 </p><p>以eth0为例 </p><p>1. 以DHCP方式配置网卡 </p><p>编辑文件/etc/network/interfaces: </p><p>sudo vi /etc/network/interfaces </p><p>并用下面的行来替换有关eth0的行: </p><p>The primary network interface - use DHCP to find our address </p><p>auto eth0 </p><p>iface eth0 inet dhcp </p><p>用下面的命令使网络设置生效: </p><p>sudo /etc/init.d/networking restart </p><p>当然,也可以在命令行下直接输入下面的命令来获取地址 </p><p>sudo dhclient eth0 </p><p>2. 为网卡配置静态IP地址 </p><p>编辑文件/etc/network/interfaces: </p><p>sudo vi /etc/network/interfaces </p><p>并用下面的行来替换有关eth0的行: </p><p>The primary network interface </p><p>auto eth0 </p><p>iface eth0 inet static </p><p>address 192.168.3.90 </p><p>gateway 192.168.3.1 </p><p>netmask 255.255.255.0 </p><p>network 192.168.3.0 </p><p>broadcast 192.168.3.255 </p><p>将上面的ip地址等信息换成你自己就可以了. </p><p>用下面的命令使网络设置生效: </p><p>sudo /etc/init.d/networking restart </p><p>3. 设定第二个IP地址(虚拟IP地址) </p><p>编辑文件/etc/network/interfaces: </p><p>sudo vi /etc/network/interfaces </p><p>在该文件中添加如下的行: </p><p>auto eth0:1 </p><p>iface eth0:1 inet static </p><p>address 192.168.1.60 </p><p>netmask 255.255.255.0 </p><p>network x.x.x.x </p><p>broadcast x.x.x.x </p><p>gateway x.x.x.x </p><p>根据你的情况填上所有诸如address,netmask,network,broadcast和gateways等信息. </p><p>用下面的命令使网络设置生效: </p><p>sudo /etc/init.d/networking restart </p><p>4. 设置主机名称(hostname) </p><p>使用下面的命令来查看当前主机的主机名称: </p><p>sudo /bin/hostname </p><p>使用下面的命令来设置当前主机的主机名称: </p><p>sudo /bin/hostname newname </p><p>系统启动时,它会从/etc/hostname来读取主机的名称. </p><p>5. 配置DNS </p><p>首先,你可以在/etc/hosts中加入一些主机名称和这些主机名称对应的IP地址,这是简单使用本机的静态查询. </p><p>要访问DNS 服务器来进行查询,需要设置/etc/resolv.conf文件. </p><p>假设DNS服务器的IP地址是192.168.3.2, 那么/etc/resolv.conf文件的内容应为: </p><p>search test.com </p><p>nameserver 192.168.3.2 </p><p>安装AMP服务 </p><p>如果采用Ubuntu Server CD开始安装时，可以选择安装，这系统会自动装上apache2,php5和mysql5。下面主要说明一下如果不是安装的Ubuntu server时的安装方法。 </p><p>用命令在Ubuntu下架设Lamp其实很简单，用一条命令就完成。在终端输入以下命令： </p><p>sudo apt-get install apache2 mysql-server php5 php5-mysql php5-gd phpmyadmin </p><p>装好后，mysql管理员是root，无密码，通过<a href="http://localhost/phpmyadmin" target="_blank" rel="noopener">http://localhost/phpmyadmin</a>就可以访问mysql了 </p><p>修改 MySql 密码 </p><p>终端下输入： </p><p>mysql -u root </p><p>mysql&gt; GRANT ALL PRIVILEGES ON <em>.</em> TO root@localhost IDENTIFIED BY “123456″; </p><p>’123456‘是root的密码，可以自由设置，但最好是设个安全点的。 </p><p>mysql&gt; quit; 退出mysql </p><p>apache2的操作命令 </p><p>启动：#sudo /etc/init.d/apache2 start </p><p>重启：#sudo /etc/init.d/apache2 restart </p><p>关闭：#sudo /etc/init.d/apache2 stop </p><p>apache2的默认主目录：/var/www/ </p><p>Ubuntu 7.10 更换软件源、更新系统 </p><p>网通建议用台湾的源，电信就用cn99 </p><p>在终端输入: #sudo gedit /etc/apt/sources.list </p><p>Ubuntu.cn99.com 更新服务器（江苏省常州市电信，推荐电信用户使用。） </p><p>deb <a href="http://ubuntu.cn99.com/ubuntu/" target="_blank" rel="noopener">http://ubuntu.cn99.com/ubuntu/</a> gutsy main restricted universe multiverse </p><p>deb <a href="http://ubuntu.cn99.com/ubuntu/" target="_blank" rel="noopener">http://ubuntu.cn99.com/ubuntu/</a> gutsy-security main restricted universe multiverse </p><p>deb <a href="http://ubuntu.cn99.com/ubuntu/" target="_blank" rel="noopener">http://ubuntu.cn99.com/ubuntu/</a> gutsy-updates main restricted universe multiverse </p><p>mirror.rootguide.org更新服务器 (上海市 电信): </p><p>deb <a href="http://mirror.rootguide.org/ubuntu/" target="_blank" rel="noopener">http://mirror.rootguide.org/ubuntu/</a> gutsy main restricted universe multiverse </p><p>deb-src <a href="http://mirror.rootguide.org/ubuntu/" target="_blank" rel="noopener">http://mirror.rootguide.org/ubuntu/</a> gutsy main restricted universe multiverse </p><p>deb <a href="http://mirror.rootguide.org/ubuntu/" target="_blank" rel="noopener">http://mirror.rootguide.org/ubuntu/</a> gutsy-updates main restricted universe multiverse </p><p>Mirror.lupaworld.com 更新服务器（浙江省杭州市电信，亚洲地区官方更新服务器） </p><p>deb <a href="http://cn.archive.ubuntu.com/ubuntu" target="_blank" rel="noopener">http://cn.archive.ubuntu.com/ubuntu</a> gutsy main restricted universe multiverse </p><p>deb <a href="http://cn.archive.ubuntu.com/ubuntu" target="_blank" rel="noopener">http://cn.archive.ubuntu.com/ubuntu</a> gutsy-security main restricted universe multiverse </p><p>deb <a href="http://cn.archive.ubuntu.com/ubuntu" target="_blank" rel="noopener">http://cn.archive.ubuntu.com/ubuntu</a> gutsy-updates main restricted universe multiverse </p><p>ubuntu.cnsite.org 更新服务器（福建省福州市 电信） </p><p>deb <a href="http://ubuntu.cnsite.org/ubuntu/" target="_blank" rel="noopener">http://ubuntu.cnsite.org/ubuntu/</a> gutsy main restricted universe multiverse </p><p>deb-src <a href="http://ubuntu.cnsite.org/ubuntu/" target="_blank" rel="noopener">http://ubuntu.cnsite.org/ubuntu/</a> gutsy main restricted universe multiverse </p><p>deb <a href="http://ubuntu.cnsite.org/ubuntu/" target="_blank" rel="noopener">http://ubuntu.cnsite.org/ubuntu/</a> gutsy-updates main restricted universe multiverse </p><p>清华大学 更新服务器（教育网，推荐校园网和网通用户使用） </p><p>deb <a href="http://mirror9.net9.org/ubuntu/" target="_blank" rel="noopener">http://mirror9.net9.org/ubuntu/</a> gutsy main multiverse restricted universe </p><p>deb <a href="http://mirror9.net9.org/ubuntu/" target="_blank" rel="noopener">http://mirror9.net9.org/ubuntu/</a> gutsy-backports main multiverse restricted universe </p><p>deb <a href="http://mirror9.net9.org/ubuntu/" target="_blank" rel="noopener">http://mirror9.net9.org/ubuntu/</a> gutsy-proposed main multiverse restricted universe </p><p>将里面乱七八糟的东西删了，将你复制的源列表粘贴到里面，保存退出。 </p><p>在终端输入 </p><p>sudo apt-get update </p><p>sudu apt-get upgrade </p><p>这样便更新以及升级了系统。 </p><p>桌面汉化： </p><p>System&gt;Language Support&gt;Chinese选项勾打上。 </p><p>安装解码器、flashplayer、java虚拟机、微软字体 </p><p>这是ubuntu推出的一个新软件包，将一次性将上面几个东东自动装好 </p><p>在终端输入 </p><p>sudo apt-get install ubuntu-restricted-extras </p><p>FireFox 中安装 FlashPlayer 插件 </p><p>先下载插件: install_flash_player_9_linux.tar.gz </p><p>tar -zxf install_flash_player_9_linux.tar.gz </p><p>./flashplayer-installer </p><p>回答(y/n/q)? n/q </p><p>sudo cp libflashplayer.so /usr/lib/firefox/plugins </p><p>启动 firefox 即可！ </p><p>安装媒体播放器 </p><p>安装的是mplayer </p><p>终端输入：#sudo apt-get install mplayer mozilla-mplayer totem-xine libxine-extracodecs </p><p>另外需要一个w32codecs文件，是用来支持那些私有媒体格式的解码器，源里已经没有w32codecs了，我们可以从这里下载那个后缀为.deb的安装 </p><p><a href="http://www.debian-multimedia.org/pool/main/w/w32codecs/%C2%A0" target="_blank" rel="noopener">http://www.debian-multimedia.org/pool/main/w/w32codecs/ </a></p><p>mplayer调试(视频、字幕) </p><p>启动mplayer,右键－&gt;Preferences－&gt;Video </p><p>Available drivers选择xv </p><p>然后进入Font标签 Font里选择一个中文字体，Encoding里设置为Simplified Chinese charset (CP936) </p><p>安装下载工具（多线程下载、BT下载、电驴） </p><p>还是终端输入：#sudo apt-get install d4x amule azureus </p><p>即可。 </p><p>或者把 beryl-manager添加到启动项内 </p><p>字体更换 </p><p>我推荐大家使用文泉驿字体，在 </p><p><a href="http://wqy.sourceforge.net%20/" target="_blank" rel="noopener">http://wqy.sourceforge.net </a></p><p>下载deb包安装 </p><p>在“系统“－&gt;”首选项“－&gt;”字体“中调整字体 </p><p>apt下载的deb包清理 </p><p>在使用完apt后，系统下载的deb包会留存在硬盘里，我们可以把它们删除，释放硬盘空间。 </p><p>终端输入：#sudo apt-get clean </p><p>安装rar压缩、解压工具 </p><p>终端输入：#sudo apt-get install rar unrar </p><p>启用root（最高权限）帐户 </p><p>终端输入：#sudo passwd root </p><p>输入你希望的root用户的密码 </p><p>安装QQ </p><p>终端输入：#sudo apt-get install eva </p><p>便可安装eva了，如果你是使用scim(选择中文语言支持的自动安装的就是scim)，为了可以在eva里面输入文字，要在终端输入：sudo apt-get install scim-qtimm </p><p>系统会安装支持QT的scim插件，这样你就可以使用eva聊qq了。 </p><p>显卡驱动安装 </p><p>进入“系统”－&gt;“系统管理”－&gt;“受限驱动管理器” </p><p>找到你的显卡，把那个框点成对号，会提示你安装显卡驱动，然后按照提示一步一步安装完毕，重启即可。 </p><p>beryl的安装 </p><p>你的系统在安装完毕之后就已经有了一个内置的桌面效果软件（能实现简单的桌面特效，包括3D立方体），使用方法是（必须将显卡驱动装好）进入“系统”“首选项”“桌面效果”，点击“启用桌面效果”，如果你需要使用3D立方体桌面，那么选中“立方体上的工作区”即可。 </p><p>如果你对这个简单的桌面特效工具不太满意，想追求更华丽的桌面，那么安装beryl仍然是个很好的选择。如今安装beryl不会像以前一样麻烦了，feisty的源里已经有了beryl的软件包，我们只需要在终端里输入： </p><p>sudo apt-get install beryl-core beryl-plugins beryl-plugins-data emerald beryl-settings beryl-manager beryl beryl-dev emerald-themes </p><p>安装完毕即可了。 </p><p>启动方法：“应用程序”－&gt;”系统工具”－&gt;”Beryl Manager” </p><p>或者直接在终端输入：#beryl-manager </p><p>如何设定/改变/启用 root 使用者的密码? </p><p>sudo passwd root </p><p>为了启用 root 帐号 (也就是 设置一个口令) 使用: </p><p>sudo passwd root </p><p>当你使用完毕后屏蔽 root 帐号 使用: </p><p>sudo passwd -l root </p><p>这个将锁住 root 帐号. </p><p>如何在终端机模式下切换到 root 身份? </p><p>sudo -s -H </p><p>Password: &lt;在这注明您的密码&gt; </p><p>安装VNC server </p><p>第一步, 获取安装文件 </p><p>sudo apt-get install vnc4server </p><p>第二步, 修改VNC Password, 6-8位 </p><p>vncpasswd </p><p>Password: <strong>**</strong> </p><p>Verify:<strong>*</strong> </p><p>第三步, 修改配置 </p><p>系统-&gt;首选项-&gt;远程桌面 </p><p>选择-&gt;请求用户输入此密码-&gt;输入至少6位密码 </p><p>第四步, 启动VNC server </p><p>vncserver </p><p>第五步，通过客户端连接 </p><p>vncviewer 192.168.0.1 </p><p>安装MS字体 </p><p>sudo apt-get install msttcorefonts </p><p>vim配置 </p><p>1) 首先安装 vim 完整版本 </p><p>sudo apt-get install vim-full </p><p>2) vim中文在线帮助 </p><p>a. 先下载文档 vimcdoc-1.5.0.tar.gz </p><p>b. 解压, 执行./vimcdoc.sh, vi里面, 执行:help, 就都是中文的了. </p><p>3) 启用本地配置 VIM version 7.1 (说明文档) </p><p>cp etc/vim/vimrc ~/.vimrc </p><p>vim ~/.vimrc </p><p>“”””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””” </p><p>“ 一般设定 </p><p>“”””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””” </p><p>“ 设定默认解码 </p><p>set fenc=utf-8 </p><p>set fencs=utf-8,usc-bom,euc-jp,gb18030,gbk,gb2312,cp936 </p><p>“ 不要使用vi的键盘模式，而是vim自己的 </p><p>set nocompatible </p><p>“ history文件中需要记录的行数 </p><p>set history=100 </p><p>“ 在处理未保存或只读文件的时候，弹出确认 </p><p>set confirm </p><p>“ 与windows共享剪贴板 </p><p>set clipboard+=unnamed </p><p>“ 侦测文件类型 </p><p>filetype on </p><p>“ 载入文件类型插件 </p><p>filetype plugin on </p><p>“ 为特定文件类型载入相关缩进文件 </p><p>filetype indent on </p><p>“ 保存全局变量 </p><p>set viminfo+=! </p><p>“ 带有如下符号的单词不要被换行分割 </p><p>set iskeyword+=_,$,@,%,#,- </p><p>“ 语法高亮 </p><p>syntax on </p><p>“ 高亮字符，让其不受100列限制 </p><p>:highlight OverLength ctermbg=red ctermfg=white guibg=red guifg=white </p><p>:match OverLength ‘\%101v.*’ </p><p>“ 状态行颜色 </p><p>highlight StatusLine guifg=SlateBlue guibg=Yellow </p><p>highlight StatusLineNC guifg=Gray guibg=White </p><p>“”””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””” </p><p>“ 文件设置 </p><p>“”””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””” </p><p>“ 不要备份文件（根据自己需要取舍） </p><p>set nobackup </p><p>“ 不要生成swap文件，当buffer被丢弃的时候隐藏它 </p><p>setlocal noswapfile </p><p>set bufhidden=hide </p><p>“ 字符间插入的像素行数目 </p><p>set linespace=0 </p><p>“ 增强模式中的命令行自动完成操作 </p><p>set wildmenu </p><p>“ 在状态行上显示光标所在位置的行号和列号 </p><p>set ruler </p><p>set rulerformat=%20(%2*%&lt;%f%=\ %m%r\ %3l\ %c\ %p%%%) </p><p>“ 命令行（在状态行下）的高度，默认为1，这里是2 </p><p>set cmdheight=2 </p><p>“ 使回格键（backspace）正常处理indent, eol, start等 </p><p>set backspace=2 </p><p>“ 允许backspace和光标键跨越行边界 </p><p>set whichwrap+=&lt;,&gt;,h,l </p><p>“ 可以在buffer的任何地方使用鼠标（类似office中在工作区双击鼠标定位） </p><p>set mouse=a </p><p>set selection=exclusive </p><p>set selectmode=mouse,key </p><p>“ 启动的时候不显示那个援助索马里儿童的提示 </p><p>set shortmess=atI </p><p>“ 通过使用: commands命令，告诉我们文件的哪一行被改变过 </p><p>set report=0 </p><p>“ 不让vim发出讨厌的滴滴声 </p><p>set noerrorbells </p><p>“ 在被分割的窗口间显示空白，便于阅读 </p><p>set fillchars=vert:\ ,stl:\ ,stlnc:\ </p><p>“”””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””” </p><p>“ 搜索和匹配 </p><p>“”””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””” </p><p>“ 高亮显示匹配的括号 </p><p>set showmatch </p><p>“ 匹配括号高亮的时间（单位是十分之一秒） </p><p>set matchtime=5 </p><p>“ 在搜索的时候忽略大小写 </p><p>set ignorecase </p><p>“ 不要高亮被搜索的句子（phrases） </p><p>set nohlsearch </p><p>“ 在搜索时，输入的词句的逐字符高亮（类似firefox的搜索） </p><p>set incsearch </p><p>“ 输入:set list命令是应该显示些啥？ </p><p>set listchars=tab:|\ ,trail:.,extends:&gt;,precedes:&lt;,eol:$ </p><p>“ 光标移动到buffer的顶部和底部时保持3行距离 </p><p>set scrolloff=3 </p><p>“ 不要闪烁 </p><p>set novisualbell </p><p>“ 我的状态行显示的内容（包括文件类型和解码） </p><p>set statusline=%F%m%r%h%w\ [FORMAT=%{&amp;ff}]\ [TYPE=%Y]\ [POS=%l,%v][%p%%]\ %{strftime(\”%d/%m/%y\ -\ %H:%M\”)} </p><p>“ 总是显示状态行 </p><p>set laststatus=2 </p><p>“”””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””” </p><p>“ 文本格式和排版 </p><p>“”””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””” </p><p>“ 自动格式化 </p><p>set formatoptions=tcrqn </p><p>“ 继承前一行的缩进方式，特别适用于多行注释 </p><p>set autoindent </p><p>“ 为C程序提供自动缩进 </p><p>set smartindent </p><p>“ 使用C样式的缩进 </p><p>set cindent </p><p>“ 制表符为4 </p><p>set tabstop=4 </p><p>“ 统一缩进为4 </p><p>set softtabstop=4 </p><p>set shiftwidth=4 </p><p>“ 不要用空格代替制表符 </p><p>set noexpandtab </p><p>“ 不要换行 </p><p>set nowrap </p><p>“ 在行和段开始处使用制表符 </p><p>set smarttab </p><p>“”””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””” </p><p>“ CTags的设定 </p><p>“”””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””” </p><p>“ 按照名称排序 </p><p>let Tlist_Sort_Type = “name” </p><p>“ 在右侧显示窗口 </p><p>let Tlist_Use_Right_Window = 1 </p><p>“ 压缩方式 </p><p>let Tlist_Compart_Format = 1 </p><p>“ 如果只有一个buffer，kill窗口也kill掉buffer </p><p>let Tlist_Exist_OnlyWindow = 1 </p><p>“ 不要关闭其他文件的tags </p><p>let Tlist_File_Fold_Auto_Close = 0 </p><p>“ 不要显示折叠树 </p><p>let Tlist_Enable_Fold_Column = 0 </p><p>“”””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””” </p><p>“ Autocommands </p><p>“”””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””””” </p><p>“ 只在下列文件类型被侦测到的时候显示行号，普通文本文件不显示 </p><p>if has(“autocmd”) </p><p>autocmd FileType xml,html,c,cs,java,perl,shell,bash,cpp,python,vim,php,ruby set number </p><p>autocmd FileType xml,html vmap</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;一、文件/文件夹管理&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;ls 列出当前目录文件（不包括隐含文件） &lt;/p&gt;
&lt;p&gt;ls -a 列出当前目录文件（包括隐含文件） &lt;/p&gt;
&lt;p&gt;ls -l 列出当前目录下文件的详细信息 &lt;/p&gt;
&lt;p&gt;cd .. 回当前目录的上一级目录&lt;br&gt;
    
    </summary>
    
    
      <category term="Ubuntu" scheme="https://dannieldylan.github.io/danniel/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>MySQL数据库面试小结</title>
    <link href="https://dannieldylan.github.io/danniel/2018/04/14/%E6%95%B0%E6%8D%AE%E5%BA%93%E9%9D%A2%E8%AF%95/"/>
    <id>https://dannieldylan.github.io/danniel/2018/04/14/数据库面试/</id>
    <published>2018-04-14T09:00:48.000Z</published>
    <updated>2018-06-12T05:10:15.336Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数据库面试"><a href="#数据库面试" class="headerlink" title="数据库面试"></a><center>数据库面试</center></h3><h5 id="三范式是什么？"><a href="#三范式是什么？" class="headerlink" title="三范式是什么？"></a>三范式是什么？</h5><ul><li>第一范式（1NF）：数据库表中的字段都是单一属性的，不可再分。这个单一属性由基本类型构成，包括整型、实数、字符型、逻辑型、日期型等。</li><li>第二范式（2NF）：数据库表中不存在非关键字段对任一候选关键字段的部分函数依赖（部分函数依赖指的是存在组合关键字中的某些字段决定非关键字段的情况），也即所有非关键字段都完全依赖于任意一组候选关键字。</li><li>第三范式（3NF）：在第二范式的基础上，数据表中如果不存在非关键字段对任一候选关键字段的传递函数依赖则符合第三范式。所谓传递函数依赖，指的是如果存在”A → B → C”的决定关系，则C传递函数依赖于A。因此，满足第三范式的数据库表应该不存在如下依赖关系： 关键字段 → 非关键字段x → 非关键字段y<a id="more"></a></li><li>小结：<pre><code>- 第一范式：字段是最小的单元不可再分- 第二范式：在满足第一范式的基础上，表中的字段必须完全依赖于全部主动而非部分主键。&gt;其他字段组成的这行记录和主键表示的是同一个东西，而主键是唯一的- 第三范式：满足第二范式，非主键外的所有字段必须互不依赖    &gt;只在一个地方存储，不重复出现在多张表中，可以认为是消除传递依赖</code></pre></li></ul><h5 id="drop、delete与truncate分别在什么场景之下使用？"><a href="#drop、delete与truncate分别在什么场景之下使用？" class="headerlink" title="drop、delete与truncate分别在什么场景之下使用？"></a>drop、delete与truncate分别在什么场景之下使用？</h5><ul><li>drop table<ul><li>属于DDL,不可回滚，不可带where，表内容和结构删除，删除速度快</li></ul></li><li>truncate table<ul><li>属于DDL，不可回滚，不可带where，表内容删除，删除速度快。</li></ul></li><li>delete from<ul><li>属于DML，可回滚，可带where，表结构在，表内容要看where执行的情况，删除速度慢，需要逐行删除</li><li>注意：不再需要一张表的时候，用drop，想删除部分数据行时候，并且带上了where字句，保留表而删除所有数据的时候用truncate</li></ul></li></ul><h5 id="索引是什么？有什么作用以及优缺点"><a href="#索引是什么？有什么作用以及优缺点" class="headerlink" title="索引是什么？有什么作用以及优缺点"></a>索引是什么？有什么作用以及优缺点</h5>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;数据库面试&quot;&gt;&lt;a href=&quot;#数据库面试&quot; class=&quot;headerlink&quot; title=&quot;数据库面试&quot;&gt;&lt;/a&gt;&lt;center&gt;数据库面试&lt;/center&gt;&lt;/h3&gt;&lt;h5 id=&quot;三范式是什么？&quot;&gt;&lt;a href=&quot;#三范式是什么？&quot; class=&quot;headerlink&quot; title=&quot;三范式是什么？&quot;&gt;&lt;/a&gt;三范式是什么？&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;第一范式（1NF）：数据库表中的字段都是单一属性的，不可再分。这个单一属性由基本类型构成，包括整型、实数、字符型、逻辑型、日期型等。&lt;/li&gt;
&lt;li&gt;第二范式（2NF）：数据库表中不存在非关键字段对任一候选关键字段的部分函数依赖（部分函数依赖指的是存在组合关键字中的某些字段决定非关键字段的情况），也即所有非关键字段都完全依赖于任意一组候选关键字。&lt;/li&gt;
&lt;li&gt;第三范式（3NF）：在第二范式的基础上，数据表中如果不存在非关键字段对任一候选关键字段的传递函数依赖则符合第三范式。所谓传递函数依赖，指的是如果存在”A → B → C”的决定关系，则C传递函数依赖于A。因此，满足第三范式的数据库表应该不存在如下依赖关系： 关键字段 → 非关键字段x → 非关键字段y
    
    </summary>
    
    
      <category term="数据库" scheme="https://dannieldylan.github.io/danniel/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB数据库</title>
    <link href="https://dannieldylan.github.io/danniel/2018/04/13/Python%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C%E4%B9%8BMongoDB/"/>
    <id>https://dannieldylan.github.io/danniel/2018/04/13/Python数据库操作之MongoDB/</id>
    <published>2018-04-13T09:00:48.000Z</published>
    <updated>2018-06-12T05:03:05.600Z</updated>
    
    <content type="html"><![CDATA[<p><center>python数据库操作MySQL-MongoDB-Redis之二     MongoDB</center></p><p>####一  MongoDB 在win10下的安装<br><a href="https://www.mongodb.com/download-center?jmp=nav#community" target="_blank" rel="noopener">MongoDB官网</a></p><ol><li>从官网下载完安装包后，开始安装：（我这以最新的mongodb-win32-x86_64-2008plus-ssl-3.6.3-signed.msi版本举例）<br>安装过程：  custom是自定义安装选项，建议安装在非系统盘（C盘）上<br><img src="https://upload-images.jianshu.io/upload_images/11372882-37c1ab40fb4b2681.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1.png"><a id="more"></a>关键点来了，就在下一步操作：<br><img src="https://upload-images.jianshu.io/upload_images/11372882-246f50290beb4198.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="2.png"></li></ol><p>如果这不取消安装，会发现有的电脑死活安装不上，原因就在这compas问题上</p><ol start="2"><li>再安装可视化界面（compass）（<a href="https://www.mongodb.com/download-center?jmp=docs&amp;_ga=2.208589714.169613539.1518053388-361642939.1518053388#compass）" target="_blank" rel="noopener">https://www.mongodb.com/download-center?jmp=docs&amp;_ga=2.208589714.169613539.1518053388-361642939.1518053388#compass）</a><br>这样可以防止出现MongoDB安装不成功</li><li><p>现在配置启动MongoDB的服务以及将它设置为windows服务   </p><ul><li><p>使用快捷键快速呼出本地服务项： win+R 弹出运行框<img src="https://upload-images.jianshu.io/upload_images/11372882-c755860031e679e3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="3.png"></p></li><li><p>在出现的运行窗口中输入services.msc 然后按确定按钮，或者直接回城即可调出本地服务项<img src="https://upload-images.jianshu.io/upload_images/11372882-65b7a6e7fbddae7a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="5.png"><br><img src="https://upload-images.jianshu.io/upload_images/11372882-c168138e1b36d39d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="6.png"></p></li></ul></li></ol><pre><code>- 找到mongodb服务，嘿嘿这提前说了，这就是我们下一步需要配置的mongodb服务![7.png](https://upload-images.jianshu.io/upload_images/11372882-a21daf7757195e7a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)- 现在开始配置MongoDB服务：在cmd命令下跳转到D:\MongoDB\Server\3.6\bin目录下    - 先创建MongoDB的config配置文件 用记事本打开，输入以下内容    - datapath=D:\MongoDB\data    -  logpath=D:\MongoDB\log![11.png](https://upload-images.jianshu.io/upload_images/11372882-8dc8402ecbeed7df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)    -  可设置开机自启动，或者手动启动关闭，- 开启MongoDB服务，以管理员身份启动cmd命令窗口。切换到MongoDB下的bin目录下输入net start MongoDB  提示xxx服务正在启动 xxx服务已经启动成功，就可以输入mongo.exe运行客户端了。- 这里有个小点：想要直接输入mongo.exe就能运行MongoDB，前提要将它添加到系统的环境变量里面去，详见以下步骤- 找到此电脑标识![22.png](https://upload-images.jianshu.io/upload_images/11372882-b71da4a3bbcd6a89.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)- 右键选择属性![33.png](https://upload-images.jianshu.io/upload_images/11372882-be2a1bd202ddc1a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)- 选择高级系统设置[图片上传中...(44.png-7156b4-1523589231993-0)]- 详细步骤按序号进行（这种操作，使用任何软件都是异曲同工的事）![hah.png](https://upload-images.jianshu.io/upload_images/11372882-3347295567191c47.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</code></pre><h4 id="二-MongoDB在ubuntu下的安装"><a href="#二-MongoDB在ubuntu下的安装" class="headerlink" title="二 MongoDB在ubuntu下的安装"></a>二 MongoDB在ubuntu下的安装</h4><p>1.</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;center&gt;python数据库操作MySQL-MongoDB-Redis之二     MongoDB&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;####一  MongoDB 在win10下的安装&lt;br&gt;&lt;a href=&quot;https://www.mongodb.com/download-center?jmp=nav#community&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MongoDB官网&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;从官网下载完安装包后，开始安装：（我这以最新的mongodb-win32-x86_64-2008plus-ssl-3.6.3-signed.msi版本举例）&lt;br&gt;安装过程：  custom是自定义安装选项，建议安装在非系统盘（C盘）上&lt;br&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/11372882-37c1ab40fb4b2681.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;1.png&quot;&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="https://dannieldylan.github.io/danniel/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>MySQL数据库</title>
    <link href="https://dannieldylan.github.io/danniel/2018/04/10/python%E6%95%B0%E6%8D%AE%E5%BA%93%E6%93%8D%E4%BD%9C%E4%B9%8BMySQL/"/>
    <id>https://dannieldylan.github.io/danniel/2018/04/10/python数据库操作之MySQL/</id>
    <published>2018-04-10T09:00:48.000Z</published>
    <updated>2018-06-12T05:01:37.192Z</updated>
    
    <content type="html"><![CDATA[<h4 id="讲讲数据存储"><a href="#讲讲数据存储" class="headerlink" title="讲讲数据存储"></a>讲讲数据存储</h4><ol><li><strong>什么是数据库?</strong><br> 数据库(<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93/103728?fr=aladdin" target="_blank" rel="noopener">DataBase</a>)这个术语的用法很多,是一个以某种有组织的方式存储的数据集合,顾名思义它好比一个电子化文件柜(保存有组织的数据的容器),可以对其进行新增、查找、更新删除等操作。<br>2018年1月数据库排名TOP10（数据来源于网络）(<a href="https://db-engines.com/en/ranking" target="_blank" rel="noopener">https://db-engines.com/en/ranking</a>)<br><img src="https://upload-images.jianshu.io/upload_images/11372882-0baa2df18844f4a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Image (5).png"><a id="more"></a></li><li><strong>常用数据库有三种</strong></li></ol><table><thead><tr><th style="text-align:left">数据库名</th><th style="text-align:left">类型</th><th>用途</th></tr></thead><tbody><tr><td style="text-align:left">mysql</td><td style="text-align:left">关系型数据库</td><td>无所不能,受到真正的批评是它并不总是支持其他DBMS提供的功能和特性</td></tr><tr><td style="text-align:left">mongodb</td><td style="text-align:left">基于分布式文件存储的数据库</td><td>海量存储数据</td></tr><tr><td style="text-align:left">redis</td><td style="text-align:left">内存数据库</td><td>redis做高速缓存 ,可用来调度</td></tr></tbody></table><p>mongodb非关系型数据库，不需要太费心去考虑爬下来数据的关系结构，而且爬数据往往比较杂乱，不容易统一数据关系，mongodb存数据的时候也不需要关系检测，而且mongo缓存机制好一些，存数据也快一些。mongodb存储好后，假如需要清洗分析数据，我就会考虑将mongodb导入到mysql。</p><ol start="3"><li><strong>数据库之一:MySQL</strong><br>正如上述所说的,数据的所有存储、检索、管理和处理实际上是由数据库软件–DBMS(数据库管理系统)完成的,MySQL 是一种DBMS,是一种数据库软件。<br>为什么会有那么多的公司和开发人员使用MySQL呢？以下列出其原因：</li></ol><ul><li>成本:MySQL是开源的，一般可以免费使用（甚至可以免费修改）</li><li>性能：MySQL执行快</li><li>简单 MySQL很容易安装和使用<h4 id="MySQL如何安装？"><a href="#MySQL如何安装？" class="headerlink" title="MySQL如何安装？"></a>MySQL如何安装？</h4></li></ul><ol><li>MySQL for linux<br>Ubuntu、centos系统下 安装MySQL  这里就拿ubuntu举例<br><strong>首先：</strong><br>sudo apt-get update  #系统检测更新<br>sudo apt-get install mysql-server   #安装mysql服务<br>sudo mysql_secure_installation   #配置mysql安全脚本<br>系统将提示您在安装过程中创建 root 密码。选择一个安全的密码，并确保你记住它，因为你以后需要它。接下来，我们将完成 MySQL 的配置。<br>BUG点提示：<br>MySQL提示:The server quit without updating PID file问题的解决办法<br>出错地方：<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MySQL<span class="built_in"> server </span>PID file could <span class="keyword">not</span> be found![失败]</span><br><span class="line">Starting MySQL<span class="built_in">..</span>.The<span class="built_in"> server </span>quit without updating PID file (/usr/local/mysql/data/snsgou.pid).[失败]</span><br></pre></td></tr></table></figure></li></ol><p>问题可能原因有多种，具体什么原因最好的办法是先查看下错误日志，这里我就不一一举例了，因为这不是我的正题，还是来点简单粗暴的方式：<br><strong>直接删除mysql再安装</strong></p><ul><li>删除mysql<br>sudo apt-get autoremove –purge mysql-server-5.0sudo apt-get remove mysql-server<br>sudo apt-get autoremove mysql-server<br>sudo apt-get remove mysql-common (非常重要)</li><li>清理残留数据<br>dpkg -l |grep ^rc|awk ‘{print $2}’ |sudo xargs dpkg -P</li><li>安装mysql<br>sudo apt-get install mysql-server<br>sudo apt-get install mysql-client</li><li>检查mysql是否正在运行<br>一旦安装完成，MySQL服务器应该自动启动了，你可以在终端输入命令来检查MySQL服务器是否正在运行<br>sudo netstat -tap | grep mysql<br>能看到类似的运行结果<br>root@ubuntu:~# sudo netstat -tap | grep mysql<br>tcp        0      0 localhost.localdo:mysql <em>:</em> LISTEN 870/mysqld<br>如果服务器不能正常运行，您可以通过下列命令启动它：</li></ul><p>sudo /etc/init.d/mysql restart<br>通过上述命令检查之后，如果看到有mysql 的socket处于 listen 状态则表示安装成功。<br>　　登陆mysql数据库可以通过如下命令：</p><p>  mysql -u root -p<br>  -u 表示选择登陆的用户名， -p 表示登陆的用户密码，上面命令输入之后会提示输入密码，此时输入密码就可以登录到mysql。</p><ol start="2"><li>MySQL for win<br>MySQL官方下载地址（<a href="https://www.mysql.com/downloads/）" target="_blank" rel="noopener">https://www.mysql.com/downloads/）</a><br>MySQL Enterprise Edition  企业版<br>MySQL Cluster CGE 集群<br>MySQL Community Edition 社区版</li></ol><p>开始步入正题     <img src="https://upload-images.jianshu.io/upload_images/11372882-3f0600d27a8e817e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="ae4e363b52aeaa6368cef5528984f4bc.jpg"></p><ul><li>从官网下载包<br><img src="https://upload-images.jianshu.io/upload_images/11372882-e25cfa4164ed6f01.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="20180410161230.png"><br><img src="https://upload-images.jianshu.io/upload_images/11372882-11b075e9178fb256.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="20180410162014.png"><br><img src="https://upload-images.jianshu.io/upload_images/11372882-f14f0d60ddd8e655.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="1.png"><br><img src="https://upload-images.jianshu.io/upload_images/11372882-0da3cf1999522563.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="2.png"><br><img src="https://upload-images.jianshu.io/upload_images/11372882-a42b8fd5f7116646.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="3.png"></li><li>点击下载并完成后安装mysql<br>双击下载好的mysql安装文件“mysql-installer-community-5.7.21.0.msi”打开安装程序，打开后需要稍等一下<br><img src="https://upload-images.jianshu.io/upload_images/11372882-29d7e8b3dc6fa7ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="4.png"></li><li>选择安装类型（个人需求选项<br><img src="https://upload-images.jianshu.io/upload_images/11372882-d4766fca0aef7d1a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="5.png"></li><li>我这里选择自定义安装<br>ε=(´ο｀*)))唉  满桌面屏幕全是图片<br>直接找个详细教程的放一哈  （<a href="https://www.cnblogs.com/jjg0519/p/6753465.html）" target="_blank" rel="noopener">https://www.cnblogs.com/jjg0519/p/6753465.html）</a></li></ul><p>mysql可视化管理软件推荐使用Navicat for MySQL premium，记得一定要专业版哦 补丁网上一大堆，没事多google，多向度娘提问。<br>这里放个ubuntu的NAavicat for mysql安装及永久使用</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">Ubuntu Navicat for MySQL安装及永久使用</span><br><span class="line"></span><br><span class="line">首先登陆Navicat官网下载Linux版本： https://www.navicat.com.cn/download/navicat-premium</span><br><span class="line"></span><br><span class="line">1. 下载 navicat112_premium_cs_x64.tar.gz 文件</span><br><span class="line"></span><br><span class="line">2. 下载后解压tar文件</span><br><span class="line"></span><br><span class="line">tar -zxvf  /home/wilbur/download/navicat112_premium_cs_x64.tar.gz</span><br><span class="line"></span><br><span class="line">3. 解压后  进入解压后的目录运行命令：</span><br><span class="line">./start_navicat   </span><br><span class="line"></span><br><span class="line">OK，这样就完啦</span><br><span class="line"></span><br><span class="line">创建Navicat快捷方式，cd usr/share/applications，sudo vim navicat.desktop</span><br><span class="line"></span><br><span class="line">[Desktop Entry]</span><br><span class="line">Encoding=UTF-8</span><br><span class="line">Name=Navicat</span><br><span class="line">Comment=Navicat Premium</span><br><span class="line">Exec=/opt/Navicat/start_navicat</span><br><span class="line">Icon=/opt/Navicat/navicat.png</span><br><span class="line">Terminal=false</span><br><span class="line">StartupNotify=true</span><br><span class="line">Type=Application</span><br><span class="line">Categories=Application;Development;</span><br><span class="line"></span><br><span class="line"><span class="section">连接上数据库后里面的中文数据是乱码，如果是用的中文版，界面也会是乱码，需要修改字符集，修改方法:</span></span><br><span class="line"></span><br><span class="line">1.打开start_navicat文件，会看到 <span class="keyword">export</span> LANG=<span class="string">"en_US.UTF-8"</span> 将这句话改为 <span class="keyword">export</span> LANG=<span class="string">"zh_CN.UTF-8"</span></span><br><span class="line"></span><br><span class="line"><span class="section">2.查看系统支持的字符集: locale -a</span></span><br><span class="line"></span><br><span class="line"><span class="section">3.修改字符集: export LANG=zh_CN.utf8</span></span><br><span class="line"></span><br><span class="line">注意：start_navicat文件和终端locale命令的返回信息这一句：<span class="keyword">export</span> LANG=zh_CN.utf8一定要保持一致</span><br><span class="line"></span><br><span class="line">4.还需要修改数据库字符集。vim打开/etc/mysql/mysql.conf.d路径下的mysqld.cnf文件，</span><br><span class="line"></span><br><span class="line">   sudo vim /etc/mysql/mysql.conf.d/mysqld.cnf，</span><br><span class="line"></span><br><span class="line">   在[mysqld]段落中添加如下两行：</span><br><span class="line"></span><br><span class="line">   character-set-server=utf8</span><br><span class="line"></span><br><span class="line">   collation-server=utf8_general_ci</span><br><span class="line"></span><br><span class="line">   重启MySQL：/etc/init.d/mysql restart</span><br><span class="line"></span><br><span class="line">   输入密码登录：mysql -uroot -p</span><br><span class="line"></span><br><span class="line">   然后查看数据库字符集设置：</span><br><span class="line"></span><br><span class="line">  danniel@dylan:~$ mysql -u root -p</span><br><span class="line"></span><br><span class="line">   mysql&gt; show variables like 'character_set_%';</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   查看字符集排序设置：</span><br><span class="line"></span><br><span class="line">   mysql&gt; show variables like 'collation_%';</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   返回结果如图所示就大功告成了。</span><br></pre></td></tr></table></figure><p><strong><em>再推一个mysql工具  mycli  优于新手使用，毕竟在写sql语句时能有提示嘛，等玩六了，就还是直接用mysql写sql语句把</em></strong></p><h4 id="MySQL如何操作？"><a href="#MySQL如何操作？" class="headerlink" title="MySQL如何操作？"></a>MySQL如何操作？</h4><p>这在就不先聊了，可以回看我原先个人博客记录的笔记（<a href="https://dannieldylan.github.io/danniel/2018/01/21/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9F%A5%E8%AF%86%E5%B0%8F%E7%BB%93/）">https://dannieldylan.github.io/danniel/2018/01/21/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9F%A5%E8%AF%86%E5%B0%8F%E7%BB%93/）</a></p><p><strong><em>推荐书书籍<br>mysql必知必会  mysql技术内幕<br>redis开发与运维，redis实战<br>mongodb权威指南，mongodb管理与开发精要，mongodb实战。</em></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;讲讲数据存储&quot;&gt;&lt;a href=&quot;#讲讲数据存储&quot; class=&quot;headerlink&quot; title=&quot;讲讲数据存储&quot;&gt;&lt;/a&gt;讲讲数据存储&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;什么是数据库?&lt;/strong&gt;&lt;br&gt; 数据库(&lt;a href=&quot;https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%BA%93/103728?fr=aladdin&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;DataBase&lt;/a&gt;)这个术语的用法很多,是一个以某种有组织的方式存储的数据集合,顾名思义它好比一个电子化文件柜(保存有组织的数据的容器),可以对其进行新增、查找、更新删除等操作。&lt;br&gt;2018年1月数据库排名TOP10（数据来源于网络）(&lt;a href=&quot;https://db-engines.com/en/ranking&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://db-engines.com/en/ranking&lt;/a&gt;)&lt;br&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/11372882-0baa2df18844f4a1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; alt=&quot;Image (5).png&quot;&gt;
    
    </summary>
    
    
      <category term="数据库" scheme="https://dannieldylan.github.io/danniel/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Python知识点重温</title>
    <link href="https://dannieldylan.github.io/danniel/2018/04/10/%E7%9F%A5%E8%AF%86%E7%82%B9%E5%9B%9E%E9%A1%BE/"/>
    <id>https://dannieldylan.github.io/danniel/2018/04/10/知识点回顾/</id>
    <published>2018-04-10T09:00:48.000Z</published>
    <updated>2018-06-12T05:13:27.732Z</updated>
    
    <content type="html"><![CDATA[<h3 id="python知识点回顾"><a href="#python知识点回顾" class="headerlink" title="python知识点回顾"></a><center>python知识点回顾</center></h3><p>1、对不定长参数的理解？</p><ul><li>不定长参数有两种：*args、**kwargs</li><li>当我们不确定传入的参数的个数或想传入元组时，可以用* args</li><li>当我们想传入关键字参数或者字典时可以使用**kwargs</li></ul><p>2、对缺省参数的理解？</p><ul><li>缺省参数指调用函数的时候没有传入参数的情况下，调用默认的参数，传入参数的时候，所传入的参数会替代默认参数</li></ul><p>3、什么是lambda函数？它有什么好处？写一个匿名函数求两个数的和。<br>lambda函数就是匿名函数；使用lambda函数能创建小型匿名函数，这种函数得名于省略了用def声明函数的标准步骤<br>z=lambda x，y：x+y  print（f（2017，2018）</p><p>4、浅拷贝和深拷贝的区别？</p><ul><li>浅拷贝是将对象顶层拷贝，拷贝了引用，并没有拷贝内容，原对象改变新对象也跟着改变</li><li>深拷贝是对一个对象的所有层次的拷贝（递归），但是可变类型只拷贝顶层，不可变类型依然是原来的对象</li><li>浅拷贝对于可变类型和不可变类型是不同的，对于可变类型只拷贝顶层，不可变类型依然是原来的对象。</li></ul><p>5、什么是可变、不可变？元组里添加字典，会改变id吗？</p><ul><li>可变不可变指的是内存中的值是否可以被改变，不可变类型指的是对象所在内存块里面的值不可以改变，有数值、字符串、元组；可变类型则是可以改变，主要有列表、字典</li><li>元组的顶层元素中包含可变类型，在可变类型中修改或添加字典id不会改变</li></ul><p>6、生成器、迭代器的区别？</p><ul><li>在python中，边循环边计算的机制，称为生成器：generator，生成器是可迭代对象，但是生成器可以通过send传值返回到前面    <strong>yield（）方法</strong></li><li>迭代器：iterator 对象从集合的第一个元素开始访问，直到所有的元素被访问完结束，迭代器只能往前不会后退</li><li>迭代器是一个可以记住遍历的位置的对象，迭代器不会一次性把所有元素加载到内存，而是需要的时候才生产返回结果   <strong><strong>iter</strong>,<strong>next</strong>方法</strong><br>思路：<br>容器（container）是一种把多个元素组织在一起的数据结构，容器中的元素可以逐个地迭代获取，可以用in，not in 关键字判断元素是否包含在容器中。常见的容器对象有 list，set，dict，string，tuple<br>很多容器都是可迭代对象（bloom filter也是容器，但不可迭代，可以用来检测某个元素是否包含在容器中，但是并不能从容器中获取其中的每一个值，因为bloom filter压根就没把元素存储在容器中，而是通过一个散列函数映射成一个值保存在数组中）<br>比如处于打开状态的files，sockets等等。但凡是可以返回一个迭代器的对象都可称之为可迭代对象</li></ul><p>7、生成器表达式（generator expression）<br>生成器表达式列表推倒式的生成器版本，看起来像列表推导式，但是它返回的是一个生成器对象而不是列表对象。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;python知识点回顾&quot;&gt;&lt;a href=&quot;#python知识点回顾&quot; class=&quot;headerlink&quot; title=&quot;python知识点回顾&quot;&gt;&lt;/a&gt;&lt;center&gt;python知识点回顾&lt;/center&gt;&lt;/h3&gt;&lt;p&gt;1、对不定长参数的理解？&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="python" scheme="https://dannieldylan.github.io/danniel/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python的LOGGING模块</title>
    <link href="https://dannieldylan.github.io/danniel/2018/04/10/python%E6%97%A5%E8%AE%B0--log%E6%97%A5%E5%BF%97/"/>
    <id>https://dannieldylan.github.io/danniel/2018/04/10/python日记--log日志/</id>
    <published>2018-04-09T17:55:05.000Z</published>
    <updated>2018-04-10T08:57:33.421Z</updated>
    
    <content type="html"><![CDATA[<pre><code>自从开通了简书,我就每天拿着刷刷一波美文,时不时想着趁程序运行着,来简书上记录生活点点滴滴。</code></pre><p> 接着上篇文章写吧,先说说日志:<br> <a id="more"></a></p><ol><li>日志的作用<br>通过log的分析,可以方便用户了解系统或软件、程序应用的运行情况。web方面,如果你的应用log足够丰富,那可以分析用户的操作行为,喜好、地域分布或其他更多信息。爬虫方面,通过设置不同级别的等级,那么可以得到实时的状况反馈,及时发现问题并快速定位,解决问题,甚至有时可以补救损失。<br>日志的作用可以简单总结三点：程序DEBUG调试，程序运行情况，是否有异常，软件程序运行是否有故障。<br>2.日志的等级</li></ol><table><thead><tr><th>LEVEL</th><th>description</th></tr></thead><tbody><tr><td>DEBUG</td><td>指出细粒度信息事件对调试应用程序是非常有帮助的，主要用于开发过程中打印一些运行信息</td></tr><tr><td>INFO</td><td>消息在粗粒度级别上突出强调应用程序的运行过程。打印一些你感兴趣的或者重要的信息，这个可以用于生产环境中输出程序运行的一些重要信息，但是不能滥用，避免打印过多的日志。</td></tr><tr><td>NOTICE</td><td></td></tr><tr><td>WARING</td><td>表明会出现潜在错误的情形，有些信息不是错误信息，但是也要给程序员的一些提示。</td></tr><tr><td>ERROR</td><td>指出虽然发生错误事件，但仍然不影响系统的继续运行。打印错误和异常信息，如果不想输出太多的日志，可以使用这个级别</td></tr><tr><td>CRITICAL</td><td></td></tr><tr><td>ALERT</td><td></td></tr><tr><td>EMERGENCY</td><td></td></tr><tr><td></td></tr></tbody></table><h4 id="进入主题吧-python的LOGGING模块"><a href="#进入主题吧-python的LOGGING模块" class="headerlink" title="进入主题吧,python的LOGGING模块"></a>进入主题吧,python的LOGGING模块</h4><p>logging模块简介:<br>    logging模块是Python的一个标准库模块，由标准库模块提供日志记录API的关键好处是所有Python模块都可以使用这个日志记录功能</p><ol><li><strong>logging模块的日志级别</strong></li></ol><table><thead><tr><th style="text-align:left">日志等级(level)</th><th style="text-align:left">描述(description)</th></tr></thead><tbody><tr><td style="text-align:left">DEBUG</td><td style="text-align:left">最详细的日志信息,典型应用场景是 问题诊断</td></tr><tr><td style="text-align:left">INFO</td><td style="text-align:left">信息详细程度仅次于DEBUG,通常只记录关键节点信息</td></tr><tr><td style="text-align:left">WARING</td><td style="text-align:left">当某些不期望的事情发生时记录的信息(如:版本问题,存储可用空间较低),但此时还能正常运行</td></tr><tr><td style="text-align:left">ERROR</td><td style="text-align:left">由于一个更严重的问题导致某些功能不能正常运行时记录的信息</td></tr><tr><td style="text-align:left">CRITICAL = FATAL</td><td style="text-align:left">当发生严重错误时,导致应用程序不能继续运行时记录的信息</td></tr></tbody></table><p>开发应用程序或部署开发环境时，可以使用DEBUG或INFO级别的日志获取尽可能详细的日志信息来进行开发或部署调试；应用上线或部署生产环境时，应该使用WARNING或ERROR或CRITICAL级别的日志来降低机器的I/O压力和提高获取错误日志信息的效率。日志级别的指定通常都是在应用程序的配置文件中进行指定的。</p><ol start="2"><li><strong>logging的基本用法</strong></li></ol><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#-*- coding:utf-8 -*-</span></span><br><span class="line">import logging</span><br><span class="line"><span class="meta">#指定logger的输出格式</span></span><br><span class="line">formatter = logging.Formatter(<span class="string">'%(asctime)s %(levelname)-8s: %(message)s'</span>)</span><br><span class="line"><span class="meta">#文件日志</span></span><br><span class="line">file_handler = logging.FieldHandler(<span class="string">'xxx.log'</span>)</span><br><span class="line">file_handler = setFormatter(formatter)  #可以通过setFormatter指定输出格式</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta"># 控制台日志</span></span><br><span class="line">console_handler = logging.StreamHandler(sys.<span class="keyword">stdout</span>)</span><br><span class="line">console_handler.formatter = formatter  # 也可以直接给formatter赋值</span><br><span class="line"></span><br><span class="line"><span class="meta"># 为logger添加的日志处理器</span></span><br><span class="line">logger.addHandler(file_handler)</span><br><span class="line">logger.addHandler(console_handler)</span><br><span class="line"></span><br><span class="line"><span class="meta"># 指定日志的最低输出级别，默认为WARN级别</span></span><br><span class="line">logger.setLevel(logging.INFO)</span><br><span class="line"></span><br><span class="line"><span class="meta"># 输出不同级别的log</span></span><br><span class="line">logger.debug(<span class="string">'this is debug info'</span>)</span><br><span class="line">logger.info(<span class="string">'this is information'</span>)</span><br><span class="line">logger.warn(<span class="string">'this is warning message'</span>)</span><br><span class="line">logger.error(<span class="string">'this is error message'</span>)</span><br><span class="line">logger.fatal(<span class="string">'this is fatal message, it is same as logger.critical'</span>)</span><br><span class="line">logger.critical(<span class="string">'this is critical message'</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">#移除一些日志处理</span></span><br><span class="line">logger.removeHandler(file_handler)</span><br></pre></td></tr></table></figure><ol start="3"><li><p><strong>scrapy中如何使用logging日志呢?</strong><br>为了让我们自己希望输出到终端的内容能容易看一些：<br>我们可以在setting中设置log级别<br> 在setting中添加一行（全部大写）：LOG_LEVEL = “WARNING”<br> 默认终端显示的是debug级别的log信息</p><p>通过在setting.py中进行以下设置可以被用来配置logging:(具体设置参考代码的<a href="https://dannieldylan.github.io/danniel/2018/04/07/python%E4%BD%BF%E7%94%A8crapy%E7%88%AC%E5%8F%96%E5%B0%8F%E7%8C%AA%E7%9F%AD%E7%A7%9F/#more">custom-settings</a>)</p><p>LOG_ENABLED 默认: True，启用logging<br>LOG_ENCODING 默认: ‘utf-8’，logging使用的编码<br>LOG_FILE 默认: None，在当前目录里创建logging输出文件的文件名<br>LOG_LEVEL 默认: ‘DEBUG’，log的最低级别<br>LOG_STDOUT 默认: False 如果为 True，进程所有的标准输出(及错误)将会被重定向到log中。例如，执行 print “hello” ，其将会在Scrapy log中显示</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#此种方法无法显示log位置</span></span><br><span class="line">import logging</span><br><span class="line">def process_item(self,item,spider):</span><br><span class="line">    logging.<span class="builtin-name">warning</span>(item)</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加__name__就能够显示log位置</span></span><br><span class="line">import logging</span><br><span class="line"><span class="attribute">logger</span>=logging.getLogger(__name__)</span><br><span class="line">def process_item(self,item,spider):</span><br><span class="line">    logging.<span class="builtin-name">warning</span>(item)</span><br></pre></td></tr></table></figure></li><li><p><strong>格式化输出日志</strong></p></li></ol><p>service_name = “Spider”<br>logger.error(‘%s service is down!’ % service_name)  # 使用python自带的字符串格式化，不推荐<br>logger.error(‘%s service is down!’, service_name)  # 使用logger的格式化，推荐<br>logger.error(‘%s service is %s!’, service_name, ‘down’)  # 多参数格式化<br>logger.error(‘{} service is {}’.format(service_name, ‘down’)) # 使用format函数，推荐</p><ol start="5"><li><strong>那现在就来说说Formatter日志写法吧</strong><br>Formatter 对象定义了log信息的结构和内容,构造时需要带两个参数:</li></ol><ul><li>格式化的模板fmt,默认会包含最近本的level和message信息</li><li>格式化的时间样式,默认为%Y-%m-%d %H:%M:%S   如:2018-04-10.<br>fmt中允许使用的变量可以参考如下表:</li></ul><table><thead><tr><th style="text-align:left">参数变量</th><th style="text-align:left">含义</th></tr></thead><tbody><tr><td style="text-align:left">%(name)s</td><td style="text-align:left">Logger的名字</td></tr><tr><td style="text-align:left">%(message)s</td><td style="text-align:left">用户输出的消息</td></tr><tr><td style="text-align:left">%(process)d 进程ID</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">%(threadName)s 线程名</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">%(thread)d 线程ID</td><td style="text-align:left"></td></tr><tr><td style="text-align:left">%(asctime)s</td><td style="text-align:left">字符串形式的当前时间。默认格式是“2003-07-08 16:49:45,896”。逗号后面的是毫秒</td></tr><tr><td style="text-align:left">%(relativeCreated)d</td><td style="text-align:left">输出日志信息时的，自Logger创建以来的毫秒数</td></tr><tr><td style="text-align:left">%(created)f</td><td style="text-align:left">当前时间，用UNIX标准的表示时间的浮点数表示</td></tr><tr><td style="text-align:left">%(lineno)d</td><td style="text-align:left">调用日志输出函数的语句所在的代码行</td></tr><tr><td style="text-align:left">%(funcName)s</td><td style="text-align:left">调用日志输出函数的函数名</td></tr><tr><td style="text-align:left">%(module)s</td><td style="text-align:left">调用日志输出函数的模块名</td></tr><tr><td style="text-align:left">%(filename)s</td><td style="text-align:left">调用日志输出函数的模块的文件名</td></tr><tr><td style="text-align:left">%(pathname)s</td><td style="text-align:left">调用日志输出函数的模块的完整路径名，可能没有</td></tr><tr><td style="text-align:left">%(levelno)s</td><td style="text-align:left">数字形式的日志级别</td></tr><tr><td style="text-align:left">%(levelname)s</td><td style="text-align:left">文本形式的日志级别</td></tr></tbody></table><ol start="6"><li><strong>日志重复输出的坑</strong><br> 你有可能会看到你的日志会重复显示多次,请注意是否使用了重复的handler<br> 暂时没出现打印日志错误,嘿嘿有可能是自己写的log需求不大吧,在公司里正儿八经的,这要记录日志,那要记录日志,估计重复可能性还是蛮大的。<br> 还是记录下来,以后会用到:<ul><li>调用basicConfig()方法时系统会默认创建一个handler,如果你再添加一个控制台handler时就会出现重复日志</li><li>每次调用get_logger()方法时都会添加一个新的handler 那岂不是很明显的呵呵了….建议全局只配logger一次</li></ul></li><li><strong>日志何去何从?</strong><br> 日志作为python中的标准库模块,也支持如过滤,文件锁等高级功能,暂时还没怎么应用就不扯犊子了 (<em>^▽^</em>)</li></ol><p><strong>感谢您的阅读,以上是本人遇到过或学习过程记录的笔记,水平有限,仅供参考,如果发现错误请及时联系作者,谢谢!</strong></p><p><strong><em>欢迎进我的简书文章(<a href="https://www.jianshu.com/u/4b078c4c0e3a),不定时更新,祝" target="_blank" rel="noopener">https://www.jianshu.com/u/4b078c4c0e3a),不定时更新,祝</a><br>共同进步!</em></strong></p>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;自从开通了简书,我就每天拿着刷刷一波美文,时不时想着趁程序运行着,来简书上记录生活点点滴滴。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 接着上篇文章写吧,先说说日志:&lt;br&gt;
    
    </summary>
    
    
      <category term="python 基础" scheme="https://dannieldylan.github.io/danniel/tags/python-%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>python Scrapy爬取小猪短租</title>
    <link href="https://dannieldylan.github.io/danniel/2018/04/07/python%E4%BD%BF%E7%94%A8crapy%E7%88%AC%E5%8F%96%E5%B0%8F%E7%8C%AA%E7%9F%AD%E7%A7%9F/"/>
    <id>https://dannieldylan.github.io/danniel/2018/04/07/python使用crapy爬取小猪短租/</id>
    <published>2018-04-07T09:58:48.000Z</published>
    <updated>2018-06-12T04:46:25.050Z</updated>
    
    <content type="html"><![CDATA[<p>个人博客<a href="https://dannieldylan.github.io/danniel/">Danniel’s Blog</a>,不定时更新,欢迎指正!</p><p><strong>找工作之余,要考虑租房问题,天天刷房源,所有才有了这个想法爬几个租房的网站吧。<br><a id="more"></a><br>先来写个小猪短租的吧,废话不多说直接撸代码。</strong></p><h3 id="一-创建项目-tenement"><a href="#一-创建项目-tenement" class="headerlink" title="一 创建项目 tenement"></a>一 创建项目 tenement</h3><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject tenement</span><br><span class="line">New Scrapy project 'tenement', using template directory 'd:<span class="symbol">\\</span>anaconda3<span class="symbol">\\</span>lib<span class="symbol">\\</span>site-packages<span class="symbol">\\</span>scrapy<span class="symbol">\\</span>templates<span class="symbol">\\</span>project', created in:</span><br><span class="line">    C:<span class="symbol">\U</span>sers<span class="symbol">\D</span>ylan<span class="symbol">\D</span>esktop<span class="symbol">\t</span>enement</span><br><span class="line"></span><br><span class="line">You can start your first spider with:</span><br><span class="line">    cd tenement</span><br><span class="line">    scrapy genspider example example.com</span><br></pre></td></tr></table></figure><p><strong>在scrapy框架中,如果想多个批量运行爬虫文件,常见有两种方法:</strong></p><ol><li>使用CrawProcess实现</li><li>使用修改craw源码+自定义命令的方式实现</li></ol><p>(*￣︶￣)在这里我们就使用常用的方法:<br>进入该爬虫项目所在目录,并且在该项目中实时创建爬虫文件(目的为了创建多个爬虫文件,以供待运行),下面继续码字吧</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Dylan\Desktop&gt;cd tenement</span><br><span class="line">C:\Users\Dylan\Desktop\tenement&gt;scrapy genspider -t basic Short_rent_for_piglets xiaozhu.com</span><br><span class="line">Created spider <span class="string">'Short_rent_for_piglets'</span> using template <span class="string">'basic'</span> <span class="keyword">in</span> module:</span><br><span class="line">  tenement<span class="selector-class">.spiders</span><span class="selector-class">.Short_rent_for_piglets</span></span><br></pre></td></tr></table></figure><h3 id="二-找出想要的url-发送请求-获取响应"><a href="#二-找出想要的url-发送请求-获取响应" class="headerlink" title="二 找出想要的url(发送请求,获取响应)"></a>二 找出想要的url(发送请求,获取响应)</h3><p>上个<a href="http:hz.xiaozhu.com/" target="_blank" rel="noopener">小猪短租</a>网址吧,快速浏览第1页,第2页,第3页….通过chrome开发者工具按下ctrl+shift+I和F5(或F12+F5) 很快就找到了network(网络)里的headers(消息头),看到Request URL:(<a href="http://sh.xiaozhu.com/search-duanzufang-p{}-0/" target="_blank" rel="noopener">http://sh.xiaozhu.com/search-duanzufang-p{}-0/</a> {})内就是数字所对应的页码数,仔细看了下网页版的好像就13页左右,没有APP的多,今天我就先写个网页版的吧.<br>在这里记录下下次有机会去爬app看看,能加载多少房源。  </p><h5 id="TODO-记得爬小猪短租APP"><a href="#TODO-记得爬小猪短租APP" class="headerlink" title="TODO  记得爬小猪短租APP"></a>TODO  记得爬小猪短租APP</h5><h3 id="写parse函数-利用Xpath或者Selector提取对应的数据"><a href="#写parse函数-利用Xpath或者Selector提取对应的数据" class="headerlink" title="写parse函数  利用Xpath或者Selector提取对应的数据"></a>写parse函数  利用Xpath或者Selector提取对应的数据</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">先找到所有信息</span><br><span class="line">infos=response.xpath(<span class="string">'//div[@id="page_list"]/ul/li'</span>)</span><br><span class="line">标题 title =<span class="selector-tag">li</span>.xpath(<span class="string">'./div[2]/div/a/span/text()'</span>).extract_first()</span><br><span class="line">价格 price =<span class="selector-tag">li</span>.xpath(<span class="string">'./div[2]/span[1]/i/text()'</span>).extract_first()</span><br><span class="line">描述 desc =<span class="selector-tag">li</span>.xpath(<span class="string">'./div[2]/div/em/text()'</span>).extract_first().strip()</span><br><span class="line">详情页comment_url=<span class="selector-tag">li</span>.xpath(<span class="string">'./a/@href'</span>).extract_first()</span><br><span class="line">图片 images=<span class="selector-tag">li</span>.xpath(<span class="string">'./a/img/@lazy_src'</span>).extract_first()</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/11372882-1c7d6e0540955283.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>提取上面的对应的ico的title是不是很简单?直接能用xpath取出来,哈哈,结果跑起程序后肯定一脸懵,为啥我取出来的数据类似下面举例的这B玩意?<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shipai<span class="string">': &lt;Selector xpath='</span>.<span class="regexp">/div[2]/</span>div<span class="regexp">/p/</span>span/<span class="meta">@title</span><span class="string">' data='</span>商旅认证：随时入住、交通便利、适合办公<span class="string">'&gt;</span></span><br></pre></td></tr></table></figure></p><p><img src="http://upload-images.jianshu.io/upload_images/11372882-ed7856d0063da017.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"><br>其实是忘记写了xpath().extract(),BLABLA一大堆,感觉今天咋这么多”特效”,废话不多说直接上代码<br><img src="https://upload-images.jianshu.io/upload_images/11372882-946d3608ee40ec3d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="xpath使用"></p><p><strong>在这顺便说下extract()与extract_first()的区别</strong><br><strong>在scrapy.Selector选择器中提取字符串:</strong></p><ol><li><strong>extract()返回一个包含有字符串数据的列表</strong></li><li><strong>extract_first()返回列表中的第一个字符串</strong><h5 id="DEBUG调试"><a href="#DEBUG调试" class="headerlink" title="DEBUG调试"></a>DEBUG调试</h5><strong>出现Filtered offsite request to </strong><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">官方对这个的解释，是你要request的地址和allow_domain里面的冲突，从而被过滤掉。可以停用过滤功能。</span><br><span class="line">yield Request(url, <span class="attribute">callback</span>=self.parse_item, <span class="attribute">dont_filter</span>=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></li></ol><p><strong>如果出现Unhandled error in Deferred:</strong><br>请检验python是否没装pywin32模块或者pywin32的64位模块(<a href="https://pypi.python.org/pypi/pywin32" target="_blank" rel="noopener">https://pypi.python.org/pypi/pywin32</a>)<br>或:<br>作为程序运行错误时,提示作用<br>因为我在程序中设定了自定义配置,故会在log日志里存储对应时间内的异常错误代码提示</p><h3 id="爬取数据过程中要与反爬技术常打交道-该程序只用了常规的IP代理-UA随机请求头两中间件。"><a href="#爬取数据过程中要与反爬技术常打交道-该程序只用了常规的IP代理-UA随机请求头两中间件。" class="headerlink" title="爬取数据过程中要与反爬技术常打交道,该程序只用了常规的IP代理,UA随机请求头两中间件。"></a>爬取数据过程中要与反爬技术常打交道,该程序只用了常规的IP代理,UA随机请求头两中间件。</h3><p>先从编写代理中间件开始吧<br><img src="https://upload-images.jianshu.io/upload_images/11372882-1681e485ff8e8a1a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="编写中间件"></p><p>顺便说下免费代理与付费代理的使用:</p><ol><li>手动更新ip pool,如上图所示从免费代理网站爬取的ip写入proxies的列表内,通过random模块的方法随机一个IP作为代理</li><li>自动更新ip pool,  顾名思义就是将爬取到的代理通过创建IP pool池,使用Flask+Redis维护动态代理池,定时CRUD,获取最新、有效的IP地址,用于IP代理.  参考项目:<br><a href="https://github.com/jhao104/proxy_pool" target="_blank" rel="noopener">大神</a>         ps:惭愧啊! 自学的时候常用它,竟还不知道尊姓大名,对不住!<br><a href="https://github.com/qiyeboy/IPProxyPool" target="_blank" rel="noopener">七夜大神开源项目</a><br><a href="https://github.com/awolfly9/IPProxyTool" target="_blank" rel="noopener">崔老师开源项目</a></li><li><p>那就是付费代理啦<br>这里整个阿布云代理的代码,作为示范:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">proxyServer = <span class="string">"http://http-dyn.abuyun.com:9020"</span>  <span class="comment">#阿布云服务</span></span><br><span class="line">proxyUser = <span class="string">"............."</span></span><br><span class="line">proxyPass = <span class="string">"................."</span></span><br><span class="line">proxyAuth = <span class="string">"Basic "</span> + str(base64.b64encode((proxyUser + <span class="string">":"</span> + proxyPass).encode(<span class="string">'utf-8'</span>)), <span class="string">'utf-8'</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request, spider)</span>:</span></span><br><span class="line">        request.meta[<span class="string">"proxy"</span>] = proxyServer</span><br><span class="line">        request.headers[<span class="string">"Proxy-Authorization"</span>] = proxyAuth</span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">   如果有用户名和密码建议使用base64编码一下</span></span><br><span class="line"><span class="string">   proxy_user_pass="USERNAME:PASSWORD" encode_user_pass=base64.encodestring(proxy_user_pass)</span></span><br><span class="line"><span class="string"> request.headers['Proxy-Authorization']='Basic'+encode_user_pass</span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure></li><li><p>Python爬虫还在找代理你就OUT了!<em>Crawlera</em>神器还需要找代理IP?<br>scrapy_crawlera(<a href="https://scrapinghub.com/crawlera" target="_blank" rel="noopener">https://scrapinghub.com/crawlera</a>)    免费兼收费,由于免费代理十混九瞎折腾老半天没出几个好用的,这种代理来的不太算容易吧!还要有验证的麻烦事。那我们可以利用Crawlera轻松解决,岂不快哉? 是不是感觉比以往的那种寻找出的代理池棒多了?<br>安装 方法  pip install crawlera</p></li></ol><p><a href="https://doc.scrapinghub.com/crawlera.html" target="_blank" rel="noopener">官方文档</a><br>我也还在学习中,就小举下使用方法吧<br><figure class="highlight plain"><figcaption><span>&#123;</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">            &apos;tenement.middlewares.TenementSpiderMiddleware&apos;: 543,</span><br><span class="line">           # &apos;tenement.middlewares.IPProxiesMiddleware&apos;: 300,</span><br><span class="line">            &apos;tenement.middlewares.RandomUserAgent&apos;: 400,</span><br><span class="line">            # 使用scrapy_crawlera 就可以将之前设置过的代理ip中间件注释掉了,加入了crawlera的代理</span><br><span class="line">             &apos;scrapy_crawlera.CrawleraMiddleware&apos;: 600</span><br><span class="line">        &#125;,</span><br><span class="line">官方还提示了:</span><br><span class="line">为了使crawlera生效,需求添加你创建的api信息(如果填写了API key的话,pass可以设置为空)</span><br><span class="line">         &apos;CRAWLERA_ENABLED&apos;: True,</span><br><span class="line">        &apos;CRAWLERA_USER&apos;=&quot;&lt;API KEY&gt;&quot;</span><br><span class="line">         &apos;CRAWLERA_PASS&apos;: &apos;&apos;,</span><br><span class="line">其他就去crawlera官方文档学习吧(嘿嘿自个学习去,我也还没看完,不能在这误人子弟)</span><br></pre></td></tr></table></figure></p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">在scrapy中的middlewares中写入代理中间件</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandomUserAgent</span>(<span class="title">object</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(<span class="keyword">self</span>, request, spider)</span></span><span class="symbol">:</span></span><br><span class="line">        useragent = random.choice(USER_AGENTS)</span><br><span class="line">        request.headers[<span class="string">'User-Agent'</span>] = useragent</span><br></pre></td></tr></table></figure><p>随机头User-Agent  将收集着的全放出<br><figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">USER_AGENTS</span> = [</span><br><span class="line">    <span class="comment">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) "</span></span><br><span class="line">    <span class="comment">"Chrome/22.0.1207.1 Safari/537.1"</span>,</span><br><span class="line">    <span class="comment">"Mozilla/5.0 (X11; CrOS i686 2268.111.0) AppleWebKit/536.11 (KHTML, like Gecko) "</span></span><br><span class="line">    <span class="comment">"Chrome/20.0.1132.57 Safari/536.11"</span>,</span><br><span class="line">    <span class="comment">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.6 (KHTML, like Gecko) "</span></span><br><span class="line">    <span class="comment">"Chrome/20.0.1092.0 Safari/536.6"</span>,</span><br><span class="line">    <span class="comment">"Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.6 (KHTML, like Gecko) "</span></span><br><span class="line">    <span class="comment">"Chrome/20.0.1090.0 Safari/536.6"</span>,</span><br><span class="line">    <span class="comment">"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) "</span></span><br><span class="line">    <span class="comment">"Chrome/19.77.34.5 Safari/537.1"</span>,</span><br><span class="line">    <span class="comment">"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/536.5 (KHTML, like Gecko) "</span></span><br><span class="line">    <span class="comment">"Chrome/19.0.1084.9 Safari/536.5"</span>,</span><br><span class="line">    <span class="comment">"Mozilla/5.0 (Windows NT 6.0) AppleWebKit/536.5 (KHTML, like Gecko) "</span></span><br><span class="line">    <span class="comment">"Chrome/19.0.1084.36 Safari/536.5"</span>,</span><br><span class="line">    <span class="comment">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 (KHTML, like Gecko) "</span></span><br><span class="line">    <span class="comment">"Chrome/19.0.1063.0 Safari/536.3"</span>,</span><br><span class="line">    <span class="comment">"Mozilla/5.0 (Windows NT 5.1) AppleWebKit/536.3 (KHTML, like Gecko) "</span></span><br><span class="line">    <span class="comment">"Chrome/19.0.1063.0 Safari/536.3"</span>,</span><br><span class="line">    <span class="comment">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_0) AppleWebKit/536.3 (KHTML, like Gecko) "</span></span><br><span class="line">    <span class="comment">"Chrome/19.0.1063.0 Safari/536.3"</span>,</span><br><span class="line">    <span class="comment">"Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 (KHTML, like Gecko) "</span></span><br><span class="line">    <span class="comment">"Chrome/19.0.1062.0 Safari/536.3"</span>,</span><br><span class="line">    <span class="comment">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 (KHTML, like Gecko) "</span></span><br><span class="line">    <span class="comment">"Chrome/19.0.1062.0 Safari/536.3"</span>,</span><br><span class="line">    <span class="comment">"Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 (KHTML, like Gecko) "</span></span><br><span class="line">    <span class="comment">"Chrome/19.0.1061.1 Safari/536.3"</span>,</span><br><span class="line">    <span class="comment">"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.3 (KHTML, like Gecko) "</span></span><br><span class="line">    <span class="comment">"Chrome/19.0.1061.1 Safari/536.3"</span>,</span><br><span class="line">    <span class="comment">"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/536.3 (KHTML, like Gecko) "</span></span><br><span class="line">    <span class="comment">"Chrome/19.0.1061.1 Safari/536.3"</span>,</span><br><span class="line">    <span class="comment">"Mozilla/5.0 (Windows NT 6.2) AppleWebKit/536.3 (KHTML, like Gecko) "</span></span><br><span class="line">    <span class="comment">"Chrome/19.0.1061.0 Safari/536.3"</span>,</span><br><span class="line">    <span class="comment">"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/535.24 (KHTML, like Gecko) "</span></span><br><span class="line">    <span class="comment">"Chrome/19.0.1055.1 Safari/535.24"</span>,</span><br><span class="line">    <span class="comment">"Mozilla/5.0 (Windows NT 6.2; WOW64) AppleWebKit/535.24 (KHTML, like Gecko) "</span></span><br><span class="line">    <span class="comment">"Chrome/19.0.1055.1 Safari/535.24"</span></span><br><span class="line">]</span><br><span class="line">    <span class="type">USER</span>-<span class="type">AGENT_MOBILE</span> = [<span class="comment">"Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 "</span></span><br><span class="line">                              <span class="comment">"(KHTML, like Gecko) Chrome/59.0.3071.115 Mobile Safari/537.36"</span>,</span><br><span class="line">                              <span class="comment">"Mozilla/5.0 (iPhone; CPU iPhone OS 9_1 like Mac OS X) AppleWebKit/601.1.46 "</span></span><br><span class="line">                              <span class="comment">"(KHTML, like Gecko) Version/9.0 Mobile/13B143 Safari/601.1"</span>,</span><br><span class="line">                              <span class="comment">"Mozilla/5.0 (iPhone; CPU iPhone OS 9_1 like Mac OS X) AppleWebKit/601.1.46 (KHTML, "</span></span><br><span class="line">                              <span class="comment">"like Gecko) Version/9.0 Mobile/13B143 Safari/601.1"</span>,</span><br><span class="line">                              <span class="comment">"Mozilla/5.0 (Linux; Android 5.0; SM-G900P Build/LRX21T) AppleWebKit/537.36 (KHTML, "</span></span><br><span class="line">                              <span class="comment">"like Gecko) Chrome/62.0.3202.75 Mobile Safari/537.36"</span>,</span><br><span class="line">                              <span class="comment">"Mozilla/5.0 (iPad; CPU OS 9_1 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) "</span></span><br><span class="line">                              <span class="comment">"Version/9.0 Mobile/13B143 Safari/601.1"</span>]</span><br></pre></td></tr></table></figure></p><pre><code>说完中间件了,那就来一波scrapy的settings文件骚操作吧。Scrapy既然设置允许您自定义所有Scrapy组件的行为，包括核心，扩展，管道和爬虫本身。那肯定有它的理由,学的浅就不深究了,还是实打实上图吧。</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/11372882-6c3e93385a1802dd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="自定义settings"><br>      尴尬!篇幅太长了,在这里我就省去日志编写、保存数据这两步,保存方法不唯一,想怎么保存就怎么来<br>scrapy crawl spider_name -o xxx.json/xxx.csv  可直接保存对应的文件哦</p><h3 id="最后附上我的源码"><a href="#最后附上我的源码" class="headerlink" title="最后附上我的源码"></a>最后附上我的<a href="https://github.com/DannielDylan/xiaozhuduanzuSpider" target="_blank" rel="noopener">源码</a></h3><p>谢谢您的阅读,有不足之处或代码优化方面欢迎指正!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;个人博客&lt;a href=&quot;https://dannieldylan.github.io/danniel/&quot;&gt;Danniel’s Blog&lt;/a&gt;,不定时更新,欢迎指正!&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;找工作之余,要考虑租房问题,天天刷房源,所有才有了这个想法爬几个租房的网站吧。&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="https://dannieldylan.github.io/danniel/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>time模块的应用、try...except...finally</title>
    <link href="https://dannieldylan.github.io/danniel/2018/04/05/python%E7%9A%84time%E6%A8%A1%E5%9D%97%E5%B0%8F%E7%BB%93/"/>
    <id>https://dannieldylan.github.io/danniel/2018/04/05/python的time模块小结/</id>
    <published>2018-04-05T12:41:39.000Z</published>
    <updated>2018-04-10T09:31:30.984Z</updated>
    
    <content type="html"><![CDATA[<pre><code>今天在写Spider的时候，发现获取的数据老是不完整（应有的数据未出来），因此在完善代码的时候，加了try异常操作，睡眠时间，明显有效果。</code></pre><a id="more"></a><h3 id="先来小结time模块常用内置函数："><a href="#先来小结time模块常用内置函数：" class="headerlink" title="先来小结time模块常用内置函数："></a>先来小结time模块常用内置函数：</h3><ol><li><p><strong>python time.time()</strong><br>python time.time()返回当前时间的时间戳（<a href="https://baike.baidu.com/item/%E6%97%B6%E9%97%B4%E6%88%B3/6439235?fr=aladdin" target="_blank" rel="noopener">时间戳timestamp</a>时间戳是指格林威治时间1970年01月01日00时00分00秒(北京时间1970年01月01日08时00分00秒)起至现在的总秒数。通俗的讲，它是一个能表示一份数据在某个特定时间之前已经存在的、完整的、可验证的数据)<br>time()方法的语法：  time.time()</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># -*-coding:utf-*-</span></span><br><span class="line">import <span class="built_in">time</span></span><br><span class="line"><span class="keyword">print</span>(<span class="built_in">time</span>.<span class="built_in">time</span>())</span><br><span class="line">&gt;&gt;&gt;<span class="number">1522933182.9892895</span></span><br></pre></td></tr></table></figure></li><li><p><strong>python localtime()方法</strong><br>python time.localtime()函数类似gmtime(),其作用是格式化时间戳为本地的时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">eg:  time.time()</span><br><span class="line">&gt;&gt;&gt;time.struct_time(tm_year=2018, tm_mon=4, tm_mday=5, tm_hour=21, tm_min=3, tm_sec=2, tm_wday=3, tm_yday=95, tm_isdst=0)</span><br><span class="line">若将time.time()放在localtime()会是神马？ 哈哈 实验一下</span><br><span class="line">&gt;&gt;&gt; time.localtime(time.time())</span><br><span class="line">time.struct_time(tm_year=2018, tm_mon=4, tm_mday=5, tm_hour=21, tm_min=4, tm_sec=3, tm_wday=3, tm_yday=95, tm_isdst=0)</span><br></pre></td></tr></table></figure></li><li><p><strong>python asctime()方法</strong><br>python time.asctime()函数接受时间元组并返回一个可读的形式(ps:Thu Apr  5 20:52:38 2018,2018年4月5日 周四20时53分14秒)约为24个字符的字符串</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="selector-tag">time</span>.asctime()</span><br><span class="line"><span class="string">'Thu Apr  5 21:53:10 2018'</span></span><br><span class="line">&gt;&gt;&gt; <span class="selector-tag">time</span>.asctime(<span class="selector-tag">time</span>.localtime())</span><br><span class="line"><span class="string">'Thu Apr  5 21:53:42 2018'</span></span><br></pre></td></tr></table></figure></li><li><p><strong>python ctime()方法</strong><br>python ctime()函数把一个时间戳(按秒计算的浮点数)转化为time.asctime()的形式,如果参数未给或者为None的时候,将会默认time.time()为参数.它的作用相当于asctime(localtime(secs))</p></li></ol><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="selector-tag">time</span>.localtime()</span><br><span class="line"><span class="selector-tag">time</span>.struct_time(tm_year=<span class="number">2018</span>, tm_mon=<span class="number">4</span>, tm_mday=<span class="number">5</span>, tm_hour=<span class="number">22</span>, tm_min=<span class="number">0</span>, tm_sec=<span class="number">1</span>, tm_wday=<span class="number">3</span>, tm_yday=<span class="number">95</span>, tm_isdst=<span class="number">0</span>)</span><br><span class="line">&gt;&gt;&gt; <span class="selector-tag">time</span>.asctime(<span class="selector-tag">time</span>.localtime())</span><br><span class="line"><span class="string">'Thu Apr  5 22:00:26 2018'</span></span><br><span class="line">&gt;&gt;&gt; <span class="selector-tag">time</span>.ctime()</span><br><span class="line"><span class="string">'Thu Apr  5 22:00:31 2018'</span></span><br></pre></td></tr></table></figure><ol start="5"><li><p><strong>python mktime()方法</strong><br>python mktime()函数把一个struc_time转化为时间戳</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">time</span>.mktime(<span class="selector-tag">time</span>.localtime())</span><br><span class="line"><span class="number">1523082853.0</span></span><br></pre></td></tr></table></figure></li><li><p><strong>python strftime()方法</strong><br>Python time strftime() 函数接收以时间元组，并返回以可读字符串表示的当地时间，格式由参数format决定。<br>time.strftime(format[,t])   format –格式化字符串,  t– 可选的参数t是一个struct_time对象<br>python中的时间日期格式化符号:</p></li></ol><table><thead><tr><th style="text-align:left">序号</th><th style="text-align:left">符号</th><th>含义</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left">%y</td><td>两位数的年份表示（00-99</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left">%Y</td><td>四位数的年份表示（000-9999）</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left">%m</td><td>月份（01-12）</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left">%d</td><td>月内中的一天（0-31）</td></tr><tr><td style="text-align:left">5</td><td style="text-align:left">%H</td><td>24小时制小时数（0-23）</td></tr><tr><td style="text-align:left">6</td><td style="text-align:left">%I</td><td>12小时制小时数（01-12）</td></tr><tr><td style="text-align:left">7</td><td style="text-align:left">%M</td><td>分钟数（00=59）</td></tr><tr><td style="text-align:left">8</td><td style="text-align:left">%S</td><td>秒（00-59）</td></tr><tr><td style="text-align:left">9</td><td style="text-align:left">%a</td><td>本地简化星期名称</td></tr><tr><td style="text-align:left">10</td><td style="text-align:left">%A</td><td>本地完整星期名称</td></tr><tr><td style="text-align:left">11</td><td style="text-align:left">%b</td><td>本地简化的月份名称</td></tr><tr><td style="text-align:left">12</td><td style="text-align:left">%B</td><td>本地完整的月份名称</td></tr><tr><td style="text-align:left">13</td><td style="text-align:left">%c</td><td>本地相应的日期表示和时间表示</td></tr><tr><td style="text-align:left">14</td><td style="text-align:left">%j</td><td>年内的一天（001-366）</td></tr><tr><td style="text-align:left">15</td><td style="text-align:left">%p</td><td>本地A.M.或P.M.的等价符</td></tr><tr><td style="text-align:left">16</td><td style="text-align:left">%U</td><td>一年中的星期数（00-53）星期天为星期的开始</td></tr><tr><td style="text-align:left">17</td><td style="text-align:left">%w</td><td>星期（0-6），星期天为星期的开始</td></tr><tr><td style="text-align:left">18</td><td style="text-align:left">%W</td><td>一年中的星期数（00-53）星期一为星期的开始</td></tr><tr><td style="text-align:left">19</td><td style="text-align:left">%x</td><td>本地相应的日期表示</td></tr><tr><td style="text-align:left">20</td><td style="text-align:left">%X</td><td>本地相应的时间表示</td></tr><tr><td style="text-align:left">21</td><td style="text-align:left">%Z</td><td>当前时区的名称</td></tr><tr><td style="text-align:left">备注:</td><td style="text-align:left">1</td><td>“%p”只有与“%I”配合使用才有效果。</td></tr><tr><td style="text-align:left"></td><td style="text-align:left">2</td><td>当使用strptime()函数时，只有当在这年中的周数和天数被确定的时候%U和%W才会被计算。</td></tr></tbody></table><p>eg:<br>time_format=’%Y-%m-%d%X’<br>time_current=time.strftime(time_format)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; import time</span><br><span class="line">&gt;&gt;&gt; time_format=&apos;%Y-%m-%d %X&apos;</span><br><span class="line">&gt;&gt;&gt; time_current=time.strftime(time_format)</span><br><span class="line">&gt;&gt;&gt; time_current</span><br><span class="line">&apos;2018-04-0714:28:06&apos;</span><br><span class="line">&gt;&gt;&gt; time.strptime(&apos;2018-04-07 14:29:25&apos;,&quot;%Y-%m-%d %X&quot;)</span><br><span class="line">time.struct_time(tm_year=2018, tm_mon=4, tm_mday=7, tm_hour=14, tm_min=29, tm_sec=25, tm_wday=5, tm_yday=97, tm_isdst=-1)</span><br><span class="line"></span><br><span class="line">如果需要输出2017-11-18T18:42:01.211294</span><br><span class="line">time_format =&apos;%Y-%m-%dT%X%S&apos;</span><br><span class="line">&gt;&gt;&gt; time.strftime(time_format)</span><br><span class="line">&apos;2018-04-10T17:29:0000&apos;</span><br></pre></td></tr></table></figure></p><ol start="7"><li><p><strong>time.sleep(): 线程推迟指定的时间运行.单位为秒 (可以作为阻塞作用使用,我在爬虫中常用,为了防止被ban,可作为反爬虫一小措施,)</strong></p></li><li><p><strong>time.clock() 通常在python计算程序运行了多少时间</strong></p></li></ol><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import <span class="built_in">time</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">start</span> =<span class="built_in">time</span>.clock()</span><br><span class="line"><span class="keyword">a</span>=<span class="built_in">sum</span>(range(<span class="number">0</span>,<span class="number">101</span>))</span><br><span class="line">print(<span class="keyword">a</span>)</span><br><span class="line"><span class="keyword">end</span>=<span class="built_in">time</span>.clock()</span><br><span class="line">print(<span class="string">'Running time:%s Seconds'</span>%(<span class="keyword">end</span>-<span class="built_in">start</span>))</span><br><span class="line">输出结果:</span><br><span class="line"><span class="number">5050</span></span><br><span class="line">Running <span class="built_in">time</span>:<span class="number">2.8421247092743264e-05</span> Seconds</span><br></pre></td></tr></table></figure><h3 id="python的异常处理结构"><a href="#python的异常处理结构" class="headerlink" title="python的异常处理结构"></a>python的异常处理结构</h3><ol><li><strong>try…except…</strong></li></ol><ul><li>其中try子句中的代码块包含可能会引发异常的语句，而except子句则用来捕捉相应的异常。</li><li>如果try子句中的代码引发异常并被except子句捕捉，就执行except子句的代码块；</li><li>如果出现异常但没有被except捕获，继续往外层抛出，如果所有层都没有捕获并处理该异常，程序崩溃并将该异常呈现给最终用户。</li><li>该结构语法如下：<figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    #可能会引发异常的代码，先执行一下试试</span><br><span class="line"><span class="keyword">except</span> Exception[ <span class="keyword">as</span> reason]:</span><br><span class="line">    #如果<span class="keyword">try</span>中的代码抛出异常并被<span class="keyword">except</span>捕捉，就执行这里的代码</span><br></pre></td></tr></table></figure></li></ul><ol start="2"><li><strong>try…except…else…</strong></li></ol><ul><li>如果try中的代码抛出了异常并且被except语句捕捉则执行相应的异常处理代码，这种情况下就不会执行else中的代码；</li><li>如果try中的代码没有引发异常，则执行else块的代码。</li><li>该结构的语法如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    #可能会引发异常的代码</span><br><span class="line">except Exception [ as reason]:</span><br><span class="line">    #用来处理异常的代码</span><br><span class="line">else:</span><br><span class="line">    #如果try子句中的代码没有引发异常，就继续执行这里的代码</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li><strong>try…except…finally…</strong><br>在这种结构中，无论try中的代码是否发生异常，也不管抛出的异常有没有被except语句捕获，finally子句中的代码总是会得到执行。该结构语法为：<figure class="highlight nimrod"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment">#可能会引发异常的代码</span></span><br><span class="line"><span class="keyword">except</span> <span class="type">Exception</span> [ <span class="keyword">as</span> reason]:</span><br><span class="line">    <span class="comment">#处理异常的代码</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    <span class="comment">#无论try子句中的代码是否引发异常，都会执行这里的代码</span></span><br><span class="line">    可以捕捉多种异常的异常处理结构</span><br><span class="line">    一旦<span class="keyword">try</span>子句中的代码抛出了异常，就按顺序依次检查与哪一个<span class="keyword">except</span>子句匹配，如果某个<span class="keyword">except</span>捕捉到了异常，其他的<span class="keyword">except</span>子句将不会再尝试捕捉异常。该结构类似于多分支选择结构，语法格式为：</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment">#可能会引发异常的代码</span></span><br><span class="line">    <span class="keyword">except</span> <span class="type">Exception1</span>:</span><br><span class="line">        <span class="comment">#处理异常类型1的代码</span></span><br><span class="line">    <span class="keyword">except</span> <span class="type">Exception2</span>:</span><br><span class="line">        <span class="comment">#处理异常类型2的代码</span></span><br><span class="line">    <span class="keyword">except</span> <span class="type">Exception3</span>:</span><br><span class="line">        <span class="comment">#处理异常类型3的代码</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></li></ol><h3 id="常见异常类型"><a href="#常见异常类型" class="headerlink" title="常见异常类型"></a>常见异常类型</h3><p>BaseException：所有异常的基类<br>SystemExitb python：解释器请求退出<br>KeyboardInterruptc：用户中断执行(通常是输入^C)</p><h3 id="Exception：常规错误的基类"><a href="#Exception：常规错误的基类" class="headerlink" title="Exception：常规错误的基类"></a>Exception：常规错误的基类</h3><table><thead><tr><th style="text-align:left">异常代码</th><th style="text-align:left">对应的中文一览</th></tr></thead><tbody><tr><td style="text-align:left">StopIteratione</td><td style="text-align:left">迭代器没有更多的值</td></tr><tr><td style="text-align:left">GeneratorExita</td><td style="text-align:left">生成器(generator)发生异常来通知退出</td></tr><tr><td style="text-align:left">SystemExith</td><td style="text-align:left">Python 解释器请求退出</td></tr><tr><td style="text-align:left">StandardErrorg</td><td style="text-align:left">所有的内建标准异常的基类</td></tr><tr><td style="text-align:left">ArithmeticErrord</td><td style="text-align:left">所有数值计算错误的基类</td></tr><tr><td style="text-align:left">FloatingPointErrord</td><td style="text-align:left">浮点计算错误</td></tr><tr><td style="text-align:left">OverflowError</td><td style="text-align:left">数值运算超出最大限制</td></tr><tr><td style="text-align:left">ZeroDivisionError</td><td style="text-align:left">除(或取模)零 (所有数据类型)</td></tr><tr><td style="text-align:left">AssertionErrord</td><td style="text-align:left">断言语句失败</td></tr><tr><td style="text-align:left">AttributeError</td><td style="text-align:left">对象没有这个属性</td></tr><tr><td style="text-align:left"></td><td style="text-align:left"></td></tr><tr><td style="text-align:left">EOFError</td><td style="text-align:left">没有内建输入,到达EOF 标记</td></tr><tr><td style="text-align:left">EnvironmentErrord</td><td style="text-align:left">操作系统错误的基类</td></tr><tr><td style="text-align:left">IOError</td><td style="text-align:left">输入/输出操作失败</td></tr><tr><td style="text-align:left">OSErrord</td><td style="text-align:left">操作系统错误</td></tr><tr><td style="text-align:left">WindowsErrorh Windows</td><td style="text-align:left">系统调用失败</td></tr><tr><td style="text-align:left">ImportError</td><td style="text-align:left">导入模块/对象失败</td></tr><tr><td style="text-align:left">KeyboardInterruptf</td><td style="text-align:left">用户中断执行(通常是输入^C)</td></tr><tr><td style="text-align:left">LookupErrord</td><td style="text-align:left">无效数据查询的基类</td></tr><tr><td style="text-align:left">IndexError</td><td style="text-align:left">序列中没有没有此索引(index)</td></tr><tr><td style="text-align:left">KeyError</td><td style="text-align:left">映射中没有这个键</td></tr><tr><td style="text-align:left">MemoryError</td><td style="text-align:left">内存溢出错误(对于Python 解释器不是致命的)</td></tr><tr><td style="text-align:left">UnboundLocalErrorh</td><td style="text-align:left">访问未初始化的本地变量</td></tr><tr><td style="text-align:left">ReferenceErrore</td><td style="text-align:left">弱引用(Weak reference)试图访问已经垃圾回收了的对象</td></tr><tr><td style="text-align:left">RuntimeError</td><td style="text-align:left">一般的运行时错误</td></tr><tr><td style="text-align:left">NotImplementedErrord</td><td style="text-align:left">尚未实现的方法</td></tr><tr><td style="text-align:left">IndentationErrorg</td><td style="text-align:left">缩进错误</td></tr><tr><td style="text-align:left">TabErrorg</td><td style="text-align:left">Tab 和空格混用</td></tr><tr><td style="text-align:left">SystemError</td><td style="text-align:left">一般的解释器系统错误</td></tr><tr><td style="text-align:left">ValueError</td><td style="text-align:left">传入无效的参数</td></tr><tr><td style="text-align:left">UnicodeErrorh</td><td style="text-align:left">Unicode 相关的错误</td></tr><tr><td style="text-align:left">UnicodeDecodeErrori</td><td style="text-align:left">Unicode 解码时的错误</td></tr><tr><td style="text-align:left">UnicodeEncodeErrori</td><td style="text-align:left">Unicode 编码时错误</td></tr><tr><td style="text-align:left">UnicodeTranslateErrorf</td><td style="text-align:left">Unicode 转换时错误</td></tr><tr><td style="text-align:left">DeprecationWarningj</td><td style="text-align:left">关于被弃用的特征的警告</td></tr><tr><td style="text-align:left">FutureWarningi</td><td style="text-align:left">关于构造将来语义会有改变的警告</td></tr><tr><td style="text-align:left">PendingDeprecationWarningi</td><td style="text-align:left">关于特性将会被废弃的警告</td></tr><tr><td style="text-align:left">RuntimeWarningj</td><td style="text-align:left">可疑的运行时行为(runtime behavior)的警告</td></tr><tr><td style="text-align:left">SyntaxWarningj</td><td style="text-align:left">可疑的语法的警告</td></tr><tr><td style="text-align:left">UserWarningj</td><td style="text-align:left">用户代码生成的警告</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;今天在写Spider的时候，发现获取的数据老是不完整（应有的数据未出来），因此在完善代码的时候，加了try异常操作，睡眠时间，明显有效果。
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="python 基础" scheme="https://dannieldylan.github.io/danniel/tags/python-%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>mysql数据库知识小结</title>
    <link href="https://dannieldylan.github.io/danniel/2018/01/21/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9F%A5%E8%AF%86%E5%B0%8F%E7%BB%93/"/>
    <id>https://dannieldylan.github.io/danniel/2018/01/21/MySQL数据库知识小结/</id>
    <published>2018-01-21T02:33:41.000Z</published>
    <updated>2018-04-10T07:30:38.841Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数据库操作相关"><a href="#数据库操作相关" class="headerlink" title="数据库操作相关"></a>数据库操作相关</h3><a id="more"></a><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br><span class="line">u User p password</span><br><span class="line">**注意： -u和用户名之间可以连写  可以有空格**</span><br><span class="line">  -p后面也可以直接跟上密码</span><br><span class="line">     例如   mysql -uroot -p123456</span><br><span class="line">退出数据库</span><br><span class="line"> Ctrl + D  exit  quit</span><br><span class="line">SQL语句  末位默认结尾符号为 ;</span><br><span class="line">显示数据库版本</span><br><span class="line"><span class="keyword">select</span> version()；</span><br><span class="line"><span class="keyword">select</span> @@version；</span><br><span class="line">显示现在时间</span><br><span class="line"><span class="keyword">select</span> now();</span><br><span class="line">查看所有数据库</span><br><span class="line">show databases；</span><br><span class="line">创建数据库</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> 数据库名  charset=编码名；</span><br><span class="line">- 注意utf<span class="number">-8</span>中间的-不要  因为SQL中的-是特殊字符</span><br><span class="line">- 默认编码为latin1</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> py charset=utf8；</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> py character <span class="keyword">set</span> utf8；</span><br><span class="line">创建成功后，会返回如下信息：  Query OK，<span class="number">1</span> row affected （<span class="number">0.01</span> sec)</span><br><span class="line">创建成功后，我们需要对数据库进行选择，选择成功后才能对数据库进行操作</span><br><span class="line">    使用<span class="keyword">use</span>语句指定</span><br><span class="line"><span class="keyword">use</span> 数据库名;切换到某个数据库进行使用；</span><br><span class="line">    选择创建的py数据库；</span><br><span class="line">    use 数据库名；</span><br><span class="line">    选择成功后会提示：Database changed</span><br><span class="line">查看创建某数据库的语句：</span><br><span class="line">show <span class="keyword">create</span> <span class="keyword">database</span> 数据库名；</span><br><span class="line">查看当前正使用的数据库</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">database</span>();</span><br><span class="line">删除数据库&lt;慎用&gt;</span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> 数据库名；</span><br></pre></td></tr></table></figure><h3 id="表结构操作"><a href="#表结构操作" class="headerlink" title="表结构操作"></a>表结构操作</h3><h6 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h6><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名称（列声明<span class="number">1</span>，列声明<span class="number">2</span>，...);</span><br><span class="line">以创建student表为例，表中有学号（id），姓名（name），性别（sex），年龄（age）等列</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">class</span></span><br><span class="line">（</span><br><span class="line"><span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span> auto_increment primary <span class="keyword">key</span>，</span><br><span class="line"><span class="keyword">name</span> <span class="built_in">char</span>（<span class="number">8</span>） <span class="keyword">not</span> <span class="literal">null</span>，</span><br><span class="line">sex <span class="built_in">char</span>（<span class="number">4</span>） <span class="keyword">not</span> <span class="literal">null</span>，</span><br><span class="line">age tinyint <span class="keyword">unsigned</span> <span class="keyword">not</span> <span class="literal">null</span>，</span><br><span class="line">）；</span><br></pre></td></tr></table></figure><h3 id="如果担心在命令行中输入这么长的sql语句会出错，可以将以上的sql语句保存为create-student-sql文件，比如将它保存在D盘根目录，有两种方式可以让MySQL执行sql文件"><a href="#如果担心在命令行中输入这么长的sql语句会出错，可以将以上的sql语句保存为create-student-sql文件，比如将它保存在D盘根目录，有两种方式可以让MySQL执行sql文件" class="headerlink" title="如果担心在命令行中输入这么长的sql语句会出错，可以将以上的sql语句保存为create_student.sql文件，比如将它保存在D盘根目录，有两种方式可以让MySQL执行sql文件"></a>如果担心在命令行中输入这么长的sql语句会出错，可以将以上的sql语句保存为create_student.sql文件，比如将它保存在D盘根目录，有两种方式可以让MySQL执行sql文件</h3><p>在登录MySQL的时候输入： mysql -D py test -uroot -p &lt;D:\create_student.sql<br>在登录MySQL之后  输入： source D:\create_student.sql<br>                或输入： D:\create_student.sql</p><ul><li>查看当前数据库中所有表<br>  show tables；</li><li>查看表创建的语句<br>  show create table 表名；</li><li>查看表结构<br>  desc 表名；</li><li>删除表<br>  drop table 表名；</li></ul><h6 id="对表数据增删改查操作"><a href="#对表数据增删改查操作" class="headerlink" title="对表数据增删改查操作"></a>对表数据增删改查操作</h6><figure class="highlight plain"><figcaption><span>以student表进行演示</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">增加学生信息   insert into student values（NULL，&quot;dylan&quot;,&quot;男&quot;，18）；</span><br><span class="line">更新学生的年龄  update student set age=20 where name=&quot;dylan&quot;</span><br><span class="line">查看学生信息select name，age from student；（select * from student；）</span><br><span class="line">删除学生信息delete from student where age=18；</span><br></pre></td></tr></table></figure><p><strong>注意  在MySQL中字符串既可以使用单引号包裹，也可以使用双引号包裹***</strong></p><h6 id="实战演练"><a href="#实战演练" class="headerlink" title="实战演练"></a>实战演练</h6><p><strong>增加插入</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">   - 全列   当插入的数据顺序和表结构顺序完全一致的时候 可省</span><br><span class="line">   <span class="keyword">insert</span> <span class="keyword">into</span> classes (<span class="keyword">id</span>,<span class="keyword">name</span>) <span class="keyword">values</span> (<span class="number">0</span>, <span class="string">"小hu"</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> classes <span class="keyword">values</span> (<span class="number">0</span>,<span class="string">"zhang"</span>) ,(<span class="number">0</span>,<span class="string">"sun"</span>)</span><br><span class="line">   - <span class="keyword">into</span>可省</span><br><span class="line">   <span class="keyword">insert</span> classes <span class="keyword">values</span> (<span class="number">0</span>,<span class="string">"赵"</span>);</span><br><span class="line">   - 部分  没有指明的字段必须要有默认值 并且满足 字段约束</span><br><span class="line"><span class="keyword">insert</span> classes (<span class="keyword">name</span>) <span class="keyword">values</span> (<span class="string">"钱"</span>);</span><br><span class="line">   - 当数据表中 有非空约束的时候  下列是错误的</span><br><span class="line"><span class="keyword">insert</span> classes (<span class="keyword">name</span>) <span class="keyword">values</span> (<span class="string">"李"</span>);</span><br><span class="line">   - 可以在合适的情况下 给非空约束的字段 指定默认值</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> classes <span class="keyword">modify</span> wifi <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">default</span> <span class="string">""</span> <span class="keyword">not</span> <span class="literal">null</span>;</span><br><span class="line">   - 下列语句是OK的</span><br><span class="line"><span class="keyword">insert</span> classes (<span class="keyword">name</span>) <span class="keyword">values</span> (<span class="string">"李"</span>);</span><br><span class="line">   - 多行</span><br><span class="line"><span class="keyword">insert</span> classes <span class="keyword">values</span> (<span class="number">0</span>,<span class="string">"周"</span>,<span class="string">"123456789"</span>),(<span class="number">0</span>,<span class="string">"武大郎"</span>,<span class="string">"890"</span>);</span><br></pre></td></tr></table></figure></p><p><strong>删除</strong></p><ul><li>物理删除 默认情况下是物理删除 不加条件默认删除所有<br>  delete from classes where wifi!=”123456”;</li><li>当删除表所有数据时 尽量用drop table</li><li>逻辑删除<br><strong>修改</strong><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">   - 如果不指定条件 默认更新所有记录</span><br><span class="line">update classes <span class="builtin-name">set</span> <span class="attribute">wifi</span>=<span class="string">"123456"</span></span><br><span class="line">   - 指定条件更新 指定id为4的用户wifi修改为6789</span><br><span class="line">update classes <span class="builtin-name">set</span> <span class="attribute">wifi</span>=<span class="string">"6789"</span> where <span class="attribute">id</span>=4;</span><br></pre></td></tr></table></figure></li></ul><p><strong>查询</strong><br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 全列 全部字段</span></span><br><span class="line">select * <span class="keyword">from</span> 表名；</span><br><span class="line">select * <span class="keyword">from</span> classes</span><br><span class="line"><span class="comment">-- 指定列</span></span><br><span class="line">select <span class="built_in">name</span> <span class="keyword">from</span> classes;</span><br><span class="line"><span class="comment">-- 指定列显示顺序</span></span><br><span class="line">select <span class="built_in">name</span>, <span class="built_in">id</span> <span class="keyword">from</span> classes;</span><br><span class="line"><span class="comment">-- 指定条件</span></span><br><span class="line">mysql&gt; select * <span class="keyword">from</span> classes <span class="keyword">where</span> wifi!=<span class="string">"123456"</span>;</span><br><span class="line">- <span class="keyword">as</span>重命名 起别名</span><br><span class="line">select <span class="built_in">name</span> <span class="keyword">as</span> 姓名 <span class="keyword">from</span> classes <span class="keyword">where</span> wifi!=<span class="string">"123456"</span>;</span><br></pre></td></tr></table></figure></p><p><strong>对表结构的操作</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-修改表-添加字段</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">add</span> hometown <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">not</span> <span class="literal">null</span>;</span><br><span class="line">-修改表-修改字段</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">modify</span> hometown <span class="built_in">varchar</span>(<span class="number">64</span>);</span><br><span class="line">-修改表-重命名字段</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">change</span> city hometown <span class="built_in">varchar</span>(<span class="number">16</span>) <span class="keyword">not</span> <span class="literal">null</span>;</span><br><span class="line">-修改表-删除字段</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> student <span class="keyword">drop</span> city;</span><br></pre></td></tr></table></figure></p><h4 id="MySQL常用命令"><a href="#MySQL常用命令" class="headerlink" title="MySQL常用命令"></a>MySQL常用命令</h4><h6 id="一、连接MySQL-mysql-h-主机地址-u-用户名-p-用密码"><a href="#一、连接MySQL-mysql-h-主机地址-u-用户名-p-用密码" class="headerlink" title="一、连接MySQL  mysql-h 主机地址 -u 用户名 -p 用密码"></a>一、连接MySQL  mysql-h 主机地址 -u 用户名 -p 用密码</h6><pre><code>1、连接到本机MySQL在命令行中输入mysql -uroot -p  回车后按提示输入密码也可以直接在p后面跟上密码   mysql -uroot -p1234562、连接到远程主机上的MySQL远程主机的ip假设为10.110.88.188,用户名为root，密码为123456：mysql -h10.110.88.188 -uroot -p123456</code></pre><h6 id="二、修改密码"><a href="#二、修改密码" class="headerlink" title="二、修改密码"></a>二、修改密码</h6><pre><code>mysqladmin -uroot -password root123；</code></pre><h6 id="三、增加新用户"><a href="#三、增加新用户" class="headerlink" title="三、增加新用户"></a>三、增加新用户</h6><pre><code>grant权限1，权限2，...权限n on 数据库名称.表名称to 用户名@用户地址 identified by 密码;示例给来自10.166.288.88的用户dylan 分配可对数据库company的employee表进行select、insert、update、delete、create、drop等操作的权限，并设定口令为123grant select，insert，update，delete，create，drop on company.employee to dylan@10.166.288.88 identified by &apos;123&apos;;</code></pre><h6 id="四、显示数据库"><a href="#四、显示数据库" class="headerlink" title="四、显示数据库"></a>四、显示数据库</h6><pre><code>show databases</code></pre><h6 id="五、备份数据库"><a href="#五、备份数据库" class="headerlink" title="五、备份数据库"></a>五、备份数据库</h6><pre><code>数据库的备份包括数据库的备份、表的备份  mysqldump -h 主机名 -p 端口 -u用户名 -p 密码 -database 数据库名表名&gt;文件名.sql1. 导出整个数据库mysqldump -u user_name -p123456 database_name table_name &gt; outfile_name.sql2. 导出一个表mysqldump -u user_name -p123456 database_name table_name &gt;outfile_name.sql</code></pre><h6 id="六、补充知识"><a href="#六、补充知识" class="headerlink" title="六、补充知识"></a>六、补充知识</h6><pre><code>    prompt python&gt;  + \D  头部会显示完整日期                \U  显示使用用户信息MySQL 记录货币用什么字段最好？ number和decimal</code></pre><h4 id="python-操作MySQL"><a href="#python-操作MySQL" class="headerlink" title="python 操作MySQL"></a>python 操作MySQL</h4><pre><code>1. **导入模块**    py2  import mysqldb    py3  import pymysql2. **打开数据库**    host=&quot;localhost&quot;    pwd=&apos;&apos;    con=pymysql.connect(host=host,port=3306,pwd=pwd，db=&apos;数据库名&apos;，charset=&quot;utf8&quot;)3. **数据库连接对象**    上面通过connect方法返回的con对象，即使数据库连接对象，它提供了以下方法：    cursor()方法用来创建一个游标对象    commit()方法用来事务提交    rollback()方法用来事务回滚    close()方法用来关闭一个数据库连接4. **游标对象的使用**    对数据库的查询需要使用到游标对象，首先通过cursor()方法创建一个游标对象    #获取连接中一个会话资源    cur=con.cursor()    #游标对象有以下方法支持数据库的操作对数据库进行操作    execute()表示执行  参数1表示sql语句 参数2表示sql语句的参数    executemany()用来执行多条SQL语句    close()用来关闭游标    fetchone()用来从结果中取出一条记录，并将游标指向下一条记录    fetchmany()用来从结果中取多条记录    fetchall()用来从结果中取出所有记录    scroll()用于游标滚动5. **建表**    #首先使用游标对象创建一个person表，包含id、name、age等3列    #cur.execute（&quot;create tables person (id int not null auto_increment primary key,name varchar(20),age int)&quot;6. **插入数据**    向person表中插入两条数据7.    **查询数据**    #返回值表示影响的行数    row_count=cur.execute(&apos;select * from user_info&apos;)    data=cur.fetchall()#输出所有数据    #关闭资源    #先关游标    cur.close()    con.close()</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;数据库操作相关&quot;&gt;&lt;a href=&quot;#数据库操作相关&quot; class=&quot;headerlink&quot; title=&quot;数据库操作相关&quot;&gt;&lt;/a&gt;数据库操作相关&lt;/h3&gt;
    
    </summary>
    
    
      <category term="MYSQL" scheme="https://dannieldylan.github.io/danniel/tags/MYSQL/"/>
    
  </entry>
  
  <entry>
    <title>python爬虫小结</title>
    <link href="https://dannieldylan.github.io/danniel/2018/01/20/python%E7%88%AC%E8%99%AB%E5%B0%8F%E7%BB%93/"/>
    <id>https://dannieldylan.github.io/danniel/2018/01/20/python爬虫小结/</id>
    <published>2018-01-20T07:57:17.000Z</published>
    <updated>2018-04-05T11:46:28.847Z</updated>
    
    <content type="html"><![CDATA[<h6 id="爬虫的定义"><a href="#爬虫的定义" class="headerlink" title="爬虫的定义:"></a>爬虫的定义:</h6><ul><li>模拟浏览器发送请求,获取响应</li><li>浏览器能够看到的,爬虫才能获取到,否则没办法获取,故基于html的</li><li>爬虫分为通用爬虫和聚焦爬虫<a id="more"></a><h6 id="Scrapy框架"><a href="#Scrapy框架" class="headerlink" title="Scrapy框架"></a>Scrapy框架</h6></li><li>windows安装方式   python2/3 通过pip安装scrapy  pip install Scrapy</li><li><p>Ubuntu/Centos安装方式   </p><ul><li>sudo apt-get install python-dev python-pip libxml2-dev libxslt1-dev zlib1g-dev libffi-dev libssl-dev<ul><li>具体Scrapy安装参考流程<a href="http://doc.scrapy.org/en/latest/intro/install.html#intro-install-platform-notes" target="_blank" rel="noopener">http://doc.scrapy.org/en/latest/intro/install.html#intro-install-platform-notes</a> 里面有各个平台的安装方法<h6 id="创建一个Scrapy项目流程"><a href="#创建一个Scrapy项目流程" class="headerlink" title="创建一个Scrapy项目流程"></a>创建一个Scrapy项目流程</h6></li></ul></li></ul></li><li><p>创建一个SCrapy项目</p></li><li>定义提取结构化数据(item)</li><li>编写爬取网站的Spider并提取出结构化数据(item)</li><li><p>编写 Item Pipelines来存储提取到的item(即结构化数据)<br>  scrapy startproject myspider(爬虫项目名)<br>  cd myspider<br>  scrapy genspider example example.com</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaiduSpider</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">name=<span class="string">"baidu"</span></span><br><span class="line">allowed_domains=[<span class="string">'baidu.com'</span>]</span><br><span class="line">start_urls=(</span><br><span class="line"><span class="string">'http://www.baidu.com/'</span>,</span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self,response)</span>:</span></span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>  要建立一个spider,必须使用scrapy.Spider类创建一个子类,并确定了三个强制的属性和一个方法</p></li><li>name=”” : 爬虫的识别名称,必须是唯一的,在不同的爬虫必须定义不同的名字</li><li>allow_domains=[] 是搜索的域名范围,也就是爬虫的约束区域,规定爬虫只爬取这个域名下的网页,不存在的URL会被忽略</li><li>start_urls=() : 爬取的URL元组/列表  爬虫从这里开始抓取数据,所以第一次下载的数据将会从这些urls开始,其他子URL将会从这些起始URL中继承性生成</li><li>parse(self,response) : 解析的方法,每个初始URL完成下载后将被调用,调用的时候传入从每一个URL传回的Response对象来作为唯一参数,主要作用如下:<pre><code>- 1.负责解析返回的网页数据(response.body),提取结构化数据(生成item)- 2. 生成需要下一页的url请求</code></pre>  其下主要文件的作用:<br>  scrapy.cfg:  项目的配置文件<br>  myspider/:   项目的python模块,将会从这里引用代码<br>  myspider/items.py: 项目的目标文件<br>  myspider/pipelines.py: 项目的管道文件<br>  myspider/settings.py : 项目的设置文件<br>  myspider/spiders/:  存储爬虫代码的目录<br>[<img src="https://app.yinxiang.com/shard/s72/nl/17181203/37483a84-cdc3-4ef5-be9d-a6024e0cb297" alt="爬虫小结.xmind">]</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;爬虫的定义&quot;&gt;&lt;a href=&quot;#爬虫的定义&quot; class=&quot;headerlink&quot; title=&quot;爬虫的定义:&quot;&gt;&lt;/a&gt;爬虫的定义:&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;模拟浏览器发送请求,获取响应&lt;/li&gt;
&lt;li&gt;浏览器能够看到的,爬虫才能获取到,否则没办法获取,故基于html的&lt;/li&gt;
&lt;li&gt;爬虫分为通用爬虫和聚焦爬虫
    
    </summary>
    
    
      <category term="python爬虫" scheme="https://dannieldylan.github.io/danniel/tags/python%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>python的基础知识回顾</title>
    <link href="https://dannieldylan.github.io/danniel/2018/01/19/python%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E5%9B%9E%E9%A1%BE/"/>
    <id>https://dannieldylan.github.io/danniel/2018/01/19/python的基础知识回顾/</id>
    <published>2018-01-19T12:42:05.000Z</published>
    <updated>2018-06-12T05:01:35.032Z</updated>
    
    <content type="html"><![CDATA[<h6 id="配置Windows下的CMD命令-Python27与Python36的优先级"><a href="#配置Windows下的CMD命令-Python27与Python36的优先级" class="headerlink" title="配置Windows下的CMD命令:Python27与Python36的优先级?"></a>配置Windows下的CMD命令:Python27与Python36的优先级?</h6><ul><li>D:\Python36\Scripts\;</li><li>D:\Python36\; (该项在环境变量靠前,Cmd 解读的就-是python3,想要Python27优先使用同该步骤)<a id="more"></a></li><li>D:\Python36\python3.exe;//为了区别与Python2.X的程序再加个3</li><li>D:\Python27\python.exe;</li><li>D:Python27\Scripts\;</li><li>D:\Python27\</li></ul><h4 id="命令使用"><a href="#命令使用" class="headerlink" title="命令使用"></a>命令使用</h4><ul><li>C:\Python27\python -V #查看python 2的版本号</li><li>C:\Python34\python -V #查看python 3的版本号</li><li>C:\Python27\python #进入python 2的console</li><li>C:\Python34\python #进入python 3的console</li><li>C:\Python27\python *.py #使用python 2执行文件</li><li>C:\Python34\python *.py #使用python 3执行文件<h5 id="python27执行pip安装"><a href="#python27执行pip安装" class="headerlink" title="python27执行pip安装:"></a>python27执行pip安装:</h5></li><li>1,pip2 –version —&gt;2, pip2 install +模块   or pip.exe install + 模块</li><li>python36执行pip安装:<br>1,pip3 –version —&gt;2, pip3 install +模块</li></ul><h3 id="源码安装"><a href="#源码安装" class="headerlink" title="源码安装"></a>源码安装</h3><h6 id="下载代码-安装"><a href="#下载代码-安装" class="headerlink" title="下载代码,安装"></a>下载代码,安装</h6><h4 id="1-先下载"><a href="#1-先下载" class="headerlink" title="1.先下载"></a>1.先下载</h4><p>解压</p><p>进入目录</p><ul><li>执行Python setup.py install</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">  import sys,<span class="built_in">time</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">31</span>):</span><br><span class="line">    sys.<span class="built_in">stdout</span>.<span class="built_in">write</span>(<span class="string">"\r"</span>)</span><br><span class="line">    sys.<span class="built_in">stdout</span>.<span class="built_in">write</span>(<span class="string">"\n%s%% |%s"</span> % (int(i/<span class="number">30</span>*<span class="number">100</span>),int(i/<span class="number">30</span>*<span class="number">100</span>)*<span class="string">"|"</span>))</span><br><span class="line">    sys.<span class="built_in">stdout</span>.<span class="built_in">flush</span>()</span><br><span class="line">    <span class="built_in">time</span>.sleep(<span class="number">0.5</span>)</span><br></pre></td></tr></table></figure><h6 id="Python的输入与输出："><a href="#Python的输入与输出：" class="headerlink" title="Python的输入与输出："></a>Python的输入与输出：</h6><p>在Python2.x 中使用raw_input（“”）<br>password = raw_input(“请输入密码:”)<br>   print ‘您刚刚输入的密码是:’, password<br>在Python3.x 中使用input（“”）</p><p>python支持以下几种运算符</p><hr><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:left">+</td><td style="text-align:left">加</td><td style="text-align:left">两个对象相加 a+b 输出结果 30</td></tr><tr><td style="text-align:left">减</td><td style="text-align:left">得到负数或是一个数减去另一个数</td><td style="text-align:left">a - b 输出结果 -10</td></tr><tr><td style="text-align:left">*</td><td style="text-align:left">乘</td><td style="text-align:left">两个数相乘或是返回一个被重复若干次的字符串 a * b 输出结果 200</td></tr><tr><td style="text-align:left">/</td><td style="text-align:left">除</td><td style="text-align:left">x除以y b / a 输出结果 2</td></tr><tr><td style="text-align:left">%</td><td style="text-align:left">取余</td><td style="text-align:left">返回除法的余数 b % a 输出结果 0</td></tr><tr><td style="text-align:left">**</td><td style="text-align:left">幂</td><td style="text-align:left">返回x的y次幂 a**b 为10的20次方， 输出结果 100000000000000000000</td></tr><tr><td style="text-align:left">//</td><td style="text-align:left">取整除</td><td style="text-align:left">返回商的整数部分 9//2 输出结果 4 , 9.0//2.0 输出结果 4.0</td></tr></tbody></table><hr><p>赋值运算符</p><hr><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:left">=</td><td style="text-align:left">赋值运算符</td><td style="text-align:left">把=号右边的结果给左边的变量 num=1+2*3 结果num的值为7</td></tr></tbody></table><hr><p>复合赋值运算符</p><hr><table><thead><tr><th style="text-align:left">运算符</th><th style="text-align:left">描述</th><th style="text-align:left">实例</th></tr></thead><tbody><tr><td style="text-align:left">+=</td><td style="text-align:left">加法赋值运算符</td><td style="text-align:left">c += a 等效于 c = c + a</td></tr><tr><td style="text-align:left">-=</td><td style="text-align:left">减法赋值运算符</td><td style="text-align:left">c -= a 等效于 c = c - a</td></tr><tr><td style="text-align:left">*=</td><td style="text-align:left">乘法赋值运算符</td><td style="text-align:left">c = a 等效于 c = c a</td></tr><tr><td style="text-align:left">/=</td><td style="text-align:left">除法赋值运算符</td><td style="text-align:left">c /= a 等效于 c = c / a</td></tr><tr><td style="text-align:left">%=</td><td style="text-align:left">取模赋值运算符</td><td style="text-align:left">c %= a 等效于 c = c % a</td></tr><tr><td style="text-align:left">**=</td><td style="text-align:left">幂赋值运算符</td><td style="text-align:left">c = a 等效于 c = c a</td></tr><tr><td style="text-align:left">//=</td><td style="text-align:left">取整除赋值运算符</td><td style="text-align:left">c //= a 等效于 c = c // a</td></tr></tbody></table><hr><p>字符串 str<br><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">name</span> = “daixiangyu”</span><br><span class="line"><span class="built_in">print</span>（<span class="keyword">name</span>[<span class="number">0</span>:<span class="number">5</span>]）  输出： --&gt;“daixi”   # 取 下标为<span class="number">0</span>~<span class="number">4</span> 的字符</span><br><span class="line">索引 find ：检测 str 是否包含在 mystr中，如果是返回开始的索引值，否则返回-<span class="number">1</span></span><br><span class="line"><span class="built_in">index</span>跟find()方法一样，只不过如果str不在 mystr中会报一个异常.</span><br><span class="line"><span class="built_in">count</span>返回 str在start和<span class="keyword">end</span>之间 在 <span class="keyword">name</span>里面出现的次数</span><br></pre></td></tr></table></figure></p><figure class="highlight julia"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br></pre></td><td class="code"><pre><span class="line">class str(object):</span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    str(object='') -&gt; str</span></span><br><span class="line"><span class="string">    str(bytes_or_buffer[, encoding[, errors]]) -&gt; str</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Create a new string object from the given object. If encoding or</span></span><br><span class="line"><span class="string">    errors is specified, then the object must expose a data buffer</span></span><br><span class="line"><span class="string">    that will be decoded using the given encoding and error handler.</span></span><br><span class="line"><span class="string">    Otherwise, returns the result of object.__str__() (if defined)</span></span><br><span class="line"><span class="string">    or repr(object).</span></span><br><span class="line"><span class="string">    encoding defaults to sys.getdefaultencoding().</span></span><br><span class="line"><span class="string">    errors defaults to 'strict'.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    def capitalize(self): <span class="comment"># real signature unknown; restored from __doc__</span></span><br><span class="line">        <span class="string">""" #将 字符串首字母 小写改大写</span></span><br><span class="line"><span class="string">        S.capitalize() -&gt; str</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Return a capitalized version of S, i.e. make the first character</span></span><br><span class="line"><span class="string">        have upper case and the rest lower case.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line"></span><br><span class="line">    def casefold(self): <span class="comment"># real signature unknown; restored from __doc__</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        S.casefold() -&gt; str</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Return a version of S suitable for caseless comparisons.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line"></span><br><span class="line">    def center(self, width, fillchar=None): <span class="comment"># real signature unknown; restored from __doc__</span></span><br><span class="line">        <span class="string">""" 可以为字符串 填充自定字符 长度=字符+指定字符</span></span><br><span class="line"><span class="string">        S.center(width[, fillchar]) -&gt; str</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Return S centered in a string of length width. Padding is</span></span><br><span class="line"><span class="string">        done using the specified fill character (default is a space)</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line"></span><br><span class="line">    def count(self, sub, start=None, <span class="keyword">end</span>=None): <span class="comment"># real signature unknown; restored from __doc__</span></span><br><span class="line">        <span class="string">"""  下面是详细参数：</span></span><br><span class="line"><span class="string">　　　　　　　　子串：是要搜索的子串。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">　　　　　　　　开始：从该指数开始搜索。第一个字符从索引0开始。通过默认搜索引擎从索引0开始。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">　　　　　　　　结束：搜索从该指数结束。第一个字符从索引0开始。默认情况下，搜索结束，在最后一个索引。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        S.count(sub[, start[, end]]) -&gt; int</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Return the number of non-overlapping occurrences of substring sub in</span></span><br><span class="line"><span class="string">        string S[start:end].  Optional arguments start and end are</span></span><br><span class="line"><span class="string">        interpreted as in slice notation.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    def encode(self, encoding='utf-<span class="number">8</span>', errors='strict'): <span class="comment"># real signature unknown; restored from __doc__</span></span><br><span class="line">        <span class="string">""" 编码 上面有介绍</span></span><br><span class="line"><span class="string">        S.encode(encoding='utf-8', errors='strict') -&gt; bytes</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Encode S using the codec registered for encoding. Default encoding</span></span><br><span class="line"><span class="string">        is 'utf-8'. errors may be given to set a different error</span></span><br><span class="line"><span class="string">        handling scheme. Default is 'strict' meaning that encoding errors raise</span></span><br><span class="line"><span class="string">        a UnicodeEncodeError. Other possible values are 'ignore', 'replace' and</span></span><br><span class="line"><span class="string">        'xmlcharrefreplace' as well as any other name registered with</span></span><br><span class="line"><span class="string">        codecs.register_error that can handle UnicodeEncodeErrors.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">b""</span></span><br><span class="line"></span><br><span class="line">    def endswith(self, suffix, start=None, <span class="keyword">end</span>=None): <span class="comment"># real signature unknown; restored from __doc__</span></span><br><span class="line">        <span class="string">"""  以 某个字符结束</span></span><br><span class="line"><span class="string">　　　　　　　　　　suffix -- 该参数可以是一个字符串或者是一个元素。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">　　　　　　start -- 字符串中的开始位置。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">　　　　　　end -- 字符中结束位置。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">　　　　　　返回值</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">　　　　　　如果字符串含有指定的后缀返回True，否则返回False。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        S.endswith(suffix[, start[, end]]) -&gt; bool</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Return True if S ends with the specified suffix, False otherwise.</span></span><br><span class="line"><span class="string">        With optional start, test S beginning at that position.</span></span><br><span class="line"><span class="string">        With optional end, stop comparing S at that position.</span></span><br><span class="line"><span class="string">        suffix can also be a tuple of strings to try.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> False</span><br><span class="line"></span><br><span class="line">    def expandtabs(self, tabsize=<span class="number">8</span>): <span class="comment"># real signature unknown; restored from __doc__</span></span><br><span class="line">        <span class="string">""" 把tab转换成空格</span></span><br><span class="line"><span class="string">        S.expandtabs(tabsize=8) -&gt; str</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Return a copy of S where all tab characters are expanded using spaces.</span></span><br><span class="line"><span class="string">        If tabsize is not given, a tab size of 8 characters is assumed.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line"></span><br><span class="line">    def find(self, sub, start=None, <span class="keyword">end</span>=None): <span class="comment"># real signature unknown; restored from __doc__</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">find(str, pos_start, pos_end)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">解释：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">　　str:被查找“字串”</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">　　pos_start:查找的首字母位置（从0开始计数。默认：0）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">　　pos_end: 查找的末尾位置（默认-1）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">返回值：如果查到：返回查找的第一个出现的位置。否则，返回-1。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        S.find(sub[, start[, end]]) -&gt; int</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Return the lowest index in S where substring sub is found,</span></span><br><span class="line"><span class="string">        such that sub is contained within S[start:end].  Optional</span></span><br><span class="line"><span class="string">        arguments start and end are interpreted as in slice notation.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Return -1 on failure.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    def format(*args, **kwargs): <span class="comment"># known special case of str.format</span></span><br><span class="line">        <span class="string">"""  占位符  类似变量引用</span></span><br><span class="line"><span class="string">　　　　　　s = "print hell &#123;0&#125; ,age &#123;1&#125;"</span></span><br><span class="line"><span class="string">　　　　　　print(s.format('alex',19))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        S.format(*args, **kwargs) -&gt; str</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Return a formatted version of S, using substitutions from args and kwargs.</span></span><br><span class="line"><span class="string">        The substitutions are identified by braces ('&#123;' and '&#125;').</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    def format_map(self, mapping): <span class="comment"># real signature unknown; restored from __doc__</span></span><br><span class="line">        <span class="string">"""字符串格式化，动态参数，将函数式编程时细说</span></span><br><span class="line"><span class="string">        S.format_map(mapping) -&gt; str</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Return a formatted version of S, using substitutions from mapping.</span></span><br><span class="line"><span class="string">        The substitutions are identified by braces ('&#123;' and '&#125;').</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line"></span><br><span class="line">    def index(self, sub, start=None, <span class="keyword">end</span>=None): <span class="comment"># real signature unknown; restored from __doc__</span></span><br><span class="line">        <span class="string">""" #跟find类似但是 没有找到的话会报错。 而find是返回-1</span></span><br><span class="line"><span class="string">        S.index(sub[, start[, end]]) -&gt; int</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Like S.find() but raise ValueError when the substring is not found.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    def isalnum(self): <span class="comment"># real signature unknown; restored from __doc__</span></span><br><span class="line">        <span class="string">""" #判断是否是数字和字母</span></span><br><span class="line"><span class="string">        S.isalnum() -&gt; bool</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Return True if all characters in S are alphanumeric</span></span><br><span class="line"><span class="string">        and there is at least one character in S, False otherwise.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> False</span><br><span class="line"></span><br><span class="line">    def isalpha(self): <span class="comment"># real signature unknown; restored from __doc__</span></span><br><span class="line">        <span class="string">"""是否是字母</span></span><br><span class="line"><span class="string">        S.isalpha() -&gt; bool</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Return True if all characters in S are alphabetic</span></span><br><span class="line"><span class="string">        and there is at least one character in S, False otherwise.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> False</span><br><span class="line"></span><br><span class="line">    def isdecimal(self): <span class="comment"># real signature unknown; restored from __doc__</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        S.isdecimal() -&gt; bool</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Return True if there are only decimal characters in S,</span></span><br><span class="line"><span class="string">        False otherwise.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> False</span><br><span class="line"></span><br><span class="line">    def isdigit(self): <span class="comment"># real signature unknown; restored from __doc__</span></span><br><span class="line">        <span class="string">""" 是否是数字</span></span><br><span class="line"><span class="string">        S.isdigit() -&gt; bool</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Return True if all characters in S are digits</span></span><br><span class="line"><span class="string">        and there is at least one character in S, False otherwise.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> False</span><br><span class="line"></span><br><span class="line">    def isidentifier(self): <span class="comment"># real signature unknown; restored from __doc__</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        S.isidentifier() -&gt; bool</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Return True if S is a valid identifier according</span></span><br><span class="line"><span class="string">        to the language definition.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Use keyword.iskeyword() to test for reserved identifiers</span></span><br><span class="line"><span class="string">        such as "def" and "class".</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> False</span><br><span class="line"></span><br><span class="line">    def islower(self): <span class="comment"># real signature unknown; restored from __doc__</span></span><br><span class="line">        <span class="string">"""是否小写字母</span></span><br><span class="line"><span class="string">        S.islower() -&gt; bool</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Return True if all cased characters in S are lowercase and there is</span></span><br><span class="line"><span class="string">        at least one cased character in S, False otherwise.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> False</span><br><span class="line"></span><br><span class="line">    def isnumeric(self): <span class="comment"># real signature unknown; restored from __doc__</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        S.isnumeric() -&gt; bool</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Return True if there are only numeric characters in S,</span></span><br><span class="line"><span class="string">        False otherwise.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> False</span><br><span class="line"></span><br><span class="line">    def isprintable(self): <span class="comment"># real signature unknown; restored from __doc__</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        S.isprintable() -&gt; bool</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Return True if all characters in S are considered</span></span><br><span class="line"><span class="string">        printable in repr() or S is empty, False otherwise.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> False</span><br><span class="line"></span><br><span class="line">    def isspace(self): <span class="comment"># real signature unknown; restored from __doc__</span></span><br><span class="line">        <span class="string">"""是否是空格</span></span><br><span class="line"><span class="string">        S.isspace() -&gt; bool</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Return True if all characters in S are whitespace</span></span><br><span class="line"><span class="string">        and there is at least one character in S, False otherwise.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> False</span><br><span class="line"></span><br><span class="line">    def istitle(self): <span class="comment"># real signature unknown; restored from __doc__</span></span><br><span class="line">        <span class="string">""" 是否是标题  字符串开头是大写 后面是小写</span></span><br><span class="line"><span class="string">        S.istitle() -&gt; bool</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Return True if S is a titlecased string and there is at least one</span></span><br><span class="line"><span class="string">        character in S, i.e. upper- and titlecase characters may only</span></span><br><span class="line"><span class="string">        follow uncased characters and lowercase characters only cased ones.</span></span><br><span class="line"><span class="string">        Return False otherwise.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> False</span><br><span class="line"></span><br><span class="line">    def isupper(self): <span class="comment"># real signature unknown; restored from __doc__</span></span><br><span class="line">        <span class="string">""" 是否是大写</span></span><br><span class="line"><span class="string">        S.isupper() -&gt; bool</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Return True if all cased characters in S are uppercase and there is</span></span><br><span class="line"><span class="string">        at least one cased character in S, False otherwise.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> False</span><br><span class="line"></span><br><span class="line">    def join(self, iterable): <span class="comment"># real signature unknown; restored from __doc__</span></span><br><span class="line">        <span class="string">""" 拼接 后面有例子</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        S.join(iterable) -&gt; str</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        Return a string which is the concatenation of the strings in the</span></span><br><span class="line"><span class="string">        iterable.  The separator between elements is S.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">""</span></span><br><span class="line"></span><br><span class="line">    def ljust(self, width, fillchar=None): <span class="comment"># real signature unknown; restored from __doc__</span></span><br><span class="line">        <span class="string">""" 内容左对齐，右侧填充</span></span><br><span class="line"><span class="string">　　　　ljust()方法语法：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">　　　　str.ljust(width[, fillchar])</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">　　　　参数</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">　　　　width -- 指定字符串长度。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">　　　　fillchar -- 填充字符，默认为空格。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">　　　　返回值</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">　　　　返回一个原字符串左对齐,并使用空格填充至指定长度的新字符串。如果指定的长度小于原字符串的长度则返回原字符串。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> S.ljust(width[, fillchar]) -&gt; str Return S left-justified in a Unicode string of length width. Padding is done using the specified fill character (default is a space). """</span> <span class="keyword">return</span> <span class="string">""</span> def lower(self): <span class="comment"># real signature unknown; restored from __doc__ """ 转换为小写 S.lower() -&gt; str Return a copy of the string S converted to lowercase. """ return "" def lstrip(self, chars=None): # real signature unknown; restored from __doc__ """ 去除左侧开头空白 S.lstrip([chars]) -&gt; str Return a copy of the string S with leading whitespace removed. If chars is given and not None, remove characters in chars instead. """ return "" def maketrans(self, *args, **kwargs): # real signature unknown """ Return a translation table usable for str.translate(). If there is only one argument, it must be a dictionary mapping Unicode ordinals (integers) or characters to Unicode ordinals, strings or None. Character keys will be then converted to ordinals. If there are two arguments, they must be strings of equal length, and in the resulting dictionary, each character in x will be mapped to the character at the same position in y. If there is a third argument, it must be a string, whose characters will be mapped to None in the result. """ pass def partition(self, sep): # real signature unknown; restored from __doc__ """ 以指定 字符 开始分割 指定的字符也显示 S.partition(sep) -&gt; (head, sep, tail) Search for the separator sep in S, and return the part before it, the separator itself, and the part after it. If the separator is not found, return S and two empty strings. """ pass def replace(self, old, new, count=None): # real signature unknown; restored from __doc__ """ 替换</span></span><br><span class="line">　　　　old -- 将被替换的子字符串。</span><br><span class="line"></span><br><span class="line">　　　　new -- 新字符串，用于替换old子字符串。</span><br><span class="line"></span><br><span class="line">　　　　max -- 可选字符串, 替换不超过 max 次</span><br><span class="line"></span><br><span class="line">　　　　返回值</span><br><span class="line"></span><br><span class="line">　　　　返回字符串中的 old（旧字符串） 替换成 new(新字符串)后生成的新字符串，如果指定第三个参数max，则替换不超过 max 次。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        S.replace(old, new[, count]) -&gt; str</span><br><span class="line"></span><br><span class="line">        Return a copy of S with all occurrences of substring</span><br><span class="line">        old replaced by new.  If the optional argument count is</span><br><span class="line">        given, only the first count occurrences are replaced.</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        return ""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def rfind(self, sub, start=None, end=None): # real signature unknown; restored from __doc__</span></span><br><span class="line"><span class="string">        """</span> 从右开始查找</span><br><span class="line">        S.rfind(sub[, start[, <span class="keyword">end</span>]]) -&gt; int</span><br><span class="line"></span><br><span class="line">        Return the highest index <span class="keyword">in</span> S <span class="keyword">where</span> substring sub is found,</span><br><span class="line">        such that sub is contained within S[start:<span class="keyword">end</span>].  Optional</span><br><span class="line">        arguments start and <span class="keyword">end</span> are interpreted as <span class="keyword">in</span> slice notation.</span><br><span class="line"></span><br><span class="line">        Return -<span class="number">1</span> on failure.</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        return 0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def rindex(self, sub, start=None, end=None): # real signature unknown; restored from __doc__</span></span><br><span class="line"><span class="string">        """</span> 顾名思义从右侧匹配</span><br><span class="line">        S.rindex(sub[, start[, <span class="keyword">end</span>]]) -&gt; int</span><br><span class="line"></span><br><span class="line">        Like S.rfind() but raise ValueError when the substring is not found.</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        return 0</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def rjust(self, width, fillchar=None): # real signature unknown; restored from __doc__</span></span><br><span class="line"><span class="string">        """</span> 从右侧 填充</span><br><span class="line">        S.rjust(width[, fillchar]) -&gt; str</span><br><span class="line"></span><br><span class="line">        Return S right-justified <span class="keyword">in</span> a string of length width. Padding is</span><br><span class="line">        done <span class="keyword">using</span> the specified fill character (default is a space).</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        return ""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def rpartition(self, sep): # real signature unknown; restored from __doc__</span></span><br><span class="line"><span class="string">        """</span> 从右侧开始找到 分割 分割字符也显示</span><br><span class="line">        S.rpartition(sep) -&gt; (head, sep, tail)</span><br><span class="line"></span><br><span class="line">        Search <span class="keyword">for</span> the separator sep <span class="keyword">in</span> S, starting at the <span class="keyword">end</span> of S, and <span class="keyword">return</span></span><br><span class="line">        the part before it, the separator itself, and the part after it.  If the</span><br><span class="line">        separator is not found, <span class="keyword">return</span> two empty strings and S.</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        pass</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def rsplit(self, sep=None, maxsplit=-1): # real signature unknown; restored from __doc__</span></span><br><span class="line"><span class="string">        """</span> 从右侧开始分割 sep是指定几个</span><br><span class="line">        S.rsplit(sep=None, maxsplit=-<span class="number">1</span>) -&gt; list of strings</span><br><span class="line"></span><br><span class="line">        Return a list of the words <span class="keyword">in</span> S, <span class="keyword">using</span> sep as the</span><br><span class="line">        delimiter string, starting at the <span class="keyword">end</span> of the string and</span><br><span class="line">        working to the front.  If maxsplit is given, at most maxsplit</span><br><span class="line">        splits are done. If sep is not specified, any whitespace string</span><br><span class="line">        is a separator.</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        return []</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def rstrip(self, chars=None): # real signature unknown; restored from __doc__</span></span><br><span class="line"><span class="string">        """</span> 从右侧 去除结尾的空格</span><br><span class="line">        S.rstrip([chars]) -&gt; str</span><br><span class="line"></span><br><span class="line">        Return a copy of the string S with trailing whitespace removed.</span><br><span class="line">        If chars is given and not None, remove characters <span class="keyword">in</span> chars instead.</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        return ""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def split(self, sep=None, maxsplit=-1): # real signature unknown; restored from __doc__</span></span><br><span class="line"><span class="string">        """</span> 分割 sep是几个算分割符</span><br><span class="line">        S.split(sep=None, maxsplit=-<span class="number">1</span>) -&gt; list of strings</span><br><span class="line"></span><br><span class="line">        Return a list of the words <span class="keyword">in</span> S, <span class="keyword">using</span> sep as the</span><br><span class="line">        delimiter string.  If maxsplit is given, at most maxsplit</span><br><span class="line">        splits are done. If sep is not specified or is None, any</span><br><span class="line">        whitespace string is a separator and empty strings are</span><br><span class="line">        removed from the result.</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        return []</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def splitlines(self, keepends=None): # real signature unknown; restored from __doc__</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        S.splitlines([keepends]) -&gt; list of strings</span><br><span class="line"></span><br><span class="line">        Return a list of the lines <span class="keyword">in</span> S, breaking at line boundaries.</span><br><span class="line">        Line breaks are not included <span class="keyword">in</span> the resulting list unless keepends</span><br><span class="line">        is given and <span class="literal">true</span>.</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        return []</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def startswith(self, prefix, start=None, end=None): # real signature unknown; restored from __doc__</span></span><br><span class="line"><span class="string">        """</span> 指定以什么开始</span><br><span class="line">        S.startswith(prefix[, start[, <span class="keyword">end</span>]]) -&gt; bool</span><br><span class="line"></span><br><span class="line">        Return True <span class="keyword">if</span> S starts with the specified prefix, False otherwise.</span><br><span class="line">        With optional start, test S beginning at that position.</span><br><span class="line">        With optional <span class="keyword">end</span>, stop comparing S at that position.</span><br><span class="line">        prefix can also be a tuple of strings to <span class="keyword">try</span>.</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        return False</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def strip(self, chars=None): # real signature unknown; restored from __doc__</span></span><br><span class="line"><span class="string">        """</span>  去除两端空格</span><br><span class="line">        S.strip([chars]) -&gt; str</span><br><span class="line"></span><br><span class="line">        Return a copy of the string S with leading and trailing</span><br><span class="line">        whitespace removed.</span><br><span class="line">        If chars is given and not None, remove characters <span class="keyword">in</span> chars instead.</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        return ""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def swapcase(self): # real signature unknown; restored from __doc__</span></span><br><span class="line"><span class="string">        """</span> 大写转小写小写转大写</span><br><span class="line">        S.swapcase() -&gt; str</span><br><span class="line"></span><br><span class="line">        Return a copy of S with uppercase characters converted to lowercase</span><br><span class="line">        and vice versa.</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        return ""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def title(self): # real signature unknown; restored from __doc__</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        S.title() -&gt; str</span><br><span class="line"></span><br><span class="line">        Return a titlecased version of S, i.<span class="literal">e</span>. words start with title case</span><br><span class="line">        characters, all remaining cased characters have lower case.</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        return ""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def translate(self, table): # real signature unknown; restored from __doc__</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">　　　　转换，需要先做一个对应表，最后一个表示删除字符集合</span><br><span class="line">　　　　intab = <span class="string">"aeiou"</span></span><br><span class="line">　　　　outtab = <span class="string">"12345"</span></span><br><span class="line">　　　　trantab = maketrans(intab, outtab)</span><br><span class="line">　　　　str = <span class="string">"this is string example....wow!!!"print</span> str.translate(trantab, 'xm')</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        S.translate(table) -&gt; str</span><br><span class="line"></span><br><span class="line">        Return a copy of the string S <span class="keyword">in</span> which each character has been mapped</span><br><span class="line">        through the given translation table. The table must implement</span><br><span class="line">        lookup/indexing via __getitem__, <span class="keyword">for</span> instance a dictionary or list,</span><br><span class="line">        mapping Unicode ordinals to Unicode ordinals, strings, or None. If</span><br><span class="line">        this operation raises LookupError, the character is left untouched.</span><br><span class="line">        Characters mapped to None are deleted.</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        return ""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def upper(self): # real signature unknown; restored from __doc__</span></span><br><span class="line"><span class="string">        """</span> 大写显示</span><br><span class="line">        S.upper() -&gt; str</span><br><span class="line"></span><br><span class="line">        Return a copy of S converted to uppercase.</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        return ""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def zfill(self, width): # real signature unknown; restored from __doc__</span></span><br><span class="line"><span class="string">        """</span> 方法返回指定长度的字符串，原字符串右对齐，前面填充<span class="number">0</span>。</span><br><span class="line">        S.zfill(width) -&gt; str</span><br><span class="line"></span><br><span class="line">        Pad a numeric string S with zeros on the left, to fill a field</span><br><span class="line">        of the specified width. The string S is never truncated.</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        return ""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def __add__(self, *args, **kwargs): # real signature unknown</span></span><br><span class="line"><span class="string">        """</span> Return self+value. <span class="string">"""</span></span><br><span class="line"><span class="string">        pass</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def __contains__(self, *args, **kwargs): # real signature unknown</span></span><br><span class="line"><span class="string">        """</span> Return key <span class="keyword">in</span> self. <span class="string">"""</span></span><br><span class="line"><span class="string">        pass</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def __eq__(self, *args, **kwargs): # real signature unknown</span></span><br><span class="line"><span class="string">        """</span> Return self==value. <span class="string">"""</span></span><br><span class="line"><span class="string">        pass</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def __format__(self, format_spec): # real signature unknown; restored from __doc__</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        S.__format__(format_spec) -&gt; str</span><br><span class="line"></span><br><span class="line">        Return a formatted version of S as described by format_spec.</span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        return ""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def __getattribute__(self, *args, **kwargs): # real signature unknown</span></span><br><span class="line"><span class="string">        """</span> Return getattr(self, name). <span class="string">"""</span></span><br><span class="line"><span class="string">        pass</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def __getitem__(self, *args, **kwargs): # real signature unknown</span></span><br><span class="line"><span class="string">        """</span> Return self[key]. <span class="string">"""</span></span><br><span class="line"><span class="string">        pass</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def __getnewargs__(self, *args, **kwargs): # real signature unknown</span></span><br><span class="line"><span class="string">        pass</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def __ge__(self, *args, **kwargs): # real signature unknown</span></span><br><span class="line"><span class="string">        """</span> Return self&gt;=value. <span class="string">"""</span></span><br><span class="line"><span class="string">        pass</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def __gt__(self, *args, **kwargs): # real signature unknown</span></span><br><span class="line"><span class="string">        """</span> Return self&gt;value. <span class="string">"""</span></span><br><span class="line"><span class="string">        pass</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def __hash__(self, *args, **kwargs): # real signature unknown</span></span><br><span class="line"><span class="string">        """</span> Return hash(self). <span class="string">"""</span></span><br><span class="line"><span class="string">        pass</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def __init__(self, value='', encoding=None, errors='strict'): # known special case of str.__init__</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        str(object='') -&gt; str</span><br><span class="line">        str(bytes_or_buffer[, encoding[, errors]]) -&gt; str</span><br><span class="line"></span><br><span class="line">        Create a new string object from the given object. If encoding or</span><br><span class="line">        errors is specified, then the object must expose a data buffer</span><br><span class="line">        that will be decoded <span class="keyword">using</span> the given encoding and error handler.</span><br><span class="line">        Otherwise, returns the result of object.__str__() (<span class="keyword">if</span> defined)</span><br><span class="line">        or repr(object).</span><br><span class="line">        encoding defaults to sys.getdefaultencoding().</span><br><span class="line">        errors defaults to 'strict'.</span><br><span class="line">        <span class="comment"># (copied from class doc)</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        pass</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def __iter__(self, *args, **kwargs): # real signature unknown</span></span><br><span class="line"><span class="string">        """</span> Implement iter(self). <span class="string">"""</span></span><br><span class="line"><span class="string">        pass</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def __len__(self, *args, **kwargs): # real signature unknown</span></span><br><span class="line"><span class="string">        """</span> Return len(self). <span class="string">"""</span></span><br><span class="line"><span class="string">        pass</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def __le__(self, *args, **kwargs): # real signature unknown</span></span><br><span class="line"><span class="string">        """</span> Return self&lt;=value. <span class="string">"""</span></span><br><span class="line"><span class="string">        pass</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def __lt__(self, *args, **kwargs): # real signature unknown</span></span><br><span class="line"><span class="string">        """</span> Return self&lt;value. <span class="string">"""</span></span><br><span class="line"><span class="string">        pass</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def __mod__(self, *args, **kwargs): # real signature unknown</span></span><br><span class="line"><span class="string">        """</span> Return self%value. <span class="string">"""</span></span><br><span class="line"><span class="string">        pass</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def __mul__(self, *args, **kwargs): # real signature unknown</span></span><br><span class="line"><span class="string">        """</span> Return self*value.n <span class="string">"""</span></span><br><span class="line"><span class="string">        pass</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    @staticmethod # known case of __new__</span></span><br><span class="line"><span class="string">    def __new__(*args, **kwargs): # real signature unknown</span></span><br><span class="line"><span class="string">        """</span> Create and <span class="keyword">return</span> a new object.  See help(<span class="keyword">type</span>) <span class="keyword">for</span> accurate signature. <span class="string">"""</span></span><br><span class="line"><span class="string">        pass</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def __ne__(self, *args, **kwargs): # real signature unknown</span></span><br><span class="line"><span class="string">        """</span> Return self!=value. <span class="string">"""</span></span><br><span class="line"><span class="string">        pass</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def __repr__(self, *args, **kwargs): # real signature unknown</span></span><br><span class="line"><span class="string">        """</span> Return repr(self). <span class="string">"""</span></span><br><span class="line"><span class="string">        pass</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def __rmod__(self, *args, **kwargs): # real signature unknown</span></span><br><span class="line"><span class="string">        """</span> Return value%self. <span class="string">"""</span></span><br><span class="line"><span class="string">        pass</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def __rmul__(self, *args, **kwargs): # real signature unknown</span></span><br><span class="line"><span class="string">        """</span> Return self*value. <span class="string">"""</span></span><br><span class="line"><span class="string">        pass</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def __sizeof__(self): # real signature unknown; restored from __doc__</span></span><br><span class="line"><span class="string">        """</span> S.__sizeof__() -&gt; size of S <span class="keyword">in</span> memory, <span class="keyword">in</span> bytes <span class="string">"""</span></span><br><span class="line"><span class="string">        pass</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    def __str__(self, *args, **kwargs): # real signature unknown</span></span><br><span class="line"><span class="string">        """</span> Return str(self). <span class="string">"""</span></span><br><span class="line"><span class="string">        pass</span></span><br></pre></td></tr></table></figure><p>示例<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">list</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    list() -&gt; new empty list</span></span><br><span class="line"><span class="string">    list(iterable) -&gt; new list initialized from iterable's items</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">append</span><span class="params">(self, p_object)</span>:</span> <span class="comment"># real signature unknown; restored from __doc__</span></span><br><span class="line">        <span class="string">"""  添加 元素</span></span><br><span class="line"><span class="string">　　　　　　L.append(object) -&gt; None -- append object to end """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clear</span><span class="params">(self)</span>:</span> <span class="comment"># real signature unknown; restored from __doc__</span></span><br><span class="line">        <span class="string">"""  清空元素</span></span><br><span class="line"><span class="string">　　　　L.clear() -&gt; None -- remove all items from L """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">copy</span><span class="params">(self)</span>:</span> <span class="comment"># real signature unknown; restored from __doc__</span></span><br><span class="line">        <span class="string">""" 浅copy  L.copy() -&gt; list -- a shallow copy of L """</span></span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">count</span><span class="params">(self, value)</span>:</span> <span class="comment"># real signature unknown; restored from __doc__</span></span><br><span class="line">        <span class="string">""" 匹配 value的个数   L.count(value) -&gt; integer -- return number of occurrences of value """</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">extend</span><span class="params">(self, iterable)</span>:</span> <span class="comment"># real signature unknown; restored from __doc__</span></span><br><span class="line">        <span class="string">""" 拼接两个列表   L.extend(iterable) -&gt; None -- extend list by appending elements from the iterable """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(self, value, start=None, stop=None)</span>:</span> <span class="comment"># real signature unknown; restored from __doc__</span></span><br><span class="line">        <span class="string">""" 返回 某个value 的索引</span></span><br><span class="line"><span class="string">        L.index(value, [start, [stop]]) -&gt; integer -- return first index of value.</span></span><br><span class="line"><span class="string">        Raises ValueError if the value is not present.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">insert</span><span class="params">(self, index, p_object)</span>:</span> <span class="comment"># real signature unknown; restored from __doc__</span></span><br><span class="line">        <span class="string">""" 指定索引位置处添加元素 L.insert(index, object) -- insert object before index """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self, index=None)</span>:</span> <span class="comment"># real signature unknown; restored from __doc__</span></span><br><span class="line">        <span class="string">"""  删除结尾的元素</span></span><br><span class="line"><span class="string">        L.pop([index]) -&gt; item -- remove and return item at index (default last).</span></span><br><span class="line"><span class="string">        Raises IndexError if list is empty or index is out of range.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(self, value)</span>:</span> <span class="comment"># real signature unknown; restored from __doc__</span></span><br><span class="line">        <span class="string">""" 移除 从左测匹配的第一个元素</span></span><br><span class="line"><span class="string">        L.remove(value) -&gt; None -- remove first occurrence of value.</span></span><br><span class="line"><span class="string">        Raises ValueError if the value is not present.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse</span><span class="params">(self)</span>:</span> <span class="comment"># real signature unknown; restored from __doc__</span></span><br><span class="line">        <span class="string">""" 反转列表  L.reverse() -- reverse *IN PLACE* """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sort</span><span class="params">(self, key=None, reverse=False)</span>:</span> <span class="comment"># real signature unknown; restored from __doc__</span></span><br><span class="line">        <span class="string">""" 排序 但是int str不行  L.sort(key=None, reverse=False) -&gt; None -- stable sort *IN PLACE* """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__add__</span><span class="params">(self, *args, **kwargs)</span>:</span> <span class="comment"># real signature unknown</span></span><br><span class="line">        <span class="string">""" Return self+value. """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__contains__</span><span class="params">(self, *args, **kwargs)</span>:</span> <span class="comment"># real signature unknown</span></span><br><span class="line">        <span class="string">""" Return key in self. """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delitem__</span><span class="params">(self, *args, **kwargs)</span>:</span> <span class="comment"># real signature unknown</span></span><br><span class="line">        <span class="string">""" Delete self[key]. """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span><span class="params">(self, *args, **kwargs)</span>:</span> <span class="comment"># real signature unknown</span></span><br><span class="line">        <span class="string">""" Return self==value. """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattribute__</span><span class="params">(self, *args, **kwargs)</span>:</span> <span class="comment"># real signature unknown</span></span><br><span class="line">        <span class="string">""" Return getattr(self, name). """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, y)</span>:</span> <span class="comment"># real signature unknown; restored from __doc__</span></span><br><span class="line">        <span class="string">""" x.__getitem__(y) &lt;==&gt; x[y] """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__ge__</span><span class="params">(self, *args, **kwargs)</span>:</span> <span class="comment"># real signature unknown</span></span><br><span class="line">        <span class="string">""" Return self&gt;=value. """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__gt__</span><span class="params">(self, *args, **kwargs)</span>:</span> <span class="comment"># real signature unknown</span></span><br><span class="line">        <span class="string">""" Return self&gt;value. """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iadd__</span><span class="params">(self, *args, **kwargs)</span>:</span> <span class="comment"># real signature unknown</span></span><br><span class="line">        <span class="string">""" Implement self+=value. """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__imul__</span><span class="params">(self, *args, **kwargs)</span>:</span> <span class="comment"># real signature unknown</span></span><br><span class="line">        <span class="string">""" Implement self*=value. """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, seq=<span class="params">()</span>)</span>:</span> <span class="comment"># known special case of list.__init__</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        list() -&gt; new empty list</span></span><br><span class="line"><span class="string">        list(iterable) -&gt; new list initialized from iterable's items</span></span><br><span class="line"><span class="string">        # (copied from class doc)</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self, *args, **kwargs)</span>:</span> <span class="comment"># real signature unknown</span></span><br><span class="line">        <span class="string">""" Implement iter(self). """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self, *args, **kwargs)</span>:</span> <span class="comment"># real signature unknown</span></span><br><span class="line">        <span class="string">""" Return len(self). """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__le__</span><span class="params">(self, *args, **kwargs)</span>:</span> <span class="comment"># real signature unknown</span></span><br><span class="line">        <span class="string">""" Return self&lt;=value. """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__lt__</span><span class="params">(self, *args, **kwargs)</span>:</span> <span class="comment"># real signature unknown</span></span><br><span class="line">        <span class="string">""" Return self&lt;value. """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__mul__</span><span class="params">(self, *args, **kwargs)</span>:</span> <span class="comment"># real signature unknown</span></span><br><span class="line">        <span class="string">""" Return self*value.n """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod # known case of __new__</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(*args, **kwargs)</span>:</span> <span class="comment"># real signature unknown</span></span><br><span class="line">        <span class="string">""" Create and return a new object.  See help(type) for accurate signature. """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__ne__</span><span class="params">(self, *args, **kwargs)</span>:</span> <span class="comment"># real signature unknown</span></span><br><span class="line">        <span class="string">""" Return self!=value. """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self, *args, **kwargs)</span>:</span> <span class="comment"># real signature unknown</span></span><br><span class="line">        <span class="string">""" Return repr(self). """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reversed__</span><span class="params">(self)</span>:</span> <span class="comment"># real signature unknown; restored from __doc__</span></span><br><span class="line">        <span class="string">""" L.__reversed__() -- return a reverse iterator over the list """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__rmul__</span><span class="params">(self, *args, **kwargs)</span>:</span> <span class="comment"># real signature unknown</span></span><br><span class="line">        <span class="string">""" Return self*value. """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setitem__</span><span class="params">(self, *args, **kwargs)</span>:</span> <span class="comment"># real signature unknown</span></span><br><span class="line">        <span class="string">""" Set self[key] to value. """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__sizeof__</span><span class="params">(self)</span>:</span> <span class="comment"># real signature unknown; restored from __doc__</span></span><br><span class="line">        <span class="string">""" L.__sizeof__() -- size of L in memory, in bytes """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    __hash__ = <span class="keyword">None</span></span><br><span class="line">复制代码</span><br><span class="line"></span><br><span class="line">列表功能</span><br><span class="line"></span><br><span class="line">lis=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">'alex'</span>]</span><br><span class="line">cc=[<span class="number">5</span>,<span class="number">5</span>]</span><br><span class="line">print(lis.count(<span class="string">"alex"</span>))</span><br><span class="line">lis.extend(cc)</span><br><span class="line">print(lis)</span><br><span class="line"></span><br><span class="line">name_list = [<span class="string">"eirc"</span>, <span class="string">"alex"</span>, <span class="string">'tony'</span>]</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string"># 索引</span></span><br><span class="line"><span class="string">print(name_list[0])</span></span><br><span class="line"><span class="string"># 切片</span></span><br><span class="line"><span class="string">print(name_list[0:2])</span></span><br><span class="line"><span class="string"># len</span></span><br><span class="line"><span class="string">print(name_list[2:len(name_list)])</span></span><br><span class="line"><span class="string"># for</span></span><br><span class="line"><span class="string">for i in name_list:</span></span><br><span class="line"><span class="string">    print(i)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#join 方法，拼接字符串</span></span><br><span class="line"><span class="string">li = ["alex","eric"]</span></span><br><span class="line"><span class="string">name = "li jie"</span></span><br><span class="line"><span class="string">ss = "_".join(li)</span></span><br><span class="line"><span class="string">s = "_".join(name)</span></span><br><span class="line"><span class="string">print(s,ss)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 列表内部提供的其他功能</span></span><br><span class="line"><span class="comment"># append后追加</span></span><br><span class="line">name_list.append(<span class="string">'seven'</span>)</span><br><span class="line">name_list.append(<span class="string">'seven'</span>)</span><br><span class="line">name_list.append(<span class="string">'seven'</span>)</span><br><span class="line">print(name_list)</span><br><span class="line"><span class="comment"># 元素出现的次数</span></span><br><span class="line">print(name_list.count(<span class="string">'seven'</span>))</span><br><span class="line"><span class="comment"># iterable，可迭代的</span></span><br><span class="line">temp = [<span class="number">111</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>]</span><br><span class="line"><span class="comment"># 扩展，批量添加</span></span><br><span class="line">name_list.extend(temp)</span><br><span class="line">print(name_list)</span><br><span class="line"><span class="comment"># 获取指定元素的索引位置</span></span><br><span class="line">print(name_list.index(<span class="string">'alex'</span>))</span><br><span class="line"><span class="comment"># 向指定索引位置插入数据</span></span><br><span class="line">name_list.insert(<span class="number">1</span>, <span class="string">'SB'</span>)</span><br><span class="line">print(name_list)</span><br><span class="line"><span class="comment"># 在原列表中移除掉最后一个元素，并将其赋值给 a1</span></span><br><span class="line">a1 = name_list.pop()</span><br><span class="line">print(name_list)</span><br><span class="line">print(a1)</span><br><span class="line"><span class="comment"># 移除某个元素</span></span><br><span class="line">name_list.remove(<span class="string">'seven'</span>)</span><br><span class="line">print(name_list)</span><br><span class="line"><span class="comment"># 翻转</span></span><br><span class="line">name_list.reverse()</span><br><span class="line">print(name_list)</span><br><span class="line"></span><br><span class="line"><span class="comment">#　删除指定索引位置</span></span><br><span class="line">print(name_list)</span><br><span class="line"><span class="keyword">del</span> name_list[<span class="number">1</span>:<span class="number">3</span>]</span><br><span class="line">print(name_list)</span><br></pre></td></tr></table></figure></p><h6 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h6><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br></pre></td><td class="code"><pre><span class="line">列表表示：key  下表  列表</span><br><span class="line">   root@python:~# <span class="keyword">python</span></span><br><span class="line">   Python <span class="number">2.7</span>.<span class="number">6</span> (default, Mar <span class="number">22</span> <span class="number">2014</span>, <span class="number">22</span>:<span class="number">59</span>:<span class="number">56</span>)</span><br><span class="line">   [GCC <span class="number">4.8</span>.<span class="number">2</span>] <span class="keyword">on</span> linux2</span><br><span class="line">   Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> <span class="built_in">or</span> <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line">   列表创建</span><br><span class="line"></span><br><span class="line">   查看列表的值    数字是列表元素的下标</span><br><span class="line"> 列表的元素位置取值</span><br><span class="line"> 聚合另一个列表</span><br><span class="line"> &gt;&gt;&gt; names.<span class="built_in">extend</span>(<span class="built_in">range</span>(<span class="number">1000</span>))   #range（<span class="number">1000</span>）是创建<span class="number">1000</span>个数字的列表，<span class="built_in">extend</span>是聚合names原来的列表追加上<span class="number">1000</span>个数字</span><br><span class="line"> 三个注意 ：批量替换 列表中的IBM 为HP：</span><br><span class="line"> <span class="number">1</span>、<span class="keyword">print</span>格式</span><br><span class="line"> <span class="keyword">print</span>  “输出描述内容”  逗号   变量</span><br><span class="line"> <span class="keyword">Print</span> 变量值输出来，如果我要把描述内容放在变量前面，一定要记得加逗号，不然会报错</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、如果要赋值一个空列表</span><br><span class="line">   #names = []</span><br><span class="line"> <span class="number">3</span>、聚合两个列表的另一种方法</span><br><span class="line">#naems = names + <span class="built_in">range</span>(<span class="number">1000</span>)</span><br><span class="line"> names.<span class="built_in">extend</span>(<span class="built_in">range</span>(<span class="number">1000</span>))</span><br><span class="line"></span><br><span class="line"> A.<span class="keyword">pop</span>() <span class="keyword">a</span>.<span class="built_in">remove</span>() <span class="keyword">a</span>.<span class="built_in">reverse</span>()</span><br><span class="line">Type <span class="string">"help"</span>, <span class="string">"copyright"</span>, <span class="string">"credits"</span> <span class="built_in">or</span> <span class="string">"license"</span> <span class="keyword">for</span> more information.</span><br><span class="line">赋值一个列表</span><br><span class="line">&gt;&gt;&gt; <span class="keyword">a</span> = <span class="built_in">range</span>(<span class="number">100</span>)</span><br><span class="line">&gt;&gt;&gt; <span class="keyword">a</span></span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">37</span>, <span class="number">38</span>, <span class="number">39</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">42</span>, <span class="number">43</span>, <span class="number">44</span>, <span class="number">45</span>, <span class="number">46</span>, <span class="number">47</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">50</span>, <span class="number">51</span>, <span class="number">52</span>, <span class="number">53</span>, <span class="number">54</span>, <span class="number">55</span>, <span class="number">56</span>, <span class="number">57</span>, <span class="number">58</span>, <span class="number">59</span>, <span class="number">60</span>, <span class="number">61</span>, <span class="number">62</span>, <span class="number">63</span>, <span class="number">64</span>, <span class="number">65</span>, <span class="number">66</span>, <span class="number">67</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">70</span>, <span class="number">71</span>, <span class="number">72</span>, <span class="number">73</span>, <span class="number">74</span>, <span class="number">75</span>, <span class="number">76</span>, <span class="number">77</span>, <span class="number">78</span>, <span class="number">79</span>, <span class="number">80</span>, <span class="number">81</span>, <span class="number">82</span>, <span class="number">83</span>, <span class="number">84</span>, <span class="number">85</span>, <span class="number">86</span>, <span class="number">87</span>, <span class="number">88</span>, <span class="number">89</span>, <span class="number">90</span>, <span class="number">91</span>, <span class="number">92</span>, <span class="number">93</span>, <span class="number">94</span>, <span class="number">95</span>, <span class="number">96</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="number">99</span>]</span><br><span class="line"> A.<span class="keyword">pop</span>()删除最后一个元素</span><br><span class="line"> &gt;&gt;&gt; <span class="keyword">a</span>.<span class="keyword">pop</span>()</span><br><span class="line"><span class="number">99</span></span><br><span class="line">&gt;&gt;&gt; <span class="keyword">a</span></span><br><span class="line"> [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">37</span>, <span class="number">38</span>, <span class="number">39</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">42</span>, <span class="number">43</span>, <span class="number">44</span>, <span class="number">45</span>, <span class="number">46</span>, <span class="number">47</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">50</span>, <span class="number">51</span>, <span class="number">52</span>, <span class="number">53</span>, <span class="number">54</span>, <span class="number">55</span>, <span class="number">56</span>, <span class="number">57</span>, <span class="number">58</span>, <span class="number">59</span>, <span class="number">60</span>, <span class="number">61</span>, <span class="number">62</span>, <span class="number">63</span>, <span class="number">64</span>, <span class="number">65</span>, <span class="number">66</span>, <span class="number">67</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">70</span>, <span class="number">71</span>, <span class="number">72</span>, <span class="number">73</span>, <span class="number">74</span>, <span class="number">75</span>, <span class="number">76</span>, <span class="number">77</span>, <span class="number">78</span>, <span class="number">79</span>, <span class="number">80</span>, <span class="number">81</span>, <span class="number">82</span>, <span class="number">83</span>, <span class="number">84</span>, <span class="number">85</span>, <span class="number">86</span>, <span class="number">87</span>, <span class="number">88</span>, <span class="number">89</span>, <span class="number">90</span>, <span class="number">91</span>, <span class="number">92</span>, <span class="number">93</span>, <span class="number">94</span>, <span class="number">95</span>, <span class="number">96</span>, <span class="number">97</span>, <span class="number">98</span>]</span><br><span class="line"> <span class="keyword">a</span>.<span class="built_in">remove</span>(<span class="number">23</span>) 移除列表内容</span><br><span class="line">&gt;&gt;&gt; import <span class="keyword">tab</span></span><br><span class="line">&gt;&gt;&gt; <span class="keyword">a</span>.<span class="built_in">remove</span>(<span class="number">23</span>)</span><br><span class="line"> &gt;&gt;&gt; <span class="keyword">a</span></span><br><span class="line"> [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">37</span>, <span class="number">38</span>, <span class="number">39</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">42</span>, <span class="number">43</span>, <span class="number">44</span>, <span class="number">45</span>, <span class="number">46</span>, <span class="number">47</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">50</span>, <span class="number">51</span>, <span class="number">52</span>, <span class="number">53</span>, <span class="number">54</span>, <span class="number">55</span>, <span class="number">56</span>, <span class="number">57</span>, <span class="number">58</span>, <span class="number">59</span>, <span class="number">60</span>, <span class="number">61</span>, <span class="number">62</span>, <span class="number">63</span>, <span class="number">64</span>, <span class="number">65</span>, <span class="number">66</span>, <span class="number">67</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">70</span>, <span class="number">71</span>, <span class="number">72</span>, <span class="number">73</span>, <span class="number">74</span>, <span class="number">75</span>, <span class="number">76</span>, <span class="number">77</span>, <span class="number">78</span>, <span class="number">79</span>, <span class="number">80</span>, <span class="number">81</span>, <span class="number">82</span>, <span class="number">83</span>, <span class="number">84</span>, <span class="number">85</span>, <span class="number">86</span>, <span class="number">87</span>, <span class="number">88</span>, <span class="number">89</span>, <span class="number">90</span>, <span class="number">91</span>, <span class="number">92</span>, <span class="number">93</span>, <span class="number">94</span>, <span class="number">95</span>, <span class="number">96</span>, <span class="number">97</span>, <span class="number">98</span>]</span><br><span class="line">测试<span class="built_in">remove</span></span><br><span class="line">&gt;&gt;&gt; <span class="keyword">a</span>.<span class="keyword">insert</span>(<span class="number">23</span>,<span class="string">'IBM'</span>)</span><br><span class="line"> &gt;&gt;&gt; <span class="keyword">a</span>.<span class="built_in">remove</span>(<span class="number">23</span>)</span><br><span class="line">Traceback (most recent <span class="keyword">call</span> <span class="keyword">last</span>):</span><br><span class="line">   File <span class="string">"&lt;stdin&gt;"</span>, <span class="built_in">line</span> <span class="number">1</span>, in <span class="symbol">&lt;module&gt;</span></span><br><span class="line"> ValueError: <span class="keyword">list</span>.<span class="built_in">remove</span>(<span class="keyword">x</span>): <span class="keyword">x</span> not in <span class="keyword">list</span></span><br><span class="line"><span class="number">1</span>&gt;&gt;&gt; <span class="keyword">a</span>.<span class="built_in">index</span>(<span class="string">'IBM'</span></span><br><span class="line"> ...</span><br><span class="line">KeyboardInterrupt</span><br><span class="line"> &gt;&gt;&gt; <span class="keyword">a</span>.<span class="built_in">index</span>(<span class="string">'IBM'</span>)</span><br><span class="line"><span class="number">23</span></span><br><span class="line"> &gt;&gt;&gt; <span class="keyword">a</span>.<span class="built_in">remove</span>(<span class="string">'IBM'</span>)   </span><br><span class="line"> &gt;&gt;&gt; <span class="keyword">a</span></span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">37</span>, <span class="number">38</span>, <span class="number">39</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">42</span>, <span class="number">43</span>, <span class="number">44</span>, <span class="number">45</span>, <span class="number">46</span>, <span class="number">47</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">50</span>, <span class="number">51</span>, <span class="number">52</span>, <span class="number">53</span>, <span class="number">54</span>, <span class="number">55</span>, <span class="number">56</span>, <span class="number">57</span>, <span class="number">58</span>, <span class="number">59</span>, <span class="number">60</span>, <span class="number">61</span>, <span class="number">62</span>, <span class="number">63</span>, <span class="number">64</span>, <span class="number">65</span>, <span class="number">66</span>, <span class="number">67</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">70</span>, <span class="number">71</span>, <span class="number">72</span>, <span class="number">73</span>, <span class="number">74</span>, <span class="number">75</span>, <span class="number">76</span>, <span class="number">77</span>, <span class="number">78</span>, <span class="number">79</span>, <span class="number">80</span>, <span class="number">81</span>, <span class="number">82</span>, <span class="number">83</span>, <span class="number">84</span>, <span class="number">85</span>, <span class="number">86</span>, <span class="number">87</span>, <span class="number">88</span>, <span class="number">89</span>, <span class="number">90</span>, <span class="number">91</span>, <span class="number">92</span>, <span class="number">93</span>, <span class="number">94</span>, <span class="number">95</span>, <span class="number">96</span>, <span class="number">97</span>, <span class="number">98</span>]</span><br><span class="line"> <span class="keyword">a</span>.<span class="built_in">reverse</span>() 反转列表元素</span><br><span class="line"> &gt;&gt;&gt; <span class="keyword">a</span>.<span class="built_in">reverse</span>()</span><br><span class="line"> &gt;&gt;&gt; <span class="keyword">a</span></span><br><span class="line"> [<span class="number">98</span>, <span class="number">97</span>, <span class="number">96</span>, <span class="number">95</span>, <span class="number">94</span>, <span class="number">93</span>, <span class="number">92</span>, <span class="number">91</span>, <span class="number">90</span>, <span class="number">89</span>, <span class="number">88</span>, <span class="number">87</span>, <span class="number">86</span>, <span class="number">85</span>, <span class="number">84</span>, <span class="number">83</span>, <span class="number">82</span>, <span class="number">81</span>, <span class="number">80</span>, <span class="number">79</span>, <span class="number">78</span>, <span class="number">77</span>, <span class="number">76</span>, <span class="number">75</span>, <span class="number">74</span>, <span class="number">73</span>, <span class="number">72</span>, <span class="number">71</span>, <span class="number">70</span>, <span class="number">69</span>, <span class="number">68</span>, <span class="number">67</span>, <span class="number">66</span>, <span class="number">65</span>, <span class="number">64</span>, <span class="number">63</span>, <span class="number">62</span>, <span class="number">61</span>, <span class="number">60</span>, <span class="number">59</span>, <span class="number">58</span>, <span class="number">57</span>, <span class="number">56</span>, <span class="number">55</span>, <span class="number">54</span>, <span class="number">53</span>, <span class="number">52</span>, <span class="number">51</span>, <span class="number">50</span>, <span class="number">49</span>, <span class="number">48</span>, <span class="number">47</span>, <span class="number">46</span>, <span class="number">45</span>, <span class="number">44</span>, <span class="number">43</span>, <span class="number">42</span>, <span class="number">41</span>, <span class="number">40</span>, <span class="number">39</span>, <span class="number">38</span>, <span class="number">37</span>, <span class="number">36</span>, <span class="number">35</span>, <span class="number">34</span>, <span class="number">33</span>, <span class="number">32</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">29</span>, <span class="number">28</span>, <span class="number">27</span>, <span class="number">26</span>, <span class="number">25</span>, <span class="number">24</span>, <span class="number">22</span>, <span class="number">21</span>, <span class="number">20</span>, <span class="number">19</span>, <span class="number">18</span>, <span class="number">17</span>, <span class="number">16</span>, <span class="number">15</span>, <span class="number">14</span>, <span class="number">13</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line"> A.<span class="keyword">sort</span>()排序列表</span><br><span class="line"> 数字 大写字母 小写字母</span><br><span class="line">&gt;&gt;&gt; <span class="keyword">a</span>.<span class="keyword">insert</span>(<span class="number">3</span>,<span class="number">5</span>)</span><br><span class="line"> &gt;&gt;&gt; <span class="keyword">a</span></span><br><span class="line"> [<span class="number">98</span>, <span class="number">97</span>, <span class="number">96</span>, <span class="number">5</span>, <span class="number">95</span>, <span class="number">94</span>, <span class="number">93</span>, <span class="number">92</span>, <span class="number">91</span>, <span class="number">90</span>, <span class="number">89</span>, <span class="number">88</span>, <span class="number">87</span>, <span class="number">86</span>, <span class="number">85</span>, <span class="number">84</span>, <span class="number">83</span>, <span class="number">82</span>, <span class="number">81</span>, <span class="number">80</span>, <span class="number">79</span>, <span class="number">78</span>, <span class="number">77</span>, <span class="number">76</span>, <span class="number">75</span>, <span class="number">74</span>, <span class="number">73</span>, <span class="number">72</span>, <span class="number">71</span>, <span class="number">70</span>, <span class="number">69</span>, <span class="number">68</span>, <span class="number">67</span>, <span class="number">66</span>, <span class="number">65</span>, <span class="number">64</span>, <span class="number">63</span>, <span class="number">62</span>, <span class="number">61</span>, <span class="number">60</span>, <span class="number">59</span>, <span class="number">58</span>, <span class="number">57</span>, <span class="number">56</span>, <span class="number">55</span>, <span class="number">54</span>, <span class="number">53</span>, <span class="number">52</span>, <span class="number">51</span>, <span class="number">50</span>, <span class="number">49</span>, <span class="number">48</span>, <span class="number">47</span>, <span class="number">46</span>, <span class="number">45</span>, <span class="number">44</span>, <span class="number">43</span>, <span class="number">42</span>, <span class="number">41</span>, <span class="number">40</span>, <span class="number">39</span>, <span class="number">38</span>, <span class="number">37</span>, <span class="number">36</span>, <span class="number">35</span>, <span class="number">34</span>, <span class="number">33</span>, <span class="number">32</span>, <span class="number">31</span>, <span class="number">30</span>, <span class="number">29</span>, <span class="number">28</span>, <span class="number">27</span>, <span class="number">26</span>, <span class="number">25</span>, <span class="number">24</span>, <span class="number">22</span>, <span class="number">21</span>, <span class="number">20</span>, <span class="number">19</span>, <span class="number">18</span>, <span class="number">17</span>, <span class="number">16</span>, <span class="number">15</span>, <span class="number">14</span>, <span class="number">13</span>, <span class="number">12</span>, <span class="number">11</span>, <span class="number">10</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">0</span>]</span><br><span class="line"> &gt;&gt;&gt; <span class="keyword">a</span>.<span class="keyword">sort</span>()</span><br><span class="line">&gt;&gt;&gt; <span class="keyword">a</span></span><br><span class="line"> [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">37</span>, <span class="number">38</span>, <span class="number">39</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">42</span>, <span class="number">43</span>, <span class="number">44</span>, <span class="number">45</span>, <span class="number">46</span>, <span class="number">47</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">50</span>, <span class="number">51</span>, <span class="number">52</span>, <span class="number">53</span>, <span class="number">54</span>, <span class="number">55</span>, <span class="number">56</span>, <span class="number">57</span>, <span class="number">58</span>, <span class="number">59</span>, <span class="number">60</span>, <span class="number">61</span>, <span class="number">62</span>, <span class="number">63</span>, <span class="number">64</span>, <span class="number">65</span>, <span class="number">66</span>, <span class="number">67</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">70</span>, <span class="number">71</span>, <span class="number">72</span>, <span class="number">73</span>, <span class="number">74</span>, <span class="number">75</span>, <span class="number">76</span>, <span class="number">77</span>, <span class="number">78</span>, <span class="number">79</span>, <span class="number">80</span>, <span class="number">81</span>, <span class="number">82</span>, <span class="number">83</span>, <span class="number">84</span>, <span class="number">85</span>, <span class="number">86</span>, <span class="number">87</span>, <span class="number">88</span>, <span class="number">89</span>, <span class="number">90</span>, <span class="number">91</span>, <span class="number">92</span>, <span class="number">93</span>, <span class="number">94</span>, <span class="number">95</span>, <span class="number">96</span>, <span class="number">97</span>, <span class="number">98</span>]</span><br><span class="line"> &gt;&gt;&gt; <span class="keyword">a</span>.<span class="keyword">insert</span>(<span class="number">5</span>,<span class="string">'a'</span>)</span><br><span class="line"> &gt;&gt;&gt; <span class="keyword">a</span>.<span class="keyword">insert</span>(<span class="number">5</span>,<span class="string">'A'</span>)</span><br><span class="line"> &gt;&gt;&gt; <span class="keyword">a</span>.<span class="keyword">insert</span>(<span class="number">5</span>,<span class="string">'B'</span>)</span><br><span class="line"> &gt;&gt;&gt; <span class="keyword">a</span>.<span class="keyword">insert</span>(<span class="number">5</span>,<span class="string">'b'</span>)</span><br><span class="line"> &gt;&gt;&gt; <span class="keyword">a</span></span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="string">'b'</span>, <span class="string">'B'</span>, <span class="string">'A'</span>, <span class="string">'a'</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">37</span>, <span class="number">38</span>, <span class="number">39</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">42</span>, <span class="number">43</span>, <span class="number">44</span>, <span class="number">45</span>, <span class="number">46</span>, <span class="number">47</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">50</span>, <span class="number">51</span>, <span class="number">52</span>, <span class="number">53</span>, <span class="number">54</span>, <span class="number">55</span>, <span class="number">56</span>, <span class="number">57</span>, <span class="number">58</span>, <span class="number">59</span>, <span class="number">60</span>, <span class="number">61</span>, <span class="number">62</span>, <span class="number">63</span>, <span class="number">64</span>, <span class="number">65</span>, <span class="number">66</span>, <span class="number">67</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">70</span>, <span class="number">71</span>, <span class="number">72</span>, <span class="number">73</span>, <span class="number">74</span>, <span class="number">75</span>, <span class="number">76</span>, <span class="number">77</span>, <span class="number">78</span>, <span class="number">79</span>, <span class="number">80</span>, <span class="number">81</span>, <span class="number">82</span>, <span class="number">83</span>, <span class="number">84</span>, <span class="number">85</span>, <span class="number">86</span>, <span class="number">87</span>, <span class="number">88</span>, <span class="number">89</span>, <span class="number">90</span>, <span class="number">91</span>, <span class="number">92</span>, <span class="number">93</span>, <span class="number">94</span>, <span class="number">95</span>, <span class="number">96</span>, <span class="number">97</span>, <span class="number">98</span>]</span><br><span class="line"> &gt;&gt;&gt; <span class="keyword">a</span>.<span class="keyword">sort</span>()</span><br><span class="line"> &gt;&gt;&gt; <span class="keyword">a</span></span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">37</span>, <span class="number">38</span>, <span class="number">39</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">42</span>, <span class="number">43</span>, <span class="number">44</span>, <span class="number">45</span>, <span class="number">46</span>, <span class="number">47</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">50</span>, <span class="number">51</span>, <span class="number">52</span>, <span class="number">53</span>, <span class="number">54</span>, <span class="number">55</span>, <span class="number">56</span>, <span class="number">57</span>, <span class="number">58</span>, <span class="number">59</span>, <span class="number">60</span>, <span class="number">61</span>, <span class="number">62</span>, <span class="number">63</span>, <span class="number">64</span>, <span class="number">65</span>, <span class="number">66</span>, <span class="number">67</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">70</span>, <span class="number">71</span>, <span class="number">72</span>, <span class="number">73</span>, <span class="number">74</span>, <span class="number">75</span>, <span class="number">76</span>, <span class="number">77</span>, <span class="number">78</span>, <span class="number">79</span>, <span class="number">80</span>, <span class="number">81</span>, <span class="number">82</span>, <span class="number">83</span>, <span class="number">84</span>, <span class="number">85</span>, <span class="number">86</span>, <span class="number">87</span>, <span class="number">88</span>, <span class="number">89</span>, <span class="number">90</span>, <span class="number">91</span>, <span class="number">92</span>, <span class="number">93</span>, <span class="number">94</span>, <span class="number">95</span>, <span class="number">96</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>]</span><br><span class="line"> &gt;&gt;&gt; <span class="keyword">a</span>.<span class="keyword">insert</span>(<span class="number">11</span>,<span class="string">'~'</span>)</span><br><span class="line"> &gt;&gt;&gt; <span class="keyword">a</span>.<span class="keyword">insert</span>(<span class="number">11</span>,<span class="string">'!'</span>)</span><br><span class="line">&gt;&gt;&gt; <span class="keyword">a</span>.<span class="keyword">insert</span>(<span class="number">11</span>,<span class="string">'#'</span>)</span><br><span class="line">&gt;&gt;&gt; <span class="keyword">a</span>.<span class="keyword">insert</span>(<span class="number">11</span>,<span class="string">'@'</span>)</span><br><span class="line">&gt;&gt;&gt; <span class="keyword">a</span></span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="string">'@'</span>, <span class="string">'#'</span>, <span class="string">'!'</span>, <span class="string">'~'</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">37</span>, <span class="number">38</span>, <span class="number">39</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">42</span>, <span class="number">43</span>, <span class="number">44</span>, <span class="number">45</span>, <span class="number">46</span>, <span class="number">47</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">50</span>, <span class="number">51</span>, <span class="number">52</span>, <span class="number">53</span>, <span class="number">54</span>, <span class="number">55</span>, <span class="number">56</span>, <span class="number">57</span>, <span class="number">58</span>, <span class="number">59</span>, <span class="number">60</span>, <span class="number">61</span>, <span class="number">62</span>, <span class="number">63</span>, <span class="number">64</span>, <span class="number">65</span>, <span class="number">66</span>, <span class="number">67</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">70</span>, <span class="number">71</span>, <span class="number">72</span>, <span class="number">73</span>, <span class="number">74</span>, <span class="number">75</span>, <span class="number">76</span>, <span class="number">77</span>, <span class="number">78</span>, <span class="number">79</span>, <span class="number">80</span>, <span class="number">81</span>, <span class="number">82</span>, <span class="number">83</span>, <span class="number">84</span>, <span class="number">85</span>, <span class="number">86</span>, <span class="number">87</span>, <span class="number">88</span>, <span class="number">89</span>, <span class="number">90</span>, <span class="number">91</span>, <span class="number">92</span>, <span class="number">93</span>, <span class="number">94</span>, <span class="number">95</span>, <span class="number">96</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>]</span><br><span class="line"> &gt;&gt;&gt; <span class="keyword">a</span>.<span class="keyword">sort</span>()</span><br><span class="line"> &gt;&gt;&gt; <span class="keyword">a</span></span><br><span class="line"> [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">37</span>, <span class="number">38</span>, <span class="number">39</span>, <span class="number">40</span>, <span class="number">41</span>, <span class="number">42</span>, <span class="number">43</span>, <span class="number">44</span>, <span class="number">45</span>, <span class="number">46</span>, <span class="number">47</span>, <span class="number">48</span>, <span class="number">49</span>, <span class="number">50</span>, <span class="number">51</span>, <span class="number">52</span>, <span class="number">53</span>, <span class="number">54</span>, <span class="number">55</span>, <span class="number">56</span>, <span class="number">57</span>, <span class="number">58</span>, <span class="number">59</span>, <span class="number">60</span>, <span class="number">61</span>, <span class="number">62</span>, <span class="number">63</span>, <span class="number">64</span>, <span class="number">65</span>, <span class="number">66</span>, <span class="number">67</span>, <span class="number">68</span>, <span class="number">69</span>, <span class="number">70</span>, <span class="number">71</span>, <span class="number">72</span>, <span class="number">73</span>, <span class="number">74</span>, <span class="number">75</span>, <span class="number">76</span>, <span class="number">77</span>, <span class="number">78</span>, <span class="number">79</span>, <span class="number">80</span>, <span class="number">81</span>, <span class="number">82</span>, <span class="number">83</span>, <span class="number">84</span>, <span class="number">85</span>, <span class="number">86</span>, <span class="number">87</span>, <span class="number">88</span>, <span class="number">89</span>, <span class="number">90</span>, <span class="number">91</span>, <span class="number">92</span>, <span class="number">93</span>, <span class="number">94</span>, <span class="number">95</span>, <span class="number">96</span>, <span class="number">97</span>, <span class="number">98</span>, <span class="string">'!'</span>, <span class="string">'#'</span>, <span class="string">'@'</span>, <span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'~'</span>]</span><br><span class="line"> String方法</span><br><span class="line">&gt;&gt;&gt; import <span class="built_in">string</span></span><br><span class="line"> &gt;&gt;&gt; <span class="built_in">string</span>.ascii_letters</span><br><span class="line"><span class="string">'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'</span></span><br><span class="line"> &gt;&gt;&gt; <span class="built_in">string</span>.ascii_</span><br><span class="line"> <span class="built_in">string</span>.ascii_letters    <span class="built_in">string</span>.ascii_uppercase</span><br><span class="line"> <span class="built_in">string</span>.ascii_lowercase  </span><br><span class="line"> &gt;&gt;&gt; <span class="built_in">string</span>.ascii_lowercase</span><br><span class="line"> <span class="string">'abcdefghijklmnopqrstuvwxyz'</span></span><br><span class="line"> &gt;&gt;&gt; <span class="keyword">a</span> = <span class="built_in">string</span>.ascii_lowercase</span><br><span class="line"> &gt;&gt;&gt; <span class="keyword">a</span></span><br><span class="line"> <span class="string">'abcdefghijklmnopqrstuvwxyz'</span></span><br><span class="line"> <span class="keyword">list</span>(<span class="keyword">a</span>)将连续的列表做成字符列表</span><br><span class="line"> &gt;&gt;&gt; <span class="keyword">list</span>(<span class="keyword">a</span></span><br><span class="line"> <span class="keyword">a</span>       <span class="keyword">all</span>(    any(    <span class="keyword">as</span>      </span><br><span class="line"> <span class="built_in">abs</span>(    <span class="built_in">and</span>     apply(  assert  </span><br><span class="line"> &gt;&gt;&gt; <span class="keyword">list</span>(<span class="keyword">a</span>)</span><br><span class="line"> [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>, <span class="string">'h'</span>, <span class="string">'i'</span>, <span class="string">'j'</span>, <span class="string">'k'</span>, <span class="string">'l'</span>, <span class="string">'m'</span>, <span class="string">'n'</span>, <span class="string">'o'</span>, <span class="string">'p'</span>, <span class="string">'q'</span>, <span class="string">'r'</span>, <span class="string">'s'</span>, <span class="string">'t'</span>, <span class="string">'u'</span>, <span class="string">'v'</span>, <span class="string">'w'</span>, <span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'z'</span>]</span><br><span class="line"> &gt;&gt;&gt; <span class="keyword">a</span>.<span class="keyword">split</span>()</span><br><span class="line"> [<span class="string">'abcdefghijklmnopqrstuvwxyz'</span>]</span><br><span class="line"> &gt;&gt;&gt; <span class="keyword">a</span></span><br><span class="line"> <span class="string">'abcdefghijklmnopqrstuvwxyz'</span></span><br><span class="line"> &gt;&gt;&gt; str(<span class="keyword">a</span>)</span><br><span class="line"> <span class="string">'abcdefghijklmnopqrstuvwxyz'</span></span><br><span class="line"> &gt;&gt;&gt; <span class="keyword">a</span></span><br><span class="line"> <span class="string">'abcdefghijklmnopqrstuvwxyz'</span></span><br><span class="line">Join方法将分散的多个元素组成一个元素的列表</span><br><span class="line"> <span class="string">'|'</span>.<span class="keyword">join</span>(<span class="keyword">a</span>) 以竖划线为分隔符作为<span class="keyword">a</span>列表的分割元素分割</span><br><span class="line"> &gt;&gt;&gt; <span class="keyword">a</span> = <span class="keyword">list</span>(<span class="built_in">string</span>.ascii_lowercase)</span><br><span class="line"> &gt;&gt;&gt; <span class="keyword">a</span></span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>, <span class="string">'h'</span>, <span class="string">'i'</span>, <span class="string">'j'</span>, <span class="string">'k'</span>, <span class="string">'l'</span>, <span class="string">'m'</span>, <span class="string">'n'</span>, <span class="string">'o'</span>, <span class="string">'p'</span>, <span class="string">'q'</span>, <span class="string">'r'</span>, <span class="string">'s'</span>, <span class="string">'t'</span>, <span class="string">'u'</span>, <span class="string">'v'</span>, <span class="string">'w'</span>, <span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'z'</span>]</span><br><span class="line"> &gt;&gt;&gt; <span class="built_in">type</span>(<span class="keyword">a</span></span><br><span class="line"> <span class="keyword">a</span>       <span class="keyword">all</span>(    any(    <span class="keyword">as</span>      </span><br><span class="line"> <span class="built_in">abs</span>(    <span class="built_in">and</span>     apply(  assert  </span><br><span class="line"> &gt;&gt;&gt; <span class="built_in">type</span>(<span class="keyword">a</span>)</span><br><span class="line"> &lt;<span class="built_in">type</span> <span class="string">'list'</span>&gt;</span><br><span class="line"> &gt;&gt;&gt; str(<span class="keyword">a</span>)</span><br><span class="line"> <span class="string">"['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']"</span></span><br><span class="line"> &gt;&gt;&gt;</span><br><span class="line"> &gt;&gt;&gt; str(<span class="keyword">a</span>)</span><br><span class="line"> <span class="comment">"['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', ' &gt;&gt;&gt; a[0]</span></span><br><span class="line"> <span class="string">'a'</span></span><br><span class="line"> &gt;&gt;&gt; <span class="keyword">a</span>[<span class="number">1</span>]</span><br><span class="line"> <span class="string">'b'</span></span><br><span class="line"> &gt;&gt;&gt; <span class="string">''</span>.<span class="keyword">join</span>(<span class="keyword">a</span>)</span><br><span class="line"><span class="string">'a_b_c_d_e_f_g_h_i_j_k_l_m_n_o_p_q_r_s_t_u_v_w_x_y_z'</span></span><br><span class="line">&gt;&gt;&gt; <span class="string">'|'</span>.<span class="keyword">join</span>(<span class="keyword">a</span>)</span><br><span class="line"> <span class="string">'a|b|c|d|e|f|g|h|i|j|k|l|m|n|o|p|q|r|s|t|u|v|w|x|y|z'</span></span><br><span class="line"> &gt;&gt;&gt; <span class="keyword">a</span>[<span class="number">1</span>]       </span><br><span class="line"> <span class="string">'b'</span></span><br><span class="line"></span><br><span class="line"> Str（）的用法  例如<span class="keyword">file</span>是只能写入字符串的我想写入数字</span><br><span class="line"> &gt;&gt;&gt; <span class="built_in">type</span>(<span class="number">4</span>)</span><br><span class="line"> &lt;<span class="built_in">type</span> <span class="string">'int'</span>&gt;</span><br><span class="line"><span class="number">2</span>&gt;&gt;&gt; <span class="built_in">type</span>(str(<span class="number">4</span>))</span><br><span class="line"><span class="number">2</span>&lt;<span class="built_in">type</span> <span class="string">'str'</span>&gt;</span><br><span class="line"><span class="number">2</span>将数组写入文件<span class="keyword">f</span>.readlines(数组)</span><br><span class="line"></span><br><span class="line"> &gt;&gt;&gt; <span class="keyword">f</span> = <span class="keyword">open</span>(<span class="string">'test2.txt'</span>,<span class="string">'w'</span>)</span><br><span class="line"> &gt;&gt;&gt; <span class="keyword">f</span>.<span class="keyword">write</span>(<span class="number">5</span>)</span><br><span class="line"> Traceback (most recent <span class="keyword">call</span> <span class="keyword">last</span>):</span><br><span class="line">   File <span class="string">"&lt;stdin&gt;"</span>, <span class="built_in">line</span> <span class="number">1</span>, in <span class="symbol">&lt;module&gt;</span></span><br><span class="line"> TypeError: expected <span class="keyword">a</span> character <span class="keyword">buffer</span> object</span><br><span class="line"> &gt;&gt;&gt; <span class="keyword">a</span></span><br><span class="line"><span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>, <span class="string">'h'</span>, <span class="string">'i'</span>, <span class="string">'j'</span>, <span class="string">'k'</span>, <span class="string">'l'</span>, <span class="string">'m'</span>, <span class="string">'n'</span>, <span class="string">'o'</span>, <span class="string">'p'</span>, <span class="string">'q'</span>, <span class="string">'r'</span>, <span class="string">'s'</span>, <span class="string">'t'</span>, <span class="string">'u'</span>, <span class="string">'v'</span>, <span class="string">'w'</span>, <span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'z'</span>]</span><br><span class="line"><span class="number">253</span> &gt;&gt;&gt; <span class="keyword">f</span>.writelines(<span class="keyword">a</span>)</span><br><span class="line"> &gt;&gt;&gt; <span class="keyword">f</span>.<span class="keyword">close</span>()</span><br><span class="line"> root@python:~# <span class="keyword">cat</span> test2.txt</span><br><span class="line"> abcdefghijklmnopqrstuvwxyz</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">程序在写文件的时候还没保存，另一个程序要调用用一个文件如何办</span><br><span class="line">例如：</span><br><span class="line">你在<span class="keyword">vi</span>一个文件的时候，你用<span class="keyword">python</span>的<span class="keyword">file</span>方法写了数据到该文件。你<span class="keyword">vi</span>这个文件无法保存。</span><br><span class="line">Python写文件系统内核不会给你加锁，而<span class="keyword">vi</span>枷锁了，例如<span class="keyword">vi</span>产生一个swp文件</span><br><span class="line">Python没加 靠自己判断了。</span><br><span class="line"> Python判断文件打开了？？？</span><br><span class="line"></span><br><span class="line"> With opne(<span class="keyword">file</span>) <span class="keyword">as</span> 别名 不用关闭文件，with语法结束之后文件就关闭。 解决长时间运行程序的方法</span><br><span class="line"><span class="number">2</span>打开文件不要忘记关闭它不要让程序去关闭它，尤其是运行好些天的程序，程序打开了高些文件后，运行几天后，这个程序的cpu就百分之百了。会维护者好几个文件打开者的句柄</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> &gt;&gt;&gt; with <span class="keyword">open</span> (<span class="string">'test2.txt'</span>,<span class="string">'r'</span>) <span class="keyword">as</span> <span class="keyword">f</span>:</span><br><span class="line"> ...   <span class="keyword">for</span> i in <span class="keyword">f</span>.readlines():        </span><br><span class="line"> ...</span><br><span class="line"> Abcdefghijklmnopqrstuvwxyz</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; with <span class="keyword">open</span> (<span class="string">'test2.txt'</span>,<span class="string">'a'</span>) <span class="keyword">as</span> <span class="keyword">f</span>:</span><br><span class="line">...   <span class="keyword">f</span>.<span class="keyword">write</span>(<span class="string">'\n+++++'</span>)</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>Del 删除内存的东西 删除列表的指定内容元素</span><br><span class="line"> &gt;&gt;&gt; <span class="keyword">a</span>=<span class="built_in">range</span>(<span class="number">40</span>)</span><br><span class="line"> &gt;&gt;&gt; <span class="keyword">a</span></span><br><span class="line"> [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">37</span>, <span class="number">38</span>, <span class="number">39</span>]</span><br><span class="line"> &gt;&gt;&gt;</span><br><span class="line"></span><br><span class="line"> &gt;&gt;&gt; del <span class="keyword">a</span>[<span class="number">6</span>:<span class="number">11</span>]</span><br><span class="line"> &gt;&gt;&gt; <span class="keyword">a</span></span><br><span class="line"> [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>, <span class="number">32</span>, <span class="number">33</span>, <span class="number">34</span>, <span class="number">35</span>, <span class="number">36</span>, <span class="number">37</span>, <span class="number">38</span>, <span class="number">39</span>]</span><br><span class="line"> &gt;&gt;&gt; <span class="keyword">b</span>=<span class="keyword">a</span>[<span class="number">7</span>:<span class="number">20</span>]</span><br><span class="line"> &gt;&gt;&gt; <span class="keyword">b</span></span><br><span class="line"> [<span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>]</span><br><span class="line"> &gt;&gt;&gt; del <span class="keyword">b</span></span><br><span class="line"> &gt;&gt;&gt; <span class="keyword">b</span></span><br><span class="line"> Traceback (most recent <span class="keyword">call</span> <span class="keyword">last</span>):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, <span class="built_in">line</span> <span class="number">1</span>, in <span class="symbol">&lt;module&gt;</span></span><br><span class="line">NameError: name <span class="string">'b'</span> <span class="keyword">is</span> not defined</span><br><span class="line"></span><br><span class="line">实验</span><br><span class="line">#!/usr/bin/env <span class="keyword">python</span></span><br><span class="line"># _*_ codin<span class="variable">g:utf</span>-<span class="number">8</span> _*_</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a1 = <span class="string">"Alex"</span></span><br><span class="line"><span class="keyword">print</span>(a1.capitalize())</span><br><span class="line"></span><br><span class="line"><span class="keyword">b</span>=<span class="string">"alex alex alex"</span></span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">b</span>.<span class="keyword">center</span>(<span class="number">20</span>,<span class="string">"*"</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">b</span>.<span class="built_in">count</span>(<span class="string">"le"</span>,<span class="number">1</span>,<span class="number">9</span>))</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">b</span>.<span class="keyword">find</span>(<span class="string">"xxlex"</span>))</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">b</span>.istitle())</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">b</span>.partition(<span class="string">"le"</span>))</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">b</span>.replace(<span class="string">"ale"</span>,<span class="string">"ALE"</span>,<span class="number">2</span>))</span><br><span class="line"><span class="keyword">print</span>(<span class="keyword">b</span>.<span class="keyword">split</span>(<span class="string">"le"</span>,<span class="number">2</span>))</span><br><span class="line"><span class="keyword">print</span>(a1.swapcase())</span><br><span class="line"><span class="keyword">print</span>(a1.upper())</span><br><span class="line"><span class="keyword">print</span>(a1.zfill(<span class="number">20</span>))</span><br><span class="line"><span class="keyword">print</span>(a1.__add__(<span class="string">"dfsf"</span>))</span><br><span class="line">s = <span class="string">" hell &#123;0&#125; ,age &#123;1&#125;"</span></span><br><span class="line"><span class="keyword">print</span>(s.format(<span class="string">'alex'</span>,<span class="number">19</span>))</span><br><span class="line"><span class="keyword">print</span>(<span class="string">"字符串的分片"</span>,a1[<span class="number">0</span>],a1[<span class="number">0</span>:<span class="number">2</span>],a1[<span class="number">0</span>:])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">注意： strip()</span><br><span class="line">　　<span class="number">1</span> 可以去除两端空格</span><br><span class="line">   <span class="number">2</span> 可以去除末尾\n</span><br><span class="line">   <span class="number">3</span> 可以去除 空行</span><br><span class="line">   <span class="number">4</span> 可以传如参数，比如</span><br><span class="line">　　　　n = “hello”</span><br><span class="line">       s = n.strip（“<span class="keyword">o</span>”）</span><br><span class="line">　　　　<span class="keyword">print</span> s  结果是  = ‘hell’</span><br></pre></td></tr></table></figure><p>以 str 为分隔符切片 mystr，如果 maxsplit有指定值，则仅分隔 maxsplit 个子字符串</p><p>mystr.split(str=” “, 2)<br>字典的遍历<br>功能<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">dict</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    dict() -&gt; new empty dictionary</span></span><br><span class="line"><span class="string">    dict(mapping) -&gt; new dictionary initialized from a mapping object's</span></span><br><span class="line"><span class="string">        (key, value) pairs</span></span><br><span class="line"><span class="string">    dict(iterable) -&gt; new dictionary initialized as if via:</span></span><br><span class="line"><span class="string">        d = &#123;&#125;</span></span><br><span class="line"><span class="string">        for k, v in iterable:</span></span><br><span class="line"><span class="string">            d[k] = v</span></span><br><span class="line"><span class="string">    dict(**kwargs) -&gt; new dictionary initialized with the name=value pairs</span></span><br><span class="line"><span class="string">        in the keyword argument list.  For example:  dict(one=1, two=2)</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clear</span><span class="params">(self)</span>:</span> <span class="comment"># real signature unknown; restored from __doc__</span></span><br><span class="line">        <span class="string">""" 清除 字典  D.clear() -&gt; None.  Remove all items from D. """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">copy</span><span class="params">(self)</span>:</span> <span class="comment"># real signature unknown; restored from __doc__</span></span><br><span class="line">        <span class="string">"""  浅拷贝  D.copy() -&gt; a shallow copy of D """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod # known case</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fromkeys</span><span class="params">(*args, **kwargs)</span>:</span> <span class="comment"># real signature unknown</span></span><br><span class="line">        <span class="string">""" Returns a new dict with keys from iterable and values equal to value. """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, k, d=None)</span>:</span> <span class="comment"># real signature unknown; restored from __doc__</span></span><br><span class="line">        <span class="string">""" 根据key获取 d是默认是 为 None   D.get(k[,d]) -&gt; D[k] if k in D, else d.  d defaults to None. """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">items</span><span class="params">(self)</span>:</span> <span class="comment"># real signature unknown; restored from __doc__</span></span><br><span class="line">        <span class="string">""" 将字典的key value都打印成列表元组   D.items() -&gt; a set-like object providing a view on D's items """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">keys</span><span class="params">(self)</span>:</span> <span class="comment"># real signature unknown; restored from __doc__</span></span><br><span class="line">        <span class="string">"""打印字典的key   D.keys() -&gt; a set-like object providing a view on D's keys """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pop</span><span class="params">(self, k, d=None)</span>:</span> <span class="comment"># real signature unknown; restored from __doc__</span></span><br><span class="line">        <span class="string">""" 获取并在字典中移除</span></span><br><span class="line"><span class="string">        D.pop(k[,d]) -&gt; v, remove specified key and return the corresponding value.</span></span><br><span class="line"><span class="string">        If key is not found, d is returned if given, otherwise KeyError is raised</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">popitem</span><span class="params">(self)</span>:</span> <span class="comment"># real signature unknown; restored from __doc__</span></span><br><span class="line">        <span class="string">""" 获取并在列表中移除</span></span><br><span class="line"><span class="string">        D.popitem() -&gt; (k, v), remove and return some (key, value) pair as a</span></span><br><span class="line"><span class="string">        2-tuple; but raise KeyError if D is empty.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setdefault</span><span class="params">(self, k, d=None)</span>:</span> <span class="comment"># real signature unknown; restored from __doc__</span></span><br><span class="line">        <span class="string">"""如果key不存在，则创建，如果存在，则返回已存在的值且不修改</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">　　 D.setdefault(k[,d]) -&gt; D.get(k,d), also set D[k]=d if k not in D """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, E=None, **F)</span>:</span> <span class="comment"># known special case of dict.update</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        D.update([E, ]**F) -&gt; None.  Update D from dict/iterable E and F.</span></span><br><span class="line"><span class="string">        If E is present and has a .keys() method, then does:  for k in E: D[k] = E[k]</span></span><br><span class="line"><span class="string">        If E is present and lacks a .keys() method, then does:  for k, v in E: D[k] = v</span></span><br><span class="line"><span class="string">        In either case, this is followed by: for k in F:  D[k] = F[k]</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">values</span><span class="params">(self)</span>:</span> <span class="comment"># real signature unknown; restored from __doc__</span></span><br><span class="line">        <span class="string">""" 所有的值  D.values() -&gt; an object providing a view on D's values """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__contains__</span><span class="params">(self, *args, **kwargs)</span>:</span> <span class="comment"># real signature unknown</span></span><br><span class="line">        <span class="string">""" True if D has a key k, else False. """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delitem__</span><span class="params">(self, *args, **kwargs)</span>:</span> <span class="comment"># real signature unknown</span></span><br><span class="line">        <span class="string">""" Delete self[key]. """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__eq__</span><span class="params">(self, *args, **kwargs)</span>:</span> <span class="comment"># real signature unknown</span></span><br><span class="line">        <span class="string">""" Return self==value. """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattribute__</span><span class="params">(self, *args, **kwargs)</span>:</span> <span class="comment"># real signature unknown</span></span><br><span class="line">        <span class="string">""" Return getattr(self, name). """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, y)</span>:</span> <span class="comment"># real signature unknown; restored from __doc__</span></span><br><span class="line">        <span class="string">""" x.__getitem__(y) &lt;==&gt; x[y] """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__ge__</span><span class="params">(self, *args, **kwargs)</span>:</span> <span class="comment"># real signature unknown</span></span><br><span class="line">        <span class="string">""" Return self&gt;=value. """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__gt__</span><span class="params">(self, *args, **kwargs)</span>:</span> <span class="comment"># real signature unknown</span></span><br><span class="line">        <span class="string">""" Return self&gt;value. """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, seq=None, **kwargs)</span>:</span> <span class="comment"># known special case of dict.__init__</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        dict() -&gt; new empty dictionary</span></span><br><span class="line"><span class="string">        dict(mapping) -&gt; new dictionary initialized from a mapping object's</span></span><br><span class="line"><span class="string">            (key, value) pairs</span></span><br><span class="line"><span class="string">        dict(iterable) -&gt; new dictionary initialized as if via:</span></span><br><span class="line"><span class="string">            d = &#123;&#125;</span></span><br><span class="line"><span class="string">            for k, v in iterable:</span></span><br><span class="line"><span class="string">                d[k] = v</span></span><br><span class="line"><span class="string">        dict(**kwargs) -&gt; new dictionary initialized with the name=value pairs</span></span><br><span class="line"><span class="string">            in the keyword argument list.  For example:  dict(one=1, two=2)</span></span><br><span class="line"><span class="string">        # (copied from class doc)</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self, *args, **kwargs)</span>:</span> <span class="comment"># real signature unknown</span></span><br><span class="line">        <span class="string">""" Implement iter(self). """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self, *args, **kwargs)</span>:</span> <span class="comment"># real signature unknown</span></span><br><span class="line">        <span class="string">""" Return len(self). """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__le__</span><span class="params">(self, *args, **kwargs)</span>:</span> <span class="comment"># real signature unknown</span></span><br><span class="line">        <span class="string">""" Return self&lt;=value. """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__lt__</span><span class="params">(self, *args, **kwargs)</span>:</span> <span class="comment"># real signature unknown</span></span><br><span class="line">        <span class="string">""" Return self&lt;value. """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod # known case of __new__</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(*args, **kwargs)</span>:</span> <span class="comment"># real signature unknown</span></span><br><span class="line">        <span class="string">""" Create and return a new object.  See help(type) for accurate signature. """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__ne__</span><span class="params">(self, *args, **kwargs)</span>:</span> <span class="comment"># real signature unknown</span></span><br><span class="line">        <span class="string">""" Return self!=value. """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__repr__</span><span class="params">(self, *args, **kwargs)</span>:</span> <span class="comment"># real signature unknown</span></span><br><span class="line">        <span class="string">""" Return repr(self). """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setitem__</span><span class="params">(self, *args, **kwargs)</span>:</span> <span class="comment"># real signature unknown</span></span><br><span class="line">        <span class="string">""" Set self[key] to value. """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__sizeof__</span><span class="params">(self)</span>:</span> <span class="comment"># real signature unknown; restored from __doc__</span></span><br><span class="line">        <span class="string">""" D.__sizeof__() -&gt; size of D in memory, in bytes """</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    __hash__ = <span class="keyword">None</span></span><br></pre></td></tr></table></figure></p><p>字典练习</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env python</span></span><br><span class="line"><span class="meta"># _*_ coding:utf-8 _*_</span></span><br><span class="line">__author__ = <span class="string">'dylan'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dic=&#123;<span class="number">1</span>:<span class="number">2</span>,<span class="string">"alex"</span>:<span class="number">4</span>,<span class="number">4</span>:<span class="number">9</span>&#125;</span><br><span class="line">print(dic.<span class="keyword">get</span>(<span class="string">"alex"</span>))</span><br><span class="line">print(dic.items())</span><br><span class="line">print(dic.keys())</span><br><span class="line">print(dic.values())</span><br><span class="line">print(dic.pop(<span class="number">2</span>,None))</span><br><span class="line">print(dic.setdefault(<span class="string">"name"</span>,<span class="string">"rain"</span>))</span><br><span class="line"></span><br><span class="line"><span class="meta">###################### 字典 ###################</span></span><br><span class="line"><span class="meta"># 字典的每一个元素，键值对</span></span><br><span class="line">user_info = &#123;</span><br><span class="line">    <span class="number">0</span>: <span class="string">"alex"</span>,</span><br><span class="line">    <span class="string">"age"</span>: <span class="number">73</span>,</span><br><span class="line">    <span class="number">2</span>: <span class="string">'M'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta"># 0   “alex"</span></span><br><span class="line"><span class="meta"># 1   73</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 索引</span></span><br><span class="line"><span class="meta"># print(user_info[0])</span></span><br><span class="line"><span class="meta"># print(user_info["age"])</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 循环，默认值输出key</span></span><br><span class="line"><span class="meta"># for i in user_info:</span></span><br><span class="line"><span class="meta">#     print(i)</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># # 获取所有键</span></span><br><span class="line"><span class="meta"># print(user_info.keys())</span></span><br><span class="line"><span class="meta"># # 获取所有值</span></span><br><span class="line"><span class="meta"># print(user_info.values())</span></span><br><span class="line"><span class="meta"># # 获取所有键值对</span></span><br><span class="line"><span class="meta"># print(user_info.items())</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># for i in user_info.keys():</span></span><br><span class="line"><span class="meta">#     print(i)</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta"># for i in user_info.values():</span></span><br><span class="line"><span class="meta">#     print(i)</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># user_info = &#123;</span></span><br><span class="line"><span class="meta">#     0: "alex",</span></span><br><span class="line"><span class="meta">#     "age": 73,</span></span><br><span class="line"><span class="meta">#     2: 'M'</span></span><br><span class="line"><span class="meta"># &#125;</span></span><br><span class="line"><span class="meta"># for k,v in user_info.items():</span></span><br><span class="line"><span class="meta">#     print(k)</span></span><br><span class="line"><span class="meta">#     print(v)</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># clear，清除所有内容</span></span><br><span class="line"><span class="meta"># user_info.clear()</span></span><br><span class="line"><span class="meta"># print(user_info)</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># get 根据key获取值，如果key不存在，可以指定一个默认值</span></span><br><span class="line"><span class="meta"># val = user_info.get('age')</span></span><br><span class="line"><span class="meta"># print(val)</span></span><br><span class="line"><span class="meta"># val = user_info.get('age', '123')</span></span><br><span class="line"><span class="meta"># print(val)</span></span><br><span class="line"><span class="meta"># 索引取值时，key不存在，报错</span></span><br><span class="line"><span class="meta"># print(user_info['age'])</span></span><br><span class="line"><span class="meta"># print(user_info['age1111'])</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta"># has_key 检查字典中指定key是否存在   3版本python没有了 可以用in 判断</span></span><br><span class="line"><span class="meta"># ret = 'agfffe' in user_info.keys()</span></span><br><span class="line"><span class="meta"># print(ret)</span></span><br><span class="line"><span class="meta"># pop</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># popitem</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># update</span></span><br><span class="line"><span class="meta"># print(user_info)</span></span><br><span class="line"><span class="meta"># test = &#123;</span></span><br><span class="line"><span class="meta">#     "a1": 123,</span></span><br><span class="line"><span class="meta">#     'a2': 456</span></span><br><span class="line"><span class="meta"># &#125;</span></span><br><span class="line"><span class="meta"># user_info.update(test)</span></span><br><span class="line"><span class="meta"># print(user_info)</span></span><br><span class="line"></span><br><span class="line"><span class="meta"># 删除指定索引的键值对</span></span><br><span class="line">test = &#123;</span><br><span class="line">    <span class="string">"a1"</span>: <span class="number">123</span>,</span><br><span class="line">    <span class="string">'a2'</span>: <span class="number">456</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">del test[<span class="string">'a1'</span>]</span><br><span class="line">print(test)</span><br></pre></td></tr></table></figure><p><1> 遍历字典的key（键）<br><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    dict=&#123;<span class="string">"name"</span>:<span class="string">"zhangsan"</span>,<span class="string">"sex"</span>:<span class="string">"m"</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> <span class="built_in">key</span> <span class="keyword">in</span> dict.keys():</span><br><span class="line">        <span class="built_in">print</span> <span class="built_in">key</span></span><br><span class="line">输出结果为</span><br><span class="line">    name</span><br><span class="line">    sex</span><br></pre></td></tr></table></figure></1></p><p><2> 遍历字典的value（值）<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    dict=&#123;<span class="string">"name"</span>:<span class="string">"zhangsan"</span>,<span class="string">"sex"</span>:<span class="string">'m'</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">value</span> <span class="keyword">in</span> dict.values():</span><br><span class="line">        print <span class="keyword">value</span></span><br><span class="line">输出结果为</span><br><span class="line">    zhangsan</span><br><span class="line">    m</span><br></pre></td></tr></table></figure></2></p><p><3> 遍历字典的项（元素）<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    dict=&#123;<span class="string">"name"</span>:<span class="string">"zhangsan"</span>,<span class="string">"sex"</span>:<span class="string">"m"</span>&#125;</span><br><span class="line">    <span class="keyword">for</span> <span class="literal">item</span> <span class="keyword">in</span> dict.items():</span><br><span class="line">        print <span class="literal">item</span></span><br><span class="line">输出结果为:</span><br><span class="line">    (<span class="string">'name'</span>,<span class="string">'zhangsan'</span>)</span><br><span class="line">    (<span class="string">'sex'</span>,<span class="string">'m'</span>)</span><br></pre></td></tr></table></figure></3></p><p><4> 遍历字典的key-value（键值对）<br><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dict=&#123;<span class="string">'name'</span>:<span class="string">'zhangsan'</span>,<span class="string">'sex'</span>:<span class="string">'m'</span>&#125;</span><br><span class="line"><span class="keyword">for</span> key,<span class="keyword">value</span> <span class="keyword">in</span> dict.items():</span><br><span class="line">    print(<span class="string">'key=%s,value=%s'</span>%(key,<span class="keyword">value</span>))</span><br><span class="line">输出结果:</span><br><span class="line">    key=name,<span class="keyword">value</span>=zhangsan</span><br><span class="line">    key=sex,<span class="keyword">value</span>=m</span><br></pre></td></tr></table></figure></4></p><h6 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h6><p>用法</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">############### 元组 #################</span><br><span class="line">name_tuple = (<span class="string">'alex'</span>, <span class="string">'eric'</span>)</span><br><span class="line"># 索引</span><br><span class="line">print(name_tuple[<span class="number">0</span>])</span><br><span class="line"># len</span><br><span class="line">print(name_tuple[len(name_tuple)<span class="number">-1</span>])</span><br><span class="line"># 切片</span><br><span class="line">print(name_tuple[<span class="number">0</span>:<span class="number">1</span>])</span><br><span class="line"># for</span><br><span class="line">for i <span class="keyword">in</span> name_tuple:</span><br><span class="line">    print(i)</span><br><span class="line"># 删除</span><br><span class="line"># del name_tuple[<span class="number">0</span>] 不支持</span><br><span class="line"># count，计算元素出现的个数</span><br><span class="line">print(name_tuple.count(<span class="string">'alex'</span>))</span><br><span class="line"># index 获取指定元素的索引位置</span><br><span class="line">print(name_tuple.index(<span class="string">'alex'</span>))</span><br></pre></td></tr></table></figure><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">不想别人改  默认变量 等。 别人调用你的程序元组。别人该你的不想改 用元组</span><br><span class="line">只有两个方法</span><br><span class="line"> c.count(</span><br><span class="line">  c.index(</span><br><span class="line"></span><br><span class="line">tuple(列表)列表变元组</span><br><span class="line">&gt;&gt;&gt; a = range(<span class="number">10</span>)</span><br><span class="line">&gt;&gt;&gt; a</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">&gt;&gt;&gt; d=tuple(a)</span><br><span class="line">&gt;&gt;&gt; d</span><br><span class="line">(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)</span><br><span class="line"><span class="type">list</span>(元组)元组变列表</span><br><span class="line">&gt;&gt;&gt; d</span><br><span class="line">(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)</span><br><span class="line">&gt;&gt;&gt; e = <span class="type">list</span>(a)</span><br><span class="line">&gt;&gt;&gt; e</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure><h3 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h3><ul><li>python中不允许修改元组的数据</li><li>元组中的元素值是不允许删除的，但我们可以使用del语句来删除整个元组</li><li>与字符串一样，元组之间可以使用 + 号和 * 号进行运算。这就意味着他们可以组合和复制，运算后会生成一个新的元组。</li></ul><hr><table><thead><tr><th style="text-align:left">Python 表达式</th><th style="text-align:left">结果</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:left">len((1, 2, 3))</td><td style="text-align:left">3</td><td>计算元素个数</td></tr><tr><td style="text-align:left">(1, 2, 3) + (4, 5, 6)</td><td style="text-align:left">(1, 2, 3, 4, 5, 6)</td><td>连接</td></tr><tr><td style="text-align:left">[‘Hi!’] * 4</td><td style="text-align:left">[‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’]</td><td>复制</td></tr><tr><td style="text-align:left">3 in (1, 2, 3)</td><td style="text-align:left">True</td><td>元素是否存在</td></tr><tr><td style="text-align:left">for x in (1, 2, 3): print x</td><td style="text-align:left">1 2 3</td><td>迭代</td></tr></tbody></table><hr><p>多维元组访问的示例</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; tuple1 = [(2,3),(4,5)]</span><br><span class="line">&gt;&gt;&gt; tuple1[0]</span><br><span class="line">(2, 3)</span><br><span class="line">&gt;&gt;&gt; tuple1[<span class="string">0</span>][<span class="symbol">0</span>]</span><br><span class="line">2</span><br><span class="line">&gt;&gt;&gt; tuple1[<span class="string">0</span>][<span class="symbol">2</span>]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File "<span class="xml"><span class="tag">&lt;<span class="name">stdin</span>&gt;</span></span>", line 1, in <span class="xml"><span class="tag">&lt;<span class="name">module</span>&gt;</span></span></span><br><span class="line">IndexError: tuple index out of range</span><br><span class="line">&gt;&gt;&gt; tuple1[<span class="string">0</span>][<span class="symbol">1</span>]</span><br><span class="line">3</span><br><span class="line">&gt;&gt;&gt; tuple1[<span class="string">2</span>][<span class="symbol">2</span>]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File "<span class="xml"><span class="tag">&lt;<span class="name">stdin</span>&gt;</span></span>", line 1, in <span class="xml"><span class="tag">&lt;<span class="name">module</span>&gt;</span></span></span><br><span class="line">IndexError: list index out of range</span><br><span class="line">&gt;&gt;&gt; tuple2 = tuple1+[(3)]</span><br><span class="line">&gt;&gt;&gt; tuple2</span><br><span class="line">[(2, 3), (4, 5), 3]</span><br><span class="line">&gt;&gt;&gt; tuple2[2]</span><br><span class="line">3</span><br><span class="line">&gt;&gt;&gt; tuple2[<span class="string">2</span>][<span class="symbol">0</span>]</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File "<span class="xml"><span class="tag">&lt;<span class="name">stdin</span>&gt;</span></span>", line 1, in <span class="xml"><span class="tag">&lt;<span class="name">module</span>&gt;</span></span></span><br><span class="line">TypeError: 'int' object is not subscriptable</span><br></pre></td></tr></table></figure><h4 id="下面是完整的，它可以与％符号使用列表"><a href="#下面是完整的，它可以与％符号使用列表" class="headerlink" title="下面是完整的，它可以与％符号使用列表:"></a>下面是完整的，它可以与％符号使用列表:</h4><hr><table><thead><tr><th style="text-align:left">格式符号</th><th style="text-align:left">转换</th></tr></thead><tbody><tr><td style="text-align:left">%c</td><td style="text-align:left">字符</td></tr><tr><td style="text-align:left">%s</td><td style="text-align:left">通过str() 字符串转换来格式化</td></tr><tr><td style="text-align:left">%i</td><td style="text-align:left">有符号十进制整数</td></tr><tr><td style="text-align:left">%d</td><td style="text-align:left">有符号十进制整数</td></tr><tr><td style="text-align:left">%u</td><td style="text-align:left">无符号十进制整数</td></tr><tr><td style="text-align:left">%o</td><td style="text-align:left">八进制整数</td></tr><tr><td style="text-align:left">%x</td><td style="text-align:left">十六进制整数（小写字母）</td></tr><tr><td style="text-align:left">%X</td><td style="text-align:left">十六进制整数（大写字母）</td></tr><tr><td style="text-align:left">%e</td><td style="text-align:left">索引符号（小写’e’）</td></tr><tr><td style="text-align:left">%E</td><td style="text-align:left">索引符号（大写“E”）</td></tr><tr><td style="text-align:left">%f</td><td style="text-align:left">浮点实数</td></tr><tr><td style="text-align:left">%g</td><td style="text-align:left">％f和％e 的简写</td></tr><tr><td style="text-align:left">%G</td><td style="text-align:left">％f和％E的简写</td></tr></tbody></table><hr><p>函数<br>函数表达式<br><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 定义一个函数，能够完成打印信息的功能</span><br><span class="line">    def printInfo():</span><br><span class="line">        print <span class="string">'------------------------------------'</span></span><br><span class="line">        print <span class="string">'         生命苦短，我用Python'</span></span><br><span class="line">        print <span class="string">'------------------------------------'</span></span><br><span class="line"></span><br><span class="line">###### 编写函数注意事项：</span><br><span class="line"><span class="number">1.</span>函数定义是以def开始的吗？</span><br><span class="line"><span class="number">2.</span>函数名称是以字符和下划线—组成的吗？</span><br><span class="line"><span class="number">3.</span>函数名称是否紧跟着括号（）？</span><br><span class="line"><span class="number">4.</span>函数（括号里的是否包含参数？是多个参数是否以逗号隔开？）</span><br><span class="line"><span class="number">5.</span>参数名称是否有重复？（不能使用重复参数名）</span><br><span class="line"><span class="number">6.</span>紧跟着参数的是不是有括号和冒号）：？</span><br><span class="line"><span class="number">7.</span>紧跟着函数定义的代码是否使用了<span class="number">4</span>个空格的缩进（indent）？</span><br><span class="line"><span class="number">8.</span>函数结束的位置是否取消了缩进（dedent）？</span><br><span class="line"></span><br><span class="line">函数表达式</span><br></pre></td></tr></table></figure></p><p>如果在开发程序时，需要某块代码多次，但是为了提高编写的效率以及代码的重用，所以把具有独立功能的代码块组织为一个小模块，这就是函数</p><p>1、for循环<br>用户按照顺序循环可迭代对象中的内容，<br>PS：break、continue<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">li</span> = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>]</span><br><span class="line"><span class="keyword">for</span> <span class="selector-tag">i</span> <span class="keyword">in</span> <span class="selector-tag">li</span>:</span><br><span class="line">   print(<span class="selector-tag">li</span>.index(i),i)</span><br></pre></td></tr></table></figure></p><p><img src="https://images2015.cnblogs.com/blog/1121654/201703/1121654-20170325210856565-1429842113.png" alt="avatar"></p><h3 id="enumrate"><a href="#enumrate" class="headerlink" title="enumrate"></a>enumrate</h3><p>创建 序列号<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">li</span> = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>]</span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> enumerate(<span class="selector-tag">li</span>, <span class="number">1</span>):</span><br><span class="line">   print(k,v)</span><br></pre></td></tr></table></figure></p><h4 id="Python注意事项："><a href="#Python注意事项：" class="headerlink" title="Python注意事项："></a>Python注意事项：</h4><p>1.python一些具有特殊功能的标示符，这就是所谓的关键字。Python命名时，不能使用内置关键字。</p><p>关键字，是python已经使用的了，所以不允许开发者自己定义和关键字相同的名字的标示符</p><p>不知道的，可在Python环境中，输入“import keyword” —&gt;”keyword.kwlist”查看</p>]]></content>
    
    <summary type="html">
    
      &lt;h6 id=&quot;配置Windows下的CMD命令-Python27与Python36的优先级&quot;&gt;&lt;a href=&quot;#配置Windows下的CMD命令-Python27与Python36的优先级&quot; class=&quot;headerlink&quot; title=&quot;配置Windows下的CMD命令:Python27与Python36的优先级?&quot;&gt;&lt;/a&gt;配置Windows下的CMD命令:Python27与Python36的优先级?&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;D:\Python36\Scripts\;&lt;/li&gt;
&lt;li&gt;D:\Python36\; (该项在环境变量靠前,Cmd 解读的就-是python3,想要Python27优先使用同该步骤)
    
    </summary>
    
    
      <category term="python 基础" scheme="https://dannieldylan.github.io/danniel/tags/python-%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
</feed>
